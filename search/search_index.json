{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages ponyzip builtin collections debug ponytest random time","title":"ponyzip"},{"location":"builtin--index/","text":"Builtin package \u00b6 The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries. Public Types \u00b6 primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq struct RuntimeOptions trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Package"},{"location":"builtin--index/#builtin-package","text":"The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.","title":"Builtin package"},{"location":"builtin--index/#public-types","text":"primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq struct RuntimeOptions trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Public Types"},{"location":"builtin-AmbientAuth/","text":"AmbientAuth \u00b6 [Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val","title":"primitive AmbientAuth"},{"location":"builtin-AmbientAuth/#ambientauth","text":"[Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth","title":"AmbientAuth"},{"location":"builtin-AmbientAuth/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AmbientAuth/#eq","text":"[Source] fun box eq( that: AmbientAuth val) : Bool val","title":"eq"},{"location":"builtin-AmbientAuth/#parameters","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-AmbientAuth/#ne","text":"[Source] fun box ne( that: AmbientAuth val) : Bool val","title":"ne"},{"location":"builtin-AmbientAuth/#parameters_1","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Any/","text":"Any \u00b6 [Source] interface tag Any","title":"interface Any"},{"location":"builtin-Any/#any","text":"[Source] interface tag Any","title":"Any"},{"location":"builtin-Array/","text":"Array[A: A] \u00b6 [Source] Contiguous, resizable memory to store elements of type A. Usage \u00b6 Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end Memory allocation \u00b6 Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref Implements \u00b6 Seq [A] ref Constructors \u00b6 create \u00b6 [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Array [A] ref^ init \u00b6 [Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^ Parameters \u00b6 from: A^ len: USize val Returns \u00b6 Array [A] ref^ from_cpointer \u00b6 [Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^ Parameters \u00b6 ptr: Pointer [A] ref len: USize val alloc: USize val = 0 Returns \u00b6 Array [A] ref^ Public Functions \u00b6 cpointer \u00b6 [Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [A] tag size \u00b6 [Source] The number of elements in the array. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the array. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val Returns \u00b6 None val undefined[optional B: (A & Real [B] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val read_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U8 val ? read_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U16 val ? read_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U32 val ? read_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U64 val ? read_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U128 val ? apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: USize val value: U8 val Returns \u00b6 U8 val ? update_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ? Parameters \u00b6 offset: USize val value: U16 val Returns \u00b6 U16 val ? update_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ? Parameters \u00b6 offset: USize val value: U32 val Returns \u00b6 U32 val ? update_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ? Parameters \u00b6 offset: USize val value: U64 val Returns \u00b6 U64 val ? update_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ? Parameters \u00b6 offset: USize val value: U128 val Returns \u00b6 U128 val ? update \u00b6 [Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? insert \u00b6 [Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index this.size() , the element will be appended, similar to push() , an insert at index 0 prepends the value to the array. An insert into an index beyond this.size() raises an error. let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error fun ref insert( i: USize val, value: A) : None val ? Parameters \u00b6 i: USize val value: A Returns \u00b6 None val ? delete \u00b6 [Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ? Parameters \u00b6 i: USize val Returns \u00b6 A^ ? truncate \u00b6 [Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 Array [A] val chop[optional B: (A & Any #send)] \u00b6 [Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end fun iso chop[optional B: (A & Any #send)]( split_point: USize val) : (Array[A] iso^ , Array[A] iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( Array [A] iso^ , Array [A] iso^) unchop \u00b6 [Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^) Parameters \u00b6 b: Array [A] iso Returns \u00b6 (( Array [A] iso^ , Array [A] iso^) | Array [A] iso^) copy_from[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val copy_to \u00b6 [Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val remove \u00b6 [Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val Parameters \u00b6 i: USize val n: USize val Returns \u00b6 None val clear \u00b6 [Source] Remove all elements from the array. fun ref clear() : None val Returns \u00b6 None val push_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val push_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val Parameters \u00b6 value: U16 val Returns \u00b6 None val push_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val push_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val Parameters \u00b6 value: U64 val Returns \u00b6 None val push_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val Parameters \u00b6 value: U128 val Returns \u00b6 None val push \u00b6 [Source] Add an element to the end of the array. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val find \u00b6 [Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? contains \u00b6 [Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val Parameters \u00b6 value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 Bool val rfind \u00b6 [Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? clone \u00b6 [Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ slice \u00b6 [Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^ Parameters \u00b6 from: USize val = 0 to: USize val = call step: USize val = 1 Returns \u00b6 Array [this->A!] ref^ permute \u00b6 [Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ? Parameters \u00b6 indices: Iterator [ USize val] ref Returns \u00b6 Array [this->A!] ref^ ? reverse \u00b6 [Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ reverse_in_place \u00b6 [Source] Reverse the array in place. fun ref reverse_in_place() : None val Returns \u00b6 None val swap_elements \u00b6 [Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ? Parameters \u00b6 i: USize val j: USize val Returns \u00b6 None val ? keys \u00b6 [Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayKeys [A, this-> Array [A] ref] ref^ values \u00b6 [Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayValues [A, this-> Array [A] ref] ref^ pairs \u00b6 [Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayPairs [A, this-> Array [A] ref] ref^","title":"class Array"},{"location":"builtin-Array/#arraya-a","text":"[Source] Contiguous, resizable memory to store elements of type A.","title":"Array[A: A]"},{"location":"builtin-Array/#usage","text":"Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end","title":"Usage"},{"location":"builtin-Array/#memory-allocation","text":"Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref","title":"Memory allocation"},{"location":"builtin-Array/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"builtin-Array/#constructors","text":"","title":"Constructors"},{"location":"builtin-Array/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^","title":"create"},{"location":"builtin-Array/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#init","text":"[Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^","title":"init"},{"location":"builtin-Array/#parameters_1","text":"from: A^ len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_1","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#from_cpointer","text":"[Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^","title":"from_cpointer"},{"location":"builtin-Array/#parameters_2","text":"ptr: Pointer [A] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_2","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Array/#cpointer","text":"[Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag","title":"cpointer"},{"location":"builtin-Array/#parameters_3","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_3","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Array/#size","text":"[Source] The number of elements in the array. fun box size() : USize val","title":"size"},{"location":"builtin-Array/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-Array/#space","text":"[Source] The available space in the array. fun box space() : USize val","title":"space"},{"location":"builtin-Array/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-Array/#reserve","text":"[Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Array/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Array/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val","title":"compact"},{"location":"builtin-Array/#returns_7","text":"None val","title":"Returns"},{"location":"builtin-Array/#undefinedoptional-b-a-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","text":"[Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"builtin-Array/#parameters_5","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Array/#read_u8optional-b-a-realb-val-u8-val","text":"[Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ?","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_6","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#read_u16optional-b-a-realb-val-u8-val","text":"[Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ?","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_7","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#read_u32optional-b-a-realb-val-u8-val","text":"[Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ?","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_8","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_11","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#read_u64optional-b-a-realb-val-u8-val","text":"[Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ?","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_9","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#read_u128optional-b-a-realb-val-u8-val","text":"[Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ?","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_10","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_13","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Array/#parameters_11","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_14","text":"this->A ?","title":"Returns"},{"location":"builtin-Array/#update_u8optional-b-a-realb-val-u8-val","text":"[Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ?","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_12","text":"offset: USize val value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#update_u16optional-b-a-realb-val-u8-val","text":"[Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ?","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_13","text":"offset: USize val value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_16","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#update_u32optional-b-a-realb-val-u8-val","text":"[Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ?","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_14","text":"offset: USize val value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_17","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#update_u64optional-b-a-realb-val-u8-val","text":"[Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ?","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_15","text":"offset: USize val value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#update_u128optional-b-a-realb-val-u8-val","text":"[Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ?","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_16","text":"offset: USize val value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_19","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Array/#parameters_17","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_20","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#insert","text":"[Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index this.size() , the element will be appended, similar to push() , an insert at index 0 prepends the value to the array. An insert into an index beyond this.size() raises an error. let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error fun ref insert( i: USize val, value: A) : None val ?","title":"insert"},{"location":"builtin-Array/#parameters_18","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_21","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#delete","text":"[Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ?","title":"delete"},{"location":"builtin-Array/#parameters_19","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_22","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#truncate","text":"[Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Array/#parameters_20","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_23","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim_in_place","text":"[Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-Array/#parameters_21","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_24","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim","text":"[Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val","title":"trim"},{"location":"builtin-Array/#parameters_22","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_25","text":"Array [A] val","title":"Returns"},{"location":"builtin-Array/#chopoptional-b-a-any-send","text":"[Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end fun iso chop[optional B: (A & Any #send)]( split_point: USize val) : (Array[A] iso^ , Array[A] iso^)","title":"chop[optional B: (A &amp; Any #send)]"},{"location":"builtin-Array/#parameters_23","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_26","text":"( Array [A] iso^ , Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#unchop","text":"[Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)","title":"unchop"},{"location":"builtin-Array/#parameters_24","text":"b: Array [A] iso","title":"Parameters"},{"location":"builtin-Array/#returns_27","text":"(( Array [A] iso^ , Array [A] iso^) | Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#copy_fromoptional-b-a-realb-val-u8-val","text":"[Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_25","text":"src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_28","text":"None val","title":"Returns"},{"location":"builtin-Array/#copy_to","text":"[Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_to"},{"location":"builtin-Array/#parameters_26","text":"dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_29","text":"None val","title":"Returns"},{"location":"builtin-Array/#remove","text":"[Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val","title":"remove"},{"location":"builtin-Array/#parameters_27","text":"i: USize val n: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_30","text":"None val","title":"Returns"},{"location":"builtin-Array/#clear","text":"[Source] Remove all elements from the array. fun ref clear() : None val","title":"clear"},{"location":"builtin-Array/#returns_31","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u8optional-b-a-realb-val-u8-val","text":"[Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_28","text":"value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_32","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u16optional-b-a-realb-val-u8-val","text":"[Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_29","text":"value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_33","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u32optional-b-a-realb-val-u8-val","text":"[Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_30","text":"value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_34","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u64optional-b-a-realb-val-u8-val","text":"[Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_31","text":"value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u128optional-b-a-realb-val-u8-val","text":"[Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_32","text":"value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_36","text":"None val","title":"Returns"},{"location":"builtin-Array/#push","text":"[Source] Add an element to the end of the array. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Array/#parameters_33","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_37","text":"None val","title":"Returns"},{"location":"builtin-Array/#pop","text":"[Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Array/#returns_38","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#unshift","text":"[Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Array/#parameters_34","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_39","text":"None val","title":"Returns"},{"location":"builtin-Array/#shift","text":"[Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Array/#returns_40","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Array/#parameters_35","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-Array/#concat","text":"[Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Array/#parameters_36","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_42","text":"None val","title":"Returns"},{"location":"builtin-Array/#find","text":"[Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"find"},{"location":"builtin-Array/#parameters_37","text":"value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_43","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#contains","text":"[Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val","title":"contains"},{"location":"builtin-Array/#parameters_38","text":"value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Array/#rfind","text":"[Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"rfind"},{"location":"builtin-Array/#parameters_39","text":"value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_45","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#clone","text":"[Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^","title":"clone"},{"location":"builtin-Array/#returns_46","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#slice","text":"[Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^","title":"slice"},{"location":"builtin-Array/#parameters_40","text":"from: USize val = 0 to: USize val = call step: USize val = 1","title":"Parameters"},{"location":"builtin-Array/#returns_47","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#permute","text":"[Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ?","title":"permute"},{"location":"builtin-Array/#parameters_41","text":"indices: Iterator [ USize val] ref","title":"Parameters"},{"location":"builtin-Array/#returns_48","text":"Array [this->A!] ref^ ?","title":"Returns"},{"location":"builtin-Array/#reverse","text":"[Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^","title":"reverse"},{"location":"builtin-Array/#returns_49","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#reverse_in_place","text":"[Source] Reverse the array in place. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-Array/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-Array/#swap_elements","text":"[Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ?","title":"swap_elements"},{"location":"builtin-Array/#parameters_42","text":"i: USize val j: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_51","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#keys","text":"[Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^","title":"keys"},{"location":"builtin-Array/#returns_52","text":"ArrayKeys [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#values","text":"[Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^","title":"values"},{"location":"builtin-Array/#returns_53","text":"ArrayValues [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^","title":"pairs"},{"location":"builtin-Array/#returns_54","text":"ArrayPairs [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/","text":"ArrayKeys[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref Implements \u00b6 Iterator [ USize val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayKeys[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayKeys [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : USize val Returns \u00b6 USize val","title":"class ArrayKeys"},{"location":"builtin-ArrayKeys/#arraykeysa-a-b-arraya-read","text":"[Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref","title":"ArrayKeys[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayKeys/#implements","text":"Iterator [ USize val] ref","title":"Implements"},{"location":"builtin-ArrayKeys/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayKeys/#create","text":"[Source] new ref create( array: B) : ArrayKeys[A, B] ref^","title":"create"},{"location":"builtin-ArrayKeys/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayKeys/#returns","text":"ArrayKeys [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayKeys/#next","text":"[Source] fun ref next() : USize val","title":"next"},{"location":"builtin-ArrayKeys/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-ArrayPairs/","text":"ArrayPairs[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref Implements \u00b6 Iterator [( USize val , B->A)] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayPairs[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayPairs [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (USize val , B->A) ? Returns \u00b6 ( USize val , B->A) ?","title":"class ArrayPairs"},{"location":"builtin-ArrayPairs/#arraypairsa-a-b-arraya-read","text":"[Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref","title":"ArrayPairs[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayPairs/#implements","text":"Iterator [( USize val , B->A)] ref","title":"Implements"},{"location":"builtin-ArrayPairs/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayPairs/#create","text":"[Source] new ref create( array: B) : ArrayPairs[A, B] ref^","title":"create"},{"location":"builtin-ArrayPairs/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayPairs/#returns","text":"ArrayPairs [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayPairs/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayPairs/#next","text":"[Source] fun ref next() : (USize val , B->A) ?","title":"next"},{"location":"builtin-ArrayPairs/#returns_2","text":"( USize val , B->A) ?","title":"Returns"},{"location":"builtin-ArrayValues/","text":"ArrayValues[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref Implements \u00b6 Iterator [B->A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayValues[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayValues [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : B->A ? Returns \u00b6 B->A ? rewind \u00b6 [Source] fun ref rewind() : ArrayValues[A, B] ref Returns \u00b6 ArrayValues [A, B] ref","title":"class ArrayValues"},{"location":"builtin-ArrayValues/#arrayvaluesa-a-b-arraya-read","text":"[Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref","title":"ArrayValues[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayValues/#implements","text":"Iterator [B->A] ref","title":"Implements"},{"location":"builtin-ArrayValues/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayValues/#create","text":"[Source] new ref create( array: B) : ArrayValues[A, B] ref^","title":"create"},{"location":"builtin-ArrayValues/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayValues/#returns","text":"ArrayValues [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayValues/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayValues/#next","text":"[Source] fun ref next() : B->A ?","title":"next"},{"location":"builtin-ArrayValues/#returns_2","text":"B->A ?","title":"Returns"},{"location":"builtin-ArrayValues/#rewind","text":"[Source] fun ref rewind() : ArrayValues[A, B] ref","title":"rewind"},{"location":"builtin-ArrayValues/#returns_3","text":"ArrayValues [A, B] ref","title":"Returns"},{"location":"builtin-AsioEvent/","text":"AsioEvent \u00b6 [Source] Functions for asynchronous event notification. primitive val AsioEvent Constructors \u00b6 create \u00b6 [Source] new val create() : AsioEvent val^ Returns \u00b6 AsioEvent val^ Public Functions \u00b6 none \u00b6 [Source] An empty event. fun box none() : Pointer[AsioEvent val] tag Returns \u00b6 Pointer [ AsioEvent val] tag readable \u00b6 [Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val writeable \u00b6 [Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val disposable \u00b6 [Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val oneshotable \u00b6 [Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val dispose \u00b6 [Source] fun box dispose() : U32 val Returns \u00b6 U32 val read \u00b6 [Source] fun box read() : U32 val Returns \u00b6 U32 val write \u00b6 [Source] fun box write() : U32 val Returns \u00b6 U32 val timer \u00b6 [Source] fun box timer() : U32 val Returns \u00b6 U32 val signal \u00b6 [Source] fun box signal() : U32 val Returns \u00b6 U32 val read_write \u00b6 [Source] fun box read_write() : U32 val Returns \u00b6 U32 val oneshot \u00b6 [Source] fun box oneshot() : U32 val Returns \u00b6 U32 val read_write_oneshot \u00b6 [Source] fun box read_write_oneshot() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val","title":"primitive AsioEvent"},{"location":"builtin-AsioEvent/#asioevent","text":"[Source] Functions for asynchronous event notification. primitive val AsioEvent","title":"AsioEvent"},{"location":"builtin-AsioEvent/#constructors","text":"","title":"Constructors"},{"location":"builtin-AsioEvent/#create","text":"[Source] new val create() : AsioEvent val^","title":"create"},{"location":"builtin-AsioEvent/#returns","text":"AsioEvent val^","title":"Returns"},{"location":"builtin-AsioEvent/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AsioEvent/#none","text":"[Source] An empty event. fun box none() : Pointer[AsioEvent val] tag","title":"none"},{"location":"builtin-AsioEvent/#returns_1","text":"Pointer [ AsioEvent val] tag","title":"Returns"},{"location":"builtin-AsioEvent/#readable","text":"[Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val","title":"readable"},{"location":"builtin-AsioEvent/#parameters","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#writeable","text":"[Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val","title":"writeable"},{"location":"builtin-AsioEvent/#parameters_1","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#disposable","text":"[Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val","title":"disposable"},{"location":"builtin-AsioEvent/#parameters_2","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshotable","text":"[Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val","title":"oneshotable"},{"location":"builtin-AsioEvent/#parameters_3","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#dispose","text":"[Source] fun box dispose() : U32 val","title":"dispose"},{"location":"builtin-AsioEvent/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read","text":"[Source] fun box read() : U32 val","title":"read"},{"location":"builtin-AsioEvent/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#write","text":"[Source] fun box write() : U32 val","title":"write"},{"location":"builtin-AsioEvent/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#timer","text":"[Source] fun box timer() : U32 val","title":"timer"},{"location":"builtin-AsioEvent/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#signal","text":"[Source] fun box signal() : U32 val","title":"signal"},{"location":"builtin-AsioEvent/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write","text":"[Source] fun box read_write() : U32 val","title":"read_write"},{"location":"builtin-AsioEvent/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshot","text":"[Source] fun box oneshot() : U32 val","title":"oneshot"},{"location":"builtin-AsioEvent/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write_oneshot","text":"[Source] fun box read_write_oneshot() : U32 val","title":"read_write_oneshot"},{"location":"builtin-AsioEvent/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#eq","text":"[Source] fun box eq( that: AsioEvent val) : Bool val","title":"eq"},{"location":"builtin-AsioEvent/#parameters_4","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#ne","text":"[Source] fun box ne( that: AsioEvent val) : Bool val","title":"ne"},{"location":"builtin-AsioEvent/#parameters_5","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEventID/","text":"AsioEventID \u00b6 [Source] type AsioEventID is Pointer[AsioEvent val] tag Type Alias For \u00b6 Pointer [ AsioEvent val] tag","title":"type AsioEventID"},{"location":"builtin-AsioEventID/#asioeventid","text":"[Source] type AsioEventID is Pointer[AsioEvent val] tag","title":"AsioEventID"},{"location":"builtin-AsioEventID/#type-alias-for","text":"Pointer [ AsioEvent val] tag","title":"Type Alias For"},{"location":"builtin-AsioEventNotify/","text":"AsioEventNotify \u00b6 [Source] interface tag AsioEventNotify","title":"interface AsioEventNotify"},{"location":"builtin-AsioEventNotify/#asioeventnotify","text":"[Source] interface tag AsioEventNotify","title":"AsioEventNotify"},{"location":"builtin-Bool/","text":"Bool \u00b6 [Source] primitive val Bool is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create( from: Bool val) : Bool val^ Parameters \u00b6 from: Bool val Returns \u00b6 Bool val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_and \u00b6 [Source] fun box op_and( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_or \u00b6 [Source] fun box op_or( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_xor \u00b6 [Source] fun box op_xor( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_not \u00b6 [Source] fun box op_not() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"primitive Bool"},{"location":"builtin-Bool/#bool","text":"[Source] primitive val Bool is Stringable box","title":"Bool"},{"location":"builtin-Bool/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-Bool/#constructors","text":"","title":"Constructors"},{"location":"builtin-Bool/#create","text":"[Source] new val create( from: Bool val) : Bool val^","title":"create"},{"location":"builtin-Bool/#parameters","text":"from: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns","text":"Bool val^","title":"Returns"},{"location":"builtin-Bool/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Bool/#eq","text":"[Source] fun box eq( y: Bool val) : Bool val","title":"eq"},{"location":"builtin-Bool/#parameters_1","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#ne","text":"[Source] fun box ne( y: Bool val) : Bool val","title":"ne"},{"location":"builtin-Bool/#parameters_2","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_and","text":"[Source] fun box op_and( y: Bool val) : Bool val","title":"op_and"},{"location":"builtin-Bool/#parameters_3","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_or","text":"[Source] fun box op_or( y: Bool val) : Bool val","title":"op_or"},{"location":"builtin-Bool/#parameters_4","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_xor","text":"[Source] fun box op_xor( y: Bool val) : Bool val","title":"op_xor"},{"location":"builtin-Bool/#parameters_5","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_not","text":"[Source] fun box op_not() : Bool val","title":"op_not"},{"location":"builtin-Bool/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Bool/#returns_7","text":"String iso^","title":"Returns"},{"location":"builtin-ByteSeq/","text":"ByteSeq \u00b6 [Source] type ByteSeq is (String val | Array[U8 val] val) Type Alias For \u00b6 ( String val | Array [ U8 val] val)","title":"type ByteSeq"},{"location":"builtin-ByteSeq/#byteseq","text":"[Source] type ByteSeq is (String val | Array[U8 val] val)","title":"ByteSeq"},{"location":"builtin-ByteSeq/#type-alias-for","text":"( String val | Array [ U8 val] val)","title":"Type Alias For"},{"location":"builtin-ByteSeqIter/","text":"ByteSeqIter \u00b6 [Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter Public Functions \u00b6 values \u00b6 [Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref Returns \u00b6 Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"interface ByteSeqIter"},{"location":"builtin-ByteSeqIter/#byteseqiter","text":"[Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter","title":"ByteSeqIter"},{"location":"builtin-ByteSeqIter/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ByteSeqIter/#values","text":"[Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref","title":"values"},{"location":"builtin-ByteSeqIter/#returns","text":"Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"Returns"},{"location":"builtin-Comparable/","text":"Comparable[A: Comparable [A] #read] \u00b6 [Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref Implements \u00b6 Equatable [A] ref Public Functions \u00b6 lt \u00b6 [Source] fun box lt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val compare \u00b6 [Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Comparable"},{"location":"builtin-Comparable/#comparablea-comparablea-read","text":"[Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref","title":"Comparable[A: Comparable[A] #read]"},{"location":"builtin-Comparable/#implements","text":"Equatable [A] ref","title":"Implements"},{"location":"builtin-Comparable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Comparable/#lt","text":"[Source] fun box lt( that: box->A) : Bool val","title":"lt"},{"location":"builtin-Comparable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#le","text":"[Source] fun box le( that: box->A) : Bool val","title":"le"},{"location":"builtin-Comparable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ge","text":"[Source] fun box ge( that: box->A) : Bool val","title":"ge"},{"location":"builtin-Comparable/#parameters_2","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#gt","text":"[Source] fun box gt( that: box->A) : Bool val","title":"gt"},{"location":"builtin-Comparable/#parameters_3","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#compare","text":"[Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Comparable/#parameters_4","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_4","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Comparable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Comparable/#parameters_5","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Comparable/#parameters_6","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Compare/","text":"Compare \u00b6 [Source] type Compare is (Less val | Equal val | Greater val) Type Alias For \u00b6 ( Less val | Equal val | Greater val)","title":"type Compare"},{"location":"builtin-Compare/#compare","text":"[Source] type Compare is (Less val | Equal val | Greater val)","title":"Compare"},{"location":"builtin-Compare/#type-alias-for","text":"( Less val | Equal val | Greater val)","title":"Type Alias For"},{"location":"builtin-DisposableActor/","text":"DisposableActor \u00b6 [Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor Public Behaviours \u00b6 dispose \u00b6 [Source] be dispose()","title":"interface DisposableActor"},{"location":"builtin-DisposableActor/#disposableactor","text":"[Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor","title":"DisposableActor"},{"location":"builtin-DisposableActor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-DisposableActor/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"builtin-DoNotOptimise/","text":"DoNotOptimise \u00b6 [Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise Constructors \u00b6 create \u00b6 [Source] new val create() : DoNotOptimise val^ Returns \u00b6 DoNotOptimise val^ Public Functions \u00b6 apply[A: A] \u00b6 [Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val Parameters \u00b6 obj: A Returns \u00b6 None val observe \u00b6 [Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val","title":"primitive DoNotOptimise"},{"location":"builtin-DoNotOptimise/#donotoptimise","text":"[Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise","title":"DoNotOptimise"},{"location":"builtin-DoNotOptimise/#constructors","text":"","title":"Constructors"},{"location":"builtin-DoNotOptimise/#create","text":"[Source] new val create() : DoNotOptimise val^","title":"create"},{"location":"builtin-DoNotOptimise/#returns","text":"DoNotOptimise val^","title":"Returns"},{"location":"builtin-DoNotOptimise/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-DoNotOptimise/#applya-a","text":"[Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val","title":"apply[A: A]"},{"location":"builtin-DoNotOptimise/#parameters","text":"obj: A","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#observe","text":"[Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val","title":"observe"},{"location":"builtin-DoNotOptimise/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#eq","text":"[Source] fun box eq( that: DoNotOptimise val) : Bool val","title":"eq"},{"location":"builtin-DoNotOptimise/#parameters_1","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-DoNotOptimise/#ne","text":"[Source] fun box ne( that: DoNotOptimise val) : Bool val","title":"ne"},{"location":"builtin-DoNotOptimise/#parameters_2","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Env/","text":"Env \u00b6 [Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env Constructors \u00b6 create \u00b6 [Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^ Parameters \u00b6 root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val Returns \u00b6 Env val^ Public fields \u00b6 let root: ( AmbientAuth val | None val) \u00b6 [Source] The root capability. Can be None for artificially constructed Env instances. let input: InputStream tag \u00b6 [Source] Stdin represented as an actor. let out: OutStream tag \u00b6 [Source] Stdout let err: OutStream tag \u00b6 [Source] Stderr let args: Array [ String val] val \u00b6 [Source] The command line used to start the program. let vars: Array [ String val] val \u00b6 [Source] The program's environment variables. let exitcode: {(I32)} val \u00b6 [Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"class Env"},{"location":"builtin-Env/#env","text":"[Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env","title":"Env"},{"location":"builtin-Env/#constructors","text":"","title":"Constructors"},{"location":"builtin-Env/#create","text":"[Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^","title":"create"},{"location":"builtin-Env/#parameters","text":"root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val","title":"Parameters"},{"location":"builtin-Env/#returns","text":"Env val^","title":"Returns"},{"location":"builtin-Env/#public-fields","text":"","title":"Public fields"},{"location":"builtin-Env/#let-root-ambientauth-val-none-val","text":"[Source] The root capability. Can be None for artificially constructed Env instances.","title":"let root: (AmbientAuth val | None val)"},{"location":"builtin-Env/#let-input-inputstream-tag","text":"[Source] Stdin represented as an actor.","title":"let input: InputStream tag"},{"location":"builtin-Env/#let-out-outstream-tag","text":"[Source] Stdout","title":"let out: OutStream tag"},{"location":"builtin-Env/#let-err-outstream-tag","text":"[Source] Stderr","title":"let err: OutStream tag"},{"location":"builtin-Env/#let-args-arraystring-val-val","text":"[Source] The command line used to start the program.","title":"let args: Array[String val] val"},{"location":"builtin-Env/#let-vars-arraystring-val-val","text":"[Source] The program's environment variables.","title":"let vars: Array[String val] val"},{"location":"builtin-Env/#let-exitcode-i32-val","text":"[Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"let exitcode: {(I32)} val"},{"location":"builtin-Equal/","text":"Equal \u00b6 [Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Equal val^ Returns \u00b6 Equal val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Equal"},{"location":"builtin-Equal/#equal","text":"[Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref","title":"Equal"},{"location":"builtin-Equal/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Equal/#constructors","text":"","title":"Constructors"},{"location":"builtin-Equal/#create","text":"[Source] new val create() : Equal val^","title":"create"},{"location":"builtin-Equal/#returns","text":"Equal val^","title":"Returns"},{"location":"builtin-Equal/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equal/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Equal/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Equal/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Equal/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Equal/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Equal/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/","text":"Equatable[A: Equatable [A] #read] \u00b6 [Source] interface ref Equatable[A: Equatable[A] #read] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Equatable"},{"location":"builtin-Equatable/#equatablea-equatablea-read","text":"[Source] interface ref Equatable[A: Equatable[A] #read]","title":"Equatable[A: Equatable[A] #read]"},{"location":"builtin-Equatable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equatable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Equatable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Equatable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-F32/","text":"F32 \u00b6 [Source] primitive val F32 is FloatingPoint[F32 val] val Implements \u00b6 FloatingPoint [ F32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F32 val = 0) : F32 val^ Parameters \u00b6 value: F32 val = 0 Returns \u00b6 F32 val^ pi \u00b6 [Source] new val pi() : F32 val^ Returns \u00b6 F32 val^ e \u00b6 [Source] new val e() : F32 val^ Returns \u00b6 F32 val^ from_bits \u00b6 [Source] new val from_bits( i: U32 val) : F32 val^ Parameters \u00b6 i: U32 val Returns \u00b6 F32 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^ Parameters \u00b6 a: B Returns \u00b6 F32 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F32 val^ Returns \u00b6 F32 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F32 val^ Returns \u00b6 F32 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^ Returns \u00b6 F32 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^ Returns \u00b6 F32 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U32 val Returns \u00b6 U32 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F32 val Returns \u00b6 F32 val ceil \u00b6 [Source] fun box ceil() : F32 val Returns \u00b6 F32 val floor \u00b6 [Source] fun box floor() : F32 val Returns \u00b6 F32 val round \u00b6 [Source] fun box round() : F32 val Returns \u00b6 F32 val trunc \u00b6 [Source] fun box trunc() : F32 val Returns \u00b6 F32 val min \u00b6 [Source] fun box min( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val max \u00b6 [Source] fun box max( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld \u00b6 [Source] fun box fld( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod \u00b6 [Source] fun box mod( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val Parameters \u00b6 x: F32 val exponent: I32 val Returns \u00b6 F32 val frexp \u00b6 [Source] fun box frexp() : (F32 val , U32 val) Returns \u00b6 ( F32 val , U32 val) log \u00b6 [Source] fun box log() : F32 val Returns \u00b6 F32 val log2 \u00b6 [Source] fun box log2() : F32 val Returns \u00b6 F32 val log10 \u00b6 [Source] fun box log10() : F32 val Returns \u00b6 F32 val logb \u00b6 [Source] fun box logb() : F32 val Returns \u00b6 F32 val pow \u00b6 [Source] fun box pow( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val powi \u00b6 [Source] fun box powi( y: I32 val) : F32 val Parameters \u00b6 y: I32 val Returns \u00b6 F32 val sqrt \u00b6 [Source] fun box sqrt() : F32 val Returns \u00b6 F32 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val Returns \u00b6 F32 val cbrt \u00b6 [Source] fun box cbrt() : F32 val Returns \u00b6 F32 val exp \u00b6 [Source] fun box exp() : F32 val Returns \u00b6 F32 val exp2 \u00b6 [Source] fun box exp2() : F32 val Returns \u00b6 F32 val cos \u00b6 [Source] fun box cos() : F32 val Returns \u00b6 F32 val sin \u00b6 [Source] fun box sin() : F32 val Returns \u00b6 F32 val tan \u00b6 [Source] fun box tan() : F32 val Returns \u00b6 F32 val cosh \u00b6 [Source] fun box cosh() : F32 val Returns \u00b6 F32 val sinh \u00b6 [Source] fun box sinh() : F32 val Returns \u00b6 F32 val tanh \u00b6 [Source] fun box tanh() : F32 val Returns \u00b6 F32 val acos \u00b6 [Source] fun box acos() : F32 val Returns \u00b6 F32 val asin \u00b6 [Source] fun box asin() : F32 val Returns \u00b6 F32 val atan \u00b6 [Source] fun box atan() : F32 val Returns \u00b6 F32 val atan2 \u00b6 [Source] fun box atan2( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val acosh \u00b6 [Source] fun box acosh() : F32 val Returns \u00b6 F32 val asinh \u00b6 [Source] fun box asinh() : F32 val Returns \u00b6 F32 val atanh \u00b6 [Source] fun box atanh() : F32 val Returns \u00b6 F32 val copysign \u00b6 [Source] fun box copysign( sign: F32 val) : F32 val Parameters \u00b6 sign: F32 val Returns \u00b6 F32 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F32 val Returns \u00b6 F32 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub \u00b6 [Source] fun box sub( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul \u00b6 [Source] fun box mul( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div \u00b6 [Source] fun box div( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem \u00b6 [Source] fun box divrem( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem \u00b6 [Source] fun box rem( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg \u00b6 [Source] fun box neg() : F32 val Returns \u00b6 F32 val eq \u00b6 [Source] fun box eq( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F32 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive F32"},{"location":"builtin-F32/#f32","text":"[Source] primitive val F32 is FloatingPoint[F32 val] val","title":"F32"},{"location":"builtin-F32/#implements","text":"FloatingPoint [ F32 val] val","title":"Implements"},{"location":"builtin-F32/#constructors","text":"","title":"Constructors"},{"location":"builtin-F32/#create","text":"[Source] new val create( value: F32 val = 0) : F32 val^","title":"create"},{"location":"builtin-F32/#parameters","text":"value: F32 val = 0","title":"Parameters"},{"location":"builtin-F32/#returns","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#pi","text":"[Source] new val pi() : F32 val^","title":"pi"},{"location":"builtin-F32/#returns_1","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#e","text":"[Source] new val e() : F32 val^","title":"e"},{"location":"builtin-F32/#returns_2","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from_bits","text":"[Source] new val from_bits( i: U32 val) : F32 val^","title":"from_bits"},{"location":"builtin-F32/#parameters_1","text":"i: U32 val","title":"Parameters"},{"location":"builtin-F32/#returns_3","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F32/#parameters_2","text":"a: B","title":"Parameters"},{"location":"builtin-F32/#returns_4","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F32 val^","title":"min_value"},{"location":"builtin-F32/#returns_5","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F32 val^","title":"max_value"},{"location":"builtin-F32/#returns_6","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^","title":"min_normalised"},{"location":"builtin-F32/#returns_7","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^","title":"epsilon"},{"location":"builtin-F32/#returns_8","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F32/#bits","text":"[Source] fun box bits() : U32 val","title":"bits"},{"location":"builtin-F32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F32/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F32/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F32/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F32/#returns_13","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F32/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F32/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F32/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#abs","text":"[Source] fun box abs() : F32 val","title":"abs"},{"location":"builtin-F32/#returns_17","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#ceil","text":"[Source] fun box ceil() : F32 val","title":"ceil"},{"location":"builtin-F32/#returns_18","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#floor","text":"[Source] fun box floor() : F32 val","title":"floor"},{"location":"builtin-F32/#returns_19","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#round","text":"[Source] fun box round() : F32 val","title":"round"},{"location":"builtin-F32/#returns_20","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#trunc","text":"[Source] fun box trunc() : F32 val","title":"trunc"},{"location":"builtin-F32/#returns_21","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#min","text":"[Source] fun box min( y: F32 val) : F32 val","title":"min"},{"location":"builtin-F32/#parameters_3","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_22","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#max","text":"[Source] fun box max( y: F32 val) : F32 val","title":"max"},{"location":"builtin-F32/#parameters_4","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_23","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld","text":"[Source] fun box fld( y: F32 val) : F32 val","title":"fld"},{"location":"builtin-F32/#parameters_5","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_24","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F32 val) : F32 val","title":"fld_unsafe"},{"location":"builtin-F32/#parameters_6","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_25","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod","text":"[Source] fun box mod( y: F32 val) : F32 val","title":"mod"},{"location":"builtin-F32/#parameters_7","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_26","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F32 val) : F32 val","title":"mod_unsafe"},{"location":"builtin-F32/#parameters_8","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_27","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F32/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F32/#returns_29","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F32/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ldexp","text":"[Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val","title":"ldexp"},{"location":"builtin-F32/#parameters_9","text":"x: F32 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#frexp","text":"[Source] fun box frexp() : (F32 val , U32 val)","title":"frexp"},{"location":"builtin-F32/#returns_32","text":"( F32 val , U32 val)","title":"Returns"},{"location":"builtin-F32/#log","text":"[Source] fun box log() : F32 val","title":"log"},{"location":"builtin-F32/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log2","text":"[Source] fun box log2() : F32 val","title":"log2"},{"location":"builtin-F32/#returns_34","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log10","text":"[Source] fun box log10() : F32 val","title":"log10"},{"location":"builtin-F32/#returns_35","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#logb","text":"[Source] fun box logb() : F32 val","title":"logb"},{"location":"builtin-F32/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#pow","text":"[Source] fun box pow( y: F32 val) : F32 val","title":"pow"},{"location":"builtin-F32/#parameters_10","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_37","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#powi","text":"[Source] fun box powi( y: I32 val) : F32 val","title":"powi"},{"location":"builtin-F32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt","text":"[Source] fun box sqrt() : F32 val","title":"sqrt"},{"location":"builtin-F32/#returns_39","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val","title":"sqrt_unsafe"},{"location":"builtin-F32/#returns_40","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cbrt","text":"[Source] fun box cbrt() : F32 val","title":"cbrt"},{"location":"builtin-F32/#returns_41","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp","text":"[Source] fun box exp() : F32 val","title":"exp"},{"location":"builtin-F32/#returns_42","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp2","text":"[Source] fun box exp2() : F32 val","title":"exp2"},{"location":"builtin-F32/#returns_43","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cos","text":"[Source] fun box cos() : F32 val","title":"cos"},{"location":"builtin-F32/#returns_44","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sin","text":"[Source] fun box sin() : F32 val","title":"sin"},{"location":"builtin-F32/#returns_45","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tan","text":"[Source] fun box tan() : F32 val","title":"tan"},{"location":"builtin-F32/#returns_46","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cosh","text":"[Source] fun box cosh() : F32 val","title":"cosh"},{"location":"builtin-F32/#returns_47","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sinh","text":"[Source] fun box sinh() : F32 val","title":"sinh"},{"location":"builtin-F32/#returns_48","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tanh","text":"[Source] fun box tanh() : F32 val","title":"tanh"},{"location":"builtin-F32/#returns_49","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acos","text":"[Source] fun box acos() : F32 val","title":"acos"},{"location":"builtin-F32/#returns_50","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asin","text":"[Source] fun box asin() : F32 val","title":"asin"},{"location":"builtin-F32/#returns_51","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan","text":"[Source] fun box atan() : F32 val","title":"atan"},{"location":"builtin-F32/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan2","text":"[Source] fun box atan2( y: F32 val) : F32 val","title":"atan2"},{"location":"builtin-F32/#parameters_12","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_53","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acosh","text":"[Source] fun box acosh() : F32 val","title":"acosh"},{"location":"builtin-F32/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asinh","text":"[Source] fun box asinh() : F32 val","title":"asinh"},{"location":"builtin-F32/#returns_55","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atanh","text":"[Source] fun box atanh() : F32 val","title":"atanh"},{"location":"builtin-F32/#returns_56","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#copysign","text":"[Source] fun box copysign( sign: F32 val) : F32 val","title":"copysign"},{"location":"builtin-F32/#parameters_13","text":"sign: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_57","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F32/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-F32/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F32/#returns_59","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F32/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F32/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F32/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F32/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#add_unsafe","text":"[Source] fun box add_unsafe( y: F32 val) : F32 val","title":"add_unsafe"},{"location":"builtin-F32/#parameters_14","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_64","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F32 val) : F32 val","title":"sub_unsafe"},{"location":"builtin-F32/#parameters_15","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_65","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F32 val) : F32 val","title":"mul_unsafe"},{"location":"builtin-F32/#parameters_16","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_66","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div_unsafe","text":"[Source] fun box div_unsafe( y: F32 val) : F32 val","title":"div_unsafe"},{"location":"builtin-F32/#parameters_17","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_67","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val)","title":"divrem_unsafe"},{"location":"builtin-F32/#parameters_18","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_68","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F32 val) : F32 val","title":"rem_unsafe"},{"location":"builtin-F32/#parameters_19","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_69","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F32 val","title":"neg_unsafe"},{"location":"builtin-F32/#returns_70","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F32 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F32/#parameters_20","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F32 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F32/#parameters_21","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F32 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F32/#parameters_22","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le_unsafe","text":"[Source] fun box le_unsafe( y: F32 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F32/#parameters_23","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F32 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F32/#parameters_24","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F32 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F32/#parameters_25","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F32/#returns_77","text":"String iso^","title":"Returns"},{"location":"builtin-F32/#add","text":"[Source] fun box add( y: F32 val) : F32 val","title":"add"},{"location":"builtin-F32/#parameters_26","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_78","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub","text":"[Source] fun box sub( y: F32 val) : F32 val","title":"sub"},{"location":"builtin-F32/#parameters_27","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_79","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul","text":"[Source] fun box mul( y: F32 val) : F32 val","title":"mul"},{"location":"builtin-F32/#parameters_28","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div","text":"[Source] fun box div( y: F32 val) : F32 val","title":"div"},{"location":"builtin-F32/#parameters_29","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_81","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem","text":"[Source] fun box divrem( y: F32 val) : (F32 val , F32 val)","title":"divrem"},{"location":"builtin-F32/#parameters_30","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_82","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem","text":"[Source] fun box rem( y: F32 val) : F32 val","title":"rem"},{"location":"builtin-F32/#parameters_31","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg","text":"[Source] fun box neg() : F32 val","title":"neg"},{"location":"builtin-F32/#returns_84","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq","text":"[Source] fun box eq( y: F32 val) : Bool val","title":"eq"},{"location":"builtin-F32/#parameters_32","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne","text":"[Source] fun box ne( y: F32 val) : Bool val","title":"ne"},{"location":"builtin-F32/#parameters_33","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt","text":"[Source] fun box lt( y: F32 val) : Bool val","title":"lt"},{"location":"builtin-F32/#parameters_34","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le","text":"[Source] fun box le( y: F32 val) : Bool val","title":"le"},{"location":"builtin-F32/#parameters_35","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge","text":"[Source] fun box ge( y: F32 val) : Bool val","title":"ge"},{"location":"builtin-F32/#parameters_36","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt","text":"[Source] fun box gt( y: F32 val) : Bool val","title":"gt"},{"location":"builtin-F32/#parameters_37","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F32/#returns_91","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F32/#returns_92","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F32/#returns_93","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F32/#returns_94","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F32/#returns_95","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F32/#returns_96","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F32/#returns_97","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F32/#returns_98","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F32/#returns_99","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F32/#returns_100","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F32/#returns_101","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F32/#returns_102","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_1","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F32/#returns_103","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F32/#returns_104","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F32/#returns_105","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F32/#returns_106","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F32/#returns_107","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F32/#returns_108","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F32/#returns_109","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F32/#returns_110","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F32/#returns_111","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F32/#returns_112","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F32/#returns_113","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F32/#returns_114","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F32/#returns_115","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F32/#returns_116","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F32/#returns_117","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F32/#returns_118","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#compare","text":"fun box compare( that: F32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F32/#parameters_38","text":"that: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_119","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F64/","text":"F64 \u00b6 [Source] primitive val F64 is FloatingPoint[F64 val] val Implements \u00b6 FloatingPoint [ F64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F64 val = 0) : F64 val^ Parameters \u00b6 value: F64 val = 0 Returns \u00b6 F64 val^ pi \u00b6 [Source] new val pi() : F64 val^ Returns \u00b6 F64 val^ e \u00b6 [Source] new val e() : F64 val^ Returns \u00b6 F64 val^ from_bits \u00b6 [Source] new val from_bits( i: U64 val) : F64 val^ Parameters \u00b6 i: U64 val Returns \u00b6 F64 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^ Parameters \u00b6 a: B Returns \u00b6 F64 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F64 val^ Returns \u00b6 F64 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F64 val^ Returns \u00b6 F64 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^ Returns \u00b6 F64 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^ Returns \u00b6 F64 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U64 val Returns \u00b6 U64 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F64 val Returns \u00b6 F64 val ceil \u00b6 [Source] fun box ceil() : F64 val Returns \u00b6 F64 val floor \u00b6 [Source] fun box floor() : F64 val Returns \u00b6 F64 val round \u00b6 [Source] fun box round() : F64 val Returns \u00b6 F64 val trunc \u00b6 [Source] fun box trunc() : F64 val Returns \u00b6 F64 val min \u00b6 [Source] fun box min( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val max \u00b6 [Source] fun box max( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld \u00b6 [Source] fun box fld( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod \u00b6 [Source] fun box mod( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val Parameters \u00b6 x: F64 val exponent: I32 val Returns \u00b6 F64 val frexp \u00b6 [Source] fun box frexp() : (F64 val , U32 val) Returns \u00b6 ( F64 val , U32 val) log \u00b6 [Source] fun box log() : F64 val Returns \u00b6 F64 val log2 \u00b6 [Source] fun box log2() : F64 val Returns \u00b6 F64 val log10 \u00b6 [Source] fun box log10() : F64 val Returns \u00b6 F64 val logb \u00b6 [Source] fun box logb() : F64 val Returns \u00b6 F64 val pow \u00b6 [Source] fun box pow( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val powi \u00b6 [Source] fun box powi( y: I32 val) : F64 val Parameters \u00b6 y: I32 val Returns \u00b6 F64 val sqrt \u00b6 [Source] fun box sqrt() : F64 val Returns \u00b6 F64 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val Returns \u00b6 F64 val cbrt \u00b6 [Source] fun box cbrt() : F64 val Returns \u00b6 F64 val exp \u00b6 [Source] fun box exp() : F64 val Returns \u00b6 F64 val exp2 \u00b6 [Source] fun box exp2() : F64 val Returns \u00b6 F64 val cos \u00b6 [Source] fun box cos() : F64 val Returns \u00b6 F64 val sin \u00b6 [Source] fun box sin() : F64 val Returns \u00b6 F64 val tan \u00b6 [Source] fun box tan() : F64 val Returns \u00b6 F64 val cosh \u00b6 [Source] fun box cosh() : F64 val Returns \u00b6 F64 val sinh \u00b6 [Source] fun box sinh() : F64 val Returns \u00b6 F64 val tanh \u00b6 [Source] fun box tanh() : F64 val Returns \u00b6 F64 val acos \u00b6 [Source] fun box acos() : F64 val Returns \u00b6 F64 val asin \u00b6 [Source] fun box asin() : F64 val Returns \u00b6 F64 val atan \u00b6 [Source] fun box atan() : F64 val Returns \u00b6 F64 val atan2 \u00b6 [Source] fun box atan2( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val acosh \u00b6 [Source] fun box acosh() : F64 val Returns \u00b6 F64 val asinh \u00b6 [Source] fun box asinh() : F64 val Returns \u00b6 F64 val atanh \u00b6 [Source] fun box atanh() : F64 val Returns \u00b6 F64 val copysign \u00b6 [Source] fun box copysign( sign: F64 val) : F64 val Parameters \u00b6 sign: F64 val Returns \u00b6 F64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F64 val Returns \u00b6 F64 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub \u00b6 [Source] fun box sub( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul \u00b6 [Source] fun box mul( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div \u00b6 [Source] fun box div( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem \u00b6 [Source] fun box divrem( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem \u00b6 [Source] fun box rem( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg \u00b6 [Source] fun box neg() : F64 val Returns \u00b6 F64 val eq \u00b6 [Source] fun box eq( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F64 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive F64"},{"location":"builtin-F64/#f64","text":"[Source] primitive val F64 is FloatingPoint[F64 val] val","title":"F64"},{"location":"builtin-F64/#implements","text":"FloatingPoint [ F64 val] val","title":"Implements"},{"location":"builtin-F64/#constructors","text":"","title":"Constructors"},{"location":"builtin-F64/#create","text":"[Source] new val create( value: F64 val = 0) : F64 val^","title":"create"},{"location":"builtin-F64/#parameters","text":"value: F64 val = 0","title":"Parameters"},{"location":"builtin-F64/#returns","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#pi","text":"[Source] new val pi() : F64 val^","title":"pi"},{"location":"builtin-F64/#returns_1","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#e","text":"[Source] new val e() : F64 val^","title":"e"},{"location":"builtin-F64/#returns_2","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from_bits","text":"[Source] new val from_bits( i: U64 val) : F64 val^","title":"from_bits"},{"location":"builtin-F64/#parameters_1","text":"i: U64 val","title":"Parameters"},{"location":"builtin-F64/#returns_3","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F64/#parameters_2","text":"a: B","title":"Parameters"},{"location":"builtin-F64/#returns_4","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F64 val^","title":"min_value"},{"location":"builtin-F64/#returns_5","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F64 val^","title":"max_value"},{"location":"builtin-F64/#returns_6","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^","title":"min_normalised"},{"location":"builtin-F64/#returns_7","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^","title":"epsilon"},{"location":"builtin-F64/#returns_8","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F64/#bits","text":"[Source] fun box bits() : U64 val","title":"bits"},{"location":"builtin-F64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F64/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F64/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F64/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F64/#returns_13","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F64/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F64/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F64/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#abs","text":"[Source] fun box abs() : F64 val","title":"abs"},{"location":"builtin-F64/#returns_17","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#ceil","text":"[Source] fun box ceil() : F64 val","title":"ceil"},{"location":"builtin-F64/#returns_18","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#floor","text":"[Source] fun box floor() : F64 val","title":"floor"},{"location":"builtin-F64/#returns_19","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#round","text":"[Source] fun box round() : F64 val","title":"round"},{"location":"builtin-F64/#returns_20","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#trunc","text":"[Source] fun box trunc() : F64 val","title":"trunc"},{"location":"builtin-F64/#returns_21","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#min","text":"[Source] fun box min( y: F64 val) : F64 val","title":"min"},{"location":"builtin-F64/#parameters_3","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_22","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#max","text":"[Source] fun box max( y: F64 val) : F64 val","title":"max"},{"location":"builtin-F64/#parameters_4","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_23","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld","text":"[Source] fun box fld( y: F64 val) : F64 val","title":"fld"},{"location":"builtin-F64/#parameters_5","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_24","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F64 val) : F64 val","title":"fld_unsafe"},{"location":"builtin-F64/#parameters_6","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_25","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod","text":"[Source] fun box mod( y: F64 val) : F64 val","title":"mod"},{"location":"builtin-F64/#parameters_7","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_26","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F64 val) : F64 val","title":"mod_unsafe"},{"location":"builtin-F64/#parameters_8","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_27","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F64/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F64/#returns_29","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F64/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ldexp","text":"[Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val","title":"ldexp"},{"location":"builtin-F64/#parameters_9","text":"x: F64 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#frexp","text":"[Source] fun box frexp() : (F64 val , U32 val)","title":"frexp"},{"location":"builtin-F64/#returns_32","text":"( F64 val , U32 val)","title":"Returns"},{"location":"builtin-F64/#log","text":"[Source] fun box log() : F64 val","title":"log"},{"location":"builtin-F64/#returns_33","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log2","text":"[Source] fun box log2() : F64 val","title":"log2"},{"location":"builtin-F64/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log10","text":"[Source] fun box log10() : F64 val","title":"log10"},{"location":"builtin-F64/#returns_35","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#logb","text":"[Source] fun box logb() : F64 val","title":"logb"},{"location":"builtin-F64/#returns_36","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#pow","text":"[Source] fun box pow( y: F64 val) : F64 val","title":"pow"},{"location":"builtin-F64/#parameters_10","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#powi","text":"[Source] fun box powi( y: I32 val) : F64 val","title":"powi"},{"location":"builtin-F64/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_38","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt","text":"[Source] fun box sqrt() : F64 val","title":"sqrt"},{"location":"builtin-F64/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val","title":"sqrt_unsafe"},{"location":"builtin-F64/#returns_40","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cbrt","text":"[Source] fun box cbrt() : F64 val","title":"cbrt"},{"location":"builtin-F64/#returns_41","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp","text":"[Source] fun box exp() : F64 val","title":"exp"},{"location":"builtin-F64/#returns_42","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp2","text":"[Source] fun box exp2() : F64 val","title":"exp2"},{"location":"builtin-F64/#returns_43","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cos","text":"[Source] fun box cos() : F64 val","title":"cos"},{"location":"builtin-F64/#returns_44","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sin","text":"[Source] fun box sin() : F64 val","title":"sin"},{"location":"builtin-F64/#returns_45","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tan","text":"[Source] fun box tan() : F64 val","title":"tan"},{"location":"builtin-F64/#returns_46","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cosh","text":"[Source] fun box cosh() : F64 val","title":"cosh"},{"location":"builtin-F64/#returns_47","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sinh","text":"[Source] fun box sinh() : F64 val","title":"sinh"},{"location":"builtin-F64/#returns_48","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tanh","text":"[Source] fun box tanh() : F64 val","title":"tanh"},{"location":"builtin-F64/#returns_49","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acos","text":"[Source] fun box acos() : F64 val","title":"acos"},{"location":"builtin-F64/#returns_50","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asin","text":"[Source] fun box asin() : F64 val","title":"asin"},{"location":"builtin-F64/#returns_51","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan","text":"[Source] fun box atan() : F64 val","title":"atan"},{"location":"builtin-F64/#returns_52","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan2","text":"[Source] fun box atan2( y: F64 val) : F64 val","title":"atan2"},{"location":"builtin-F64/#parameters_12","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acosh","text":"[Source] fun box acosh() : F64 val","title":"acosh"},{"location":"builtin-F64/#returns_54","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asinh","text":"[Source] fun box asinh() : F64 val","title":"asinh"},{"location":"builtin-F64/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atanh","text":"[Source] fun box atanh() : F64 val","title":"atanh"},{"location":"builtin-F64/#returns_56","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#copysign","text":"[Source] fun box copysign( sign: F64 val) : F64 val","title":"copysign"},{"location":"builtin-F64/#parameters_13","text":"sign: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_57","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F64/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-F64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F64/#returns_59","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F64/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F64/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F64/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F64/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#add_unsafe","text":"[Source] fun box add_unsafe( y: F64 val) : F64 val","title":"add_unsafe"},{"location":"builtin-F64/#parameters_14","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_64","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F64 val) : F64 val","title":"sub_unsafe"},{"location":"builtin-F64/#parameters_15","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_65","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F64 val) : F64 val","title":"mul_unsafe"},{"location":"builtin-F64/#parameters_16","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_66","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div_unsafe","text":"[Source] fun box div_unsafe( y: F64 val) : F64 val","title":"div_unsafe"},{"location":"builtin-F64/#parameters_17","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_67","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val)","title":"divrem_unsafe"},{"location":"builtin-F64/#parameters_18","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_68","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F64 val) : F64 val","title":"rem_unsafe"},{"location":"builtin-F64/#parameters_19","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F64 val","title":"neg_unsafe"},{"location":"builtin-F64/#returns_70","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F64 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F64/#parameters_20","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F64 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F64/#parameters_21","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F64 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F64/#parameters_22","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le_unsafe","text":"[Source] fun box le_unsafe( y: F64 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F64/#parameters_23","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F64 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F64/#parameters_24","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F64 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F64/#parameters_25","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F64/#returns_77","text":"String iso^","title":"Returns"},{"location":"builtin-F64/#add","text":"[Source] fun box add( y: F64 val) : F64 val","title":"add"},{"location":"builtin-F64/#parameters_26","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_78","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub","text":"[Source] fun box sub( y: F64 val) : F64 val","title":"sub"},{"location":"builtin-F64/#parameters_27","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_79","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul","text":"[Source] fun box mul( y: F64 val) : F64 val","title":"mul"},{"location":"builtin-F64/#parameters_28","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_80","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div","text":"[Source] fun box div( y: F64 val) : F64 val","title":"div"},{"location":"builtin-F64/#parameters_29","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem","text":"[Source] fun box divrem( y: F64 val) : (F64 val , F64 val)","title":"divrem"},{"location":"builtin-F64/#parameters_30","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_82","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem","text":"[Source] fun box rem( y: F64 val) : F64 val","title":"rem"},{"location":"builtin-F64/#parameters_31","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg","text":"[Source] fun box neg() : F64 val","title":"neg"},{"location":"builtin-F64/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq","text":"[Source] fun box eq( y: F64 val) : Bool val","title":"eq"},{"location":"builtin-F64/#parameters_32","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne","text":"[Source] fun box ne( y: F64 val) : Bool val","title":"ne"},{"location":"builtin-F64/#parameters_33","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt","text":"[Source] fun box lt( y: F64 val) : Bool val","title":"lt"},{"location":"builtin-F64/#parameters_34","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le","text":"[Source] fun box le( y: F64 val) : Bool val","title":"le"},{"location":"builtin-F64/#parameters_35","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge","text":"[Source] fun box ge( y: F64 val) : Bool val","title":"ge"},{"location":"builtin-F64/#parameters_36","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt","text":"[Source] fun box gt( y: F64 val) : Bool val","title":"gt"},{"location":"builtin-F64/#parameters_37","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F64/#returns_91","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F64/#returns_92","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F64/#returns_93","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F64/#returns_94","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F64/#returns_95","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F64/#returns_96","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F64/#returns_97","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F64/#returns_98","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F64/#returns_99","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F64/#returns_100","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F64/#returns_101","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F64/#returns_102","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F64/#returns_103","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_1","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F64/#returns_104","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F64/#returns_105","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F64/#returns_106","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F64/#returns_107","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F64/#returns_108","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F64/#returns_109","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F64/#returns_110","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F64/#returns_111","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F64/#returns_112","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F64/#returns_113","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F64/#returns_114","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F64/#returns_115","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F64/#returns_116","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F64/#returns_117","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F64/#returns_118","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#compare","text":"fun box compare( that: F64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F64/#parameters_38","text":"that: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_119","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Float/","text":"Float \u00b6 [Source] type Float is (F32 val | F64 val) Type Alias For \u00b6 ( F32 val | F64 val)","title":"type Float"},{"location":"builtin-Float/#float","text":"[Source] type Float is (F32 val | F64 val)","title":"Float"},{"location":"builtin-Float/#type-alias-for","text":"( F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-FloatingPoint/","text":"FloatingPoint[A: FloatingPoint [A] val] \u00b6 [Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 min_normalised \u00b6 [Source] new val min_normalised() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ epsilon \u00b6 [Source] new val epsilon() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 radix \u00b6 [Source] fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] fun tag max_exp10() : I16 val Returns \u00b6 I16 val add_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A Returns \u00b6 A eq_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A ceil \u00b6 [Source] fun box ceil() : A Returns \u00b6 A floor \u00b6 [Source] fun box floor() : A Returns \u00b6 A round \u00b6 [Source] fun box round() : A Returns \u00b6 A trunc \u00b6 [Source] fun box trunc() : A Returns \u00b6 A finite \u00b6 [Source] fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: A, exponent: I32 val) : A Parameters \u00b6 x: A exponent: I32 val Returns \u00b6 A frexp \u00b6 [Source] fun box frexp() : (A , U32 val) Returns \u00b6 (A , U32 val) log \u00b6 [Source] fun box log() : A Returns \u00b6 A log2 \u00b6 [Source] fun box log2() : A Returns \u00b6 A log10 \u00b6 [Source] fun box log10() : A Returns \u00b6 A logb \u00b6 [Source] fun box logb() : A Returns \u00b6 A pow \u00b6 [Source] fun box pow( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A powi \u00b6 [Source] fun box powi( y: I32 val) : A Parameters \u00b6 y: I32 val Returns \u00b6 A sqrt \u00b6 [Source] fun box sqrt() : A Returns \u00b6 A sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A Returns \u00b6 A cbrt \u00b6 [Source] fun box cbrt() : A Returns \u00b6 A exp \u00b6 [Source] fun box exp() : A Returns \u00b6 A exp2 \u00b6 [Source] fun box exp2() : A Returns \u00b6 A cos \u00b6 [Source] fun box cos() : A Returns \u00b6 A sin \u00b6 [Source] fun box sin() : A Returns \u00b6 A tan \u00b6 [Source] fun box tan() : A Returns \u00b6 A cosh \u00b6 [Source] fun box cosh() : A Returns \u00b6 A sinh \u00b6 [Source] fun box sinh() : A Returns \u00b6 A tanh \u00b6 [Source] fun box tanh() : A Returns \u00b6 A acos \u00b6 [Source] fun box acos() : A Returns \u00b6 A asin \u00b6 [Source] fun box asin() : A Returns \u00b6 A atan \u00b6 [Source] fun box atan() : A Returns \u00b6 A atan2 \u00b6 [Source] fun box atan2( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A acosh \u00b6 [Source] fun box acosh() : A Returns \u00b6 A asinh \u00b6 [Source] fun box asinh() : A Returns \u00b6 A atanh \u00b6 [Source] fun box atanh() : A Returns \u00b6 A copysign \u00b6 [Source] fun box copysign( sign: A) : A Parameters \u00b6 sign: A Returns \u00b6 A string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val)","title":"trait FloatingPoint"},{"location":"builtin-FloatingPoint/#floatingpointa-floatingpointa-val","text":"[Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val","title":"FloatingPoint[A: FloatingPoint[A] val]"},{"location":"builtin-FloatingPoint/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-FloatingPoint/#constructors","text":"","title":"Constructors"},{"location":"builtin-FloatingPoint/#min_normalised","text":"[Source] new val min_normalised() : FloatingPoint[A] val^","title":"min_normalised"},{"location":"builtin-FloatingPoint/#returns","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#epsilon","text":"[Source] new val epsilon() : FloatingPoint[A] val^","title":"epsilon"},{"location":"builtin-FloatingPoint/#returns_1","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-FloatingPoint/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-FloatingPoint/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-FloatingPoint/#returns_4","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-FloatingPoint/#returns_5","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-FloatingPoint/#radix","text":"[Source] fun tag radix() : U8 val","title":"radix"},{"location":"builtin-FloatingPoint/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision2","text":"[Source] fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-FloatingPoint/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision10","text":"[Source] fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-FloatingPoint/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp2","text":"[Source] fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-FloatingPoint/#returns_9","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp10","text":"[Source] fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-FloatingPoint/#returns_10","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp2","text":"[Source] fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-FloatingPoint/#returns_11","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp10","text":"[Source] fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-FloatingPoint/#returns_12","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#add_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-FloatingPoint/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_13","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-FloatingPoint/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_14","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-FloatingPoint/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_15","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-FloatingPoint/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_16","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-FloatingPoint/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_17","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_18","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_19","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-FloatingPoint/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_20","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-FloatingPoint/#returns_21","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val","title":"eq_unsafe"},{"location":"builtin-FloatingPoint/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_22","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val","title":"ne_unsafe"},{"location":"builtin-FloatingPoint/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val","title":"lt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val","title":"le_unsafe"},{"location":"builtin-FloatingPoint/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_25","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val","title":"ge_unsafe"},{"location":"builtin-FloatingPoint/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val","title":"gt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-FloatingPoint/#returns_28","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#ceil","text":"[Source] fun box ceil() : A","title":"ceil"},{"location":"builtin-FloatingPoint/#returns_29","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#floor","text":"[Source] fun box floor() : A","title":"floor"},{"location":"builtin-FloatingPoint/#returns_30","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#round","text":"[Source] fun box round() : A","title":"round"},{"location":"builtin-FloatingPoint/#returns_31","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#trunc","text":"[Source] fun box trunc() : A","title":"trunc"},{"location":"builtin-FloatingPoint/#returns_32","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#finite","text":"[Source] fun box finite() : Bool val","title":"finite"},{"location":"builtin-FloatingPoint/#returns_33","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#infinite","text":"[Source] fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-FloatingPoint/#returns_34","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#nan","text":"[Source] fun box nan() : Bool val","title":"nan"},{"location":"builtin-FloatingPoint/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ldexp","text":"[Source] fun box ldexp( x: A, exponent: I32 val) : A","title":"ldexp"},{"location":"builtin-FloatingPoint/#parameters_16","text":"x: A exponent: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_36","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#frexp","text":"[Source] fun box frexp() : (A , U32 val)","title":"frexp"},{"location":"builtin-FloatingPoint/#returns_37","text":"(A , U32 val)","title":"Returns"},{"location":"builtin-FloatingPoint/#log","text":"[Source] fun box log() : A","title":"log"},{"location":"builtin-FloatingPoint/#returns_38","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log2","text":"[Source] fun box log2() : A","title":"log2"},{"location":"builtin-FloatingPoint/#returns_39","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log10","text":"[Source] fun box log10() : A","title":"log10"},{"location":"builtin-FloatingPoint/#returns_40","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#logb","text":"[Source] fun box logb() : A","title":"logb"},{"location":"builtin-FloatingPoint/#returns_41","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#pow","text":"[Source] fun box pow( y: A) : A","title":"pow"},{"location":"builtin-FloatingPoint/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_42","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#powi","text":"[Source] fun box powi( y: I32 val) : A","title":"powi"},{"location":"builtin-FloatingPoint/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_43","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt","text":"[Source] fun box sqrt() : A","title":"sqrt"},{"location":"builtin-FloatingPoint/#returns_44","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A","title":"sqrt_unsafe"},{"location":"builtin-FloatingPoint/#returns_45","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cbrt","text":"[Source] fun box cbrt() : A","title":"cbrt"},{"location":"builtin-FloatingPoint/#returns_46","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp","text":"[Source] fun box exp() : A","title":"exp"},{"location":"builtin-FloatingPoint/#returns_47","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp2","text":"[Source] fun box exp2() : A","title":"exp2"},{"location":"builtin-FloatingPoint/#returns_48","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cos","text":"[Source] fun box cos() : A","title":"cos"},{"location":"builtin-FloatingPoint/#returns_49","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sin","text":"[Source] fun box sin() : A","title":"sin"},{"location":"builtin-FloatingPoint/#returns_50","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tan","text":"[Source] fun box tan() : A","title":"tan"},{"location":"builtin-FloatingPoint/#returns_51","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cosh","text":"[Source] fun box cosh() : A","title":"cosh"},{"location":"builtin-FloatingPoint/#returns_52","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sinh","text":"[Source] fun box sinh() : A","title":"sinh"},{"location":"builtin-FloatingPoint/#returns_53","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tanh","text":"[Source] fun box tanh() : A","title":"tanh"},{"location":"builtin-FloatingPoint/#returns_54","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acos","text":"[Source] fun box acos() : A","title":"acos"},{"location":"builtin-FloatingPoint/#returns_55","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asin","text":"[Source] fun box asin() : A","title":"asin"},{"location":"builtin-FloatingPoint/#returns_56","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan","text":"[Source] fun box atan() : A","title":"atan"},{"location":"builtin-FloatingPoint/#returns_57","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan2","text":"[Source] fun box atan2( y: A) : A","title":"atan2"},{"location":"builtin-FloatingPoint/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_58","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acosh","text":"[Source] fun box acosh() : A","title":"acosh"},{"location":"builtin-FloatingPoint/#returns_59","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asinh","text":"[Source] fun box asinh() : A","title":"asinh"},{"location":"builtin-FloatingPoint/#returns_60","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atanh","text":"[Source] fun box atanh() : A","title":"atanh"},{"location":"builtin-FloatingPoint/#returns_61","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#copysign","text":"[Source] fun box copysign( sign: A) : A","title":"copysign"},{"location":"builtin-FloatingPoint/#parameters_20","text":"sign: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_62","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-FloatingPoint/#returns_63","text":"String iso^","title":"Returns"},{"location":"builtin-FloatingPoint/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-FloatingPoint/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_64","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-FloatingPoint/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_65","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-FloatingPoint/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_66","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-FloatingPoint/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_67","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-FloatingPoint/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_68","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-FloatingPoint/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_69","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-FloatingPoint/#returns_70","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-FloatingPoint/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_71","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-FloatingPoint/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_72","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-FloatingPoint/#parameters_29","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-FloatingPoint/#parameters_30","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-FloatingPoint/#parameters_31","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-FloatingPoint/#parameters_32","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-FloatingPoint/#parameters_33","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-FloatingPoint/#parameters_34","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-FloatingPoint/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_79","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-FloatingPoint/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_80","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-FloatingPoint/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-FloatingPoint/#returns_82","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-FloatingPoint/#returns_83","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-FloatingPoint/#returns_84","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-FloatingPoint/#returns_85","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-FloatingPoint/#returns_86","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-FloatingPoint/#returns_87","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-FloatingPoint/#returns_88","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-FloatingPoint/#returns_89","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-FloatingPoint/#returns_90","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-FloatingPoint/#returns_91","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-FloatingPoint/#returns_92","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-FloatingPoint/#returns_93","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-FloatingPoint/#returns_94","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-FloatingPoint/#returns_95","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-FloatingPoint/#returns_96","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-FloatingPoint/#returns_97","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-FloatingPoint/#returns_98","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-FloatingPoint/#returns_99","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-FloatingPoint/#returns_100","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-FloatingPoint/#returns_101","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-FloatingPoint/#returns_102","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-FloatingPoint/#returns_103","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-FloatingPoint/#returns_104","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-FloatingPoint/#returns_105","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-FloatingPoint/#returns_106","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-FloatingPoint/#returns_107","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-FloatingPoint/#returns_108","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-FloatingPoint/#returns_109","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-FloatingPoint/#returns_110","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-FloatingPoint/#returns_111","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-FloatingPoint/#returns_112","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-FloatingPoint/#returns_113","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-FloatingPoint/#returns_114","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-FloatingPoint/#parameters_37","text":"that: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_115","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Greater/","text":"Greater \u00b6 [Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Greater val^ Returns \u00b6 Greater val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Greater"},{"location":"builtin-Greater/#greater","text":"[Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref","title":"Greater"},{"location":"builtin-Greater/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Greater/#constructors","text":"","title":"Constructors"},{"location":"builtin-Greater/#create","text":"[Source] new val create() : Greater val^","title":"create"},{"location":"builtin-Greater/#returns","text":"Greater val^","title":"Returns"},{"location":"builtin-Greater/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Greater/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Greater/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Greater/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Greater/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Greater/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Greater/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-HasEq/","text":"HasEq[A: A] \u00b6 [Source] interface ref HasEq[A: A] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface HasEq"},{"location":"builtin-HasEq/#haseqa-a","text":"[Source] interface ref HasEq[A: A]","title":"HasEq[A: A]"},{"location":"builtin-HasEq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-HasEq/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-HasEq/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-HasEq/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-I128/","text":"I128 \u00b6 [Source] primitive val I128 is SignedInteger[I128 val, U128 val] val Implements \u00b6 SignedInteger [ I128 val, U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I128 val) : I128 val^ Parameters \u00b6 value: I128 val Returns \u00b6 I128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^ Parameters \u00b6 a: A Returns \u00b6 I128 val^ min_value \u00b6 [Source] new val min_value() : I128 val^ Returns \u00b6 I128 val^ max_value \u00b6 [Source] new val max_value() : I128 val^ Returns \u00b6 I128 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I128 val Returns \u00b6 I128 val bswap \u00b6 [Source] fun box bswap() : I128 val Returns \u00b6 I128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val max \u00b6 [Source] fun box max( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld \u00b6 [Source] fun box fld( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod \u00b6 [Source] fun box mod( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem \u00b6 [Source] fun box divrem( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div \u00b6 [Source] fun box div( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem \u00b6 [Source] fun box rem( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) subc \u00b6 [Source] fun box subc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) divc \u00b6 [Source] fun box divc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) remc \u00b6 [Source] fun box remc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) modc \u00b6 [Source] fun box modc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? div_partial \u00b6 [Source] fun box div_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ? Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? shl \u00b6 fun box shl( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr \u00b6 fun box shr( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val add_unsafe \u00b6 fun box add_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub_unsafe \u00b6 fun box sub_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg_unsafe \u00b6 fun box neg_unsafe() : I128 val Returns \u00b6 I128 val op_and \u00b6 fun box op_and( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_or \u00b6 fun box op_or( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_xor \u00b6 fun box op_xor( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_not \u00b6 fun box op_not() : I128 val Returns \u00b6 I128 val add \u00b6 fun box add( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub \u00b6 fun box sub( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg \u00b6 fun box neg() : I128 val Returns \u00b6 I128 val eq \u00b6 fun box eq( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: I128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I128 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive I128"},{"location":"builtin-I128/#i128","text":"[Source] primitive val I128 is SignedInteger[I128 val, U128 val] val","title":"I128"},{"location":"builtin-I128/#implements","text":"SignedInteger [ I128 val, U128 val] val","title":"Implements"},{"location":"builtin-I128/#constructors","text":"","title":"Constructors"},{"location":"builtin-I128/#create","text":"[Source] new val create( value: I128 val) : I128 val^","title":"create"},{"location":"builtin-I128/#parameters","text":"value: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I128/#returns_1","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#min_value","text":"[Source] new val min_value() : I128 val^","title":"min_value"},{"location":"builtin-I128/#returns_2","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#max_value","text":"[Source] new val max_value() : I128 val^","title":"max_value"},{"location":"builtin-I128/#returns_3","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-I128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bit_reverse","text":"[Source] fun box bit_reverse() : I128 val","title":"bit_reverse"},{"location":"builtin-I128/#returns_5","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#bswap","text":"[Source] fun box bswap() : I128 val","title":"bswap"},{"location":"builtin-I128/#returns_6","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-I128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-I128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-I128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-I128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-I128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-I128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I128/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I128/#min","text":"[Source] fun box min( y: I128 val) : I128 val","title":"min"},{"location":"builtin-I128/#parameters_2","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_14","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#max","text":"[Source] fun box max( y: I128 val) : I128 val","title":"max"},{"location":"builtin-I128/#parameters_3","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_15","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld","text":"[Source] fun box fld( y: I128 val) : I128 val","title":"fld"},{"location":"builtin-I128/#parameters_4","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_16","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I128 val) : I128 val","title":"fld_unsafe"},{"location":"builtin-I128/#parameters_5","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_17","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod","text":"[Source] fun box mod( y: I128 val) : I128 val","title":"mod"},{"location":"builtin-I128/#parameters_6","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_18","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I128 val) : I128 val","title":"mod_unsafe"},{"location":"builtin-I128/#parameters_7","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_19","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I128/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I128/#returns_21","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-I128/#returns_22","text":"String iso^","title":"Returns"},{"location":"builtin-I128/#mul","text":"[Source] fun box mul( y: I128 val) : I128 val","title":"mul"},{"location":"builtin-I128/#parameters_8","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_23","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem","text":"[Source] fun box divrem( y: I128 val) : (I128 val , I128 val)","title":"divrem"},{"location":"builtin-I128/#parameters_9","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_24","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div","text":"[Source] fun box div( y: I128 val) : I128 val","title":"div"},{"location":"builtin-I128/#parameters_10","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_25","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem","text":"[Source] fun box rem( y: I128 val) : I128 val","title":"rem"},{"location":"builtin-I128/#parameters_11","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val","title":"mul_unsafe"},{"location":"builtin-I128/#parameters_12","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_27","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val)","title":"divrem_unsafe"},{"location":"builtin-I128/#parameters_13","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_28","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val","title":"div_unsafe"},{"location":"builtin-I128/#parameters_14","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_29","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val","title":"rem_unsafe"},{"location":"builtin-I128/#parameters_15","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_30","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-I128/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-I128/#returns_32","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I128/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I128/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#addc","text":"[Source] fun box addc( y: I128 val) : (I128 val , Bool val)","title":"addc"},{"location":"builtin-I128/#parameters_16","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_35","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#subc","text":"[Source] fun box subc( y: I128 val) : (I128 val , Bool val)","title":"subc"},{"location":"builtin-I128/#parameters_17","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_36","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#mulc","text":"[Source] fun box mulc( y: I128 val) : (I128 val , Bool val)","title":"mulc"},{"location":"builtin-I128/#parameters_18","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_37","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#divc","text":"[Source] fun box divc( y: I128 val) : (I128 val , Bool val)","title":"divc"},{"location":"builtin-I128/#parameters_19","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_38","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#remc","text":"[Source] fun box remc( y: I128 val) : (I128 val , Bool val)","title":"remc"},{"location":"builtin-I128/#parameters_20","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_39","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#fldc","text":"[Source] fun box fldc( y: I128 val) : (I128 val , Bool val)","title":"fldc"},{"location":"builtin-I128/#parameters_21","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_40","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#modc","text":"[Source] fun box modc( y: I128 val) : (I128 val , Bool val)","title":"modc"},{"location":"builtin-I128/#parameters_22","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_41","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#add_partial","text":"[Source] fun box add_partial( y: I128 val) : I128 val ?","title":"add_partial"},{"location":"builtin-I128/#parameters_23","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_42","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#sub_partial","text":"[Source] fun box sub_partial( y: I128 val) : I128 val ?","title":"sub_partial"},{"location":"builtin-I128/#parameters_24","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_43","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mul_partial","text":"[Source] fun box mul_partial( y: I128 val) : I128 val ?","title":"mul_partial"},{"location":"builtin-I128/#parameters_25","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_44","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#div_partial","text":"[Source] fun box div_partial( y: I128 val) : I128 val ?","title":"div_partial"},{"location":"builtin-I128/#parameters_26","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_45","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#rem_partial","text":"[Source] fun box rem_partial( y: I128 val) : I128 val ?","title":"rem_partial"},{"location":"builtin-I128/#parameters_27","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#divrem_partial","text":"[Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ?","title":"divrem_partial"},{"location":"builtin-I128/#parameters_28","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_47","text":"( I128 val , I128 val) ?","title":"Returns"},{"location":"builtin-I128/#fld_partial","text":"[Source] fun box fld_partial( y: I128 val) : I128 val ?","title":"fld_partial"},{"location":"builtin-I128/#parameters_29","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_48","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mod_partial","text":"[Source] fun box mod_partial( y: I128 val) : I128 val ?","title":"mod_partial"},{"location":"builtin-I128/#parameters_30","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_49","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#shl","text":"fun box shl( y: U128 val) : I128 val","title":"shl"},{"location":"builtin-I128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr","text":"fun box shr( y: U128 val) : I128 val","title":"shr"},{"location":"builtin-I128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_51","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : I128 val","title":"shl_unsafe"},{"location":"builtin-I128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_52","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : I128 val","title":"shr_unsafe"},{"location":"builtin-I128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_53","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add_unsafe","text":"fun box add_unsafe( y: I128 val) : I128 val","title":"add_unsafe"},{"location":"builtin-I128/#parameters_35","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_54","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub_unsafe","text":"fun box sub_unsafe( y: I128 val) : I128 val","title":"sub_unsafe"},{"location":"builtin-I128/#parameters_36","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_55","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg_unsafe","text":"fun box neg_unsafe() : I128 val","title":"neg_unsafe"},{"location":"builtin-I128/#returns_56","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_and","text":"fun box op_and( y: I128 val) : I128 val","title":"op_and"},{"location":"builtin-I128/#parameters_37","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_57","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_or","text":"fun box op_or( y: I128 val) : I128 val","title":"op_or"},{"location":"builtin-I128/#parameters_38","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_xor","text":"fun box op_xor( y: I128 val) : I128 val","title":"op_xor"},{"location":"builtin-I128/#parameters_39","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_59","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_not","text":"fun box op_not() : I128 val","title":"op_not"},{"location":"builtin-I128/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add","text":"fun box add( y: I128 val) : I128 val","title":"add"},{"location":"builtin-I128/#parameters_40","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_61","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub","text":"fun box sub( y: I128 val) : I128 val","title":"sub"},{"location":"builtin-I128/#parameters_41","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg","text":"fun box neg() : I128 val","title":"neg"},{"location":"builtin-I128/#returns_63","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#eq","text":"fun box eq( y: I128 val) : Bool val","title":"eq"},{"location":"builtin-I128/#parameters_42","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ne","text":"fun box ne( y: I128 val) : Bool val","title":"ne"},{"location":"builtin-I128/#parameters_43","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#lt","text":"fun box lt( y: I128 val) : Bool val","title":"lt"},{"location":"builtin-I128/#parameters_44","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#le","text":"fun box le( y: I128 val) : Bool val","title":"le"},{"location":"builtin-I128/#parameters_45","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ge","text":"fun box ge( y: I128 val) : Bool val","title":"ge"},{"location":"builtin-I128/#parameters_46","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#gt","text":"fun box gt( y: I128 val) : Bool val","title":"gt"},{"location":"builtin-I128/#parameters_47","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I128/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I128/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I128/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I128/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_1","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I128/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I128/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I128/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I128/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I128/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I128/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I128/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I128/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I128/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I128/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-I128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I128/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I128/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I128/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I128/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I128/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I128/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I128/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I128/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I128/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I128/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I128/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I128/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I128/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I128/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-I128/#compare","text":"fun box compare( that: I128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I128/#parameters_48","text":"that: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I16/","text":"I16 \u00b6 [Source] primitive val I16 is SignedInteger[I16 val, U16 val] val Implements \u00b6 SignedInteger [ I16 val, U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I16 val) : I16 val^ Parameters \u00b6 value: I16 val Returns \u00b6 I16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^ Parameters \u00b6 a: A Returns \u00b6 I16 val^ min_value \u00b6 [Source] new val min_value() : I16 val^ Returns \u00b6 I16 val^ max_value \u00b6 [Source] new val max_value() : I16 val^ Returns \u00b6 I16 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I16 val Returns \u00b6 I16 val bswap \u00b6 [Source] fun box bswap() : I16 val Returns \u00b6 I16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val max \u00b6 [Source] fun box max( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld \u00b6 [Source] fun box fld( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod \u00b6 [Source] fun box mod( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val addc \u00b6 [Source] fun box addc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) subc \u00b6 [Source] fun box subc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) divc \u00b6 [Source] fun box divc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) remc \u00b6 [Source] fun box remc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) modc \u00b6 [Source] fun box modc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? div_partial \u00b6 [Source] fun box div_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ? Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? shl \u00b6 fun box shl( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr \u00b6 fun box shr( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub_unsafe \u00b6 fun box sub_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul_unsafe \u00b6 fun box mul_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div_unsafe \u00b6 fun box div_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg_unsafe \u00b6 fun box neg_unsafe() : I16 val Returns \u00b6 I16 val op_and \u00b6 fun box op_and( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_or \u00b6 fun box op_or( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_xor \u00b6 fun box op_xor( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_not \u00b6 fun box op_not() : I16 val Returns \u00b6 I16 val add \u00b6 fun box add( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub \u00b6 fun box sub( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul \u00b6 fun box mul( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div \u00b6 fun box div( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem \u00b6 fun box divrem( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem \u00b6 fun box rem( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg \u00b6 fun box neg() : I16 val Returns \u00b6 I16 val eq \u00b6 fun box eq( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I16 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive I16"},{"location":"builtin-I16/#i16","text":"[Source] primitive val I16 is SignedInteger[I16 val, U16 val] val","title":"I16"},{"location":"builtin-I16/#implements","text":"SignedInteger [ I16 val, U16 val] val","title":"Implements"},{"location":"builtin-I16/#constructors","text":"","title":"Constructors"},{"location":"builtin-I16/#create","text":"[Source] new val create( value: I16 val) : I16 val^","title":"create"},{"location":"builtin-I16/#parameters","text":"value: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I16/#returns_1","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#min_value","text":"[Source] new val min_value() : I16 val^","title":"min_value"},{"location":"builtin-I16/#returns_2","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#max_value","text":"[Source] new val max_value() : I16 val^","title":"max_value"},{"location":"builtin-I16/#returns_3","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-I16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bit_reverse","text":"[Source] fun box bit_reverse() : I16 val","title":"bit_reverse"},{"location":"builtin-I16/#returns_5","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#bswap","text":"[Source] fun box bswap() : I16 val","title":"bswap"},{"location":"builtin-I16/#returns_6","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-I16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-I16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-I16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-I16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-I16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-I16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I16/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I16/#min","text":"[Source] fun box min( y: I16 val) : I16 val","title":"min"},{"location":"builtin-I16/#parameters_2","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#max","text":"[Source] fun box max( y: I16 val) : I16 val","title":"max"},{"location":"builtin-I16/#parameters_3","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld","text":"[Source] fun box fld( y: I16 val) : I16 val","title":"fld"},{"location":"builtin-I16/#parameters_4","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I16 val) : I16 val","title":"fld_unsafe"},{"location":"builtin-I16/#parameters_5","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod","text":"[Source] fun box mod( y: I16 val) : I16 val","title":"mod"},{"location":"builtin-I16/#parameters_6","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I16 val) : I16 val","title":"mod_unsafe"},{"location":"builtin-I16/#parameters_7","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_19","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#addc","text":"[Source] fun box addc( y: I16 val) : (I16 val , Bool val)","title":"addc"},{"location":"builtin-I16/#parameters_8","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_20","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#subc","text":"[Source] fun box subc( y: I16 val) : (I16 val , Bool val)","title":"subc"},{"location":"builtin-I16/#parameters_9","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_21","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#mulc","text":"[Source] fun box mulc( y: I16 val) : (I16 val , Bool val)","title":"mulc"},{"location":"builtin-I16/#parameters_10","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_22","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#divc","text":"[Source] fun box divc( y: I16 val) : (I16 val , Bool val)","title":"divc"},{"location":"builtin-I16/#parameters_11","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_23","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#remc","text":"[Source] fun box remc( y: I16 val) : (I16 val , Bool val)","title":"remc"},{"location":"builtin-I16/#parameters_12","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_24","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#fldc","text":"[Source] fun box fldc( y: I16 val) : (I16 val , Bool val)","title":"fldc"},{"location":"builtin-I16/#parameters_13","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_25","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#modc","text":"[Source] fun box modc( y: I16 val) : (I16 val , Bool val)","title":"modc"},{"location":"builtin-I16/#parameters_14","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_26","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#add_partial","text":"[Source] fun box add_partial( y: I16 val) : I16 val ?","title":"add_partial"},{"location":"builtin-I16/#parameters_15","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_27","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#sub_partial","text":"[Source] fun box sub_partial( y: I16 val) : I16 val ?","title":"sub_partial"},{"location":"builtin-I16/#parameters_16","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_28","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mul_partial","text":"[Source] fun box mul_partial( y: I16 val) : I16 val ?","title":"mul_partial"},{"location":"builtin-I16/#parameters_17","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_29","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#div_partial","text":"[Source] fun box div_partial( y: I16 val) : I16 val ?","title":"div_partial"},{"location":"builtin-I16/#parameters_18","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_30","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#rem_partial","text":"[Source] fun box rem_partial( y: I16 val) : I16 val ?","title":"rem_partial"},{"location":"builtin-I16/#parameters_19","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_31","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#divrem_partial","text":"[Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ?","title":"divrem_partial"},{"location":"builtin-I16/#parameters_20","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_32","text":"( I16 val , I16 val) ?","title":"Returns"},{"location":"builtin-I16/#fld_partial","text":"[Source] fun box fld_partial( y: I16 val) : I16 val ?","title":"fld_partial"},{"location":"builtin-I16/#parameters_21","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_33","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mod_partial","text":"[Source] fun box mod_partial( y: I16 val) : I16 val ?","title":"mod_partial"},{"location":"builtin-I16/#parameters_22","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#shl","text":"fun box shl( y: U16 val) : I16 val","title":"shl"},{"location":"builtin-I16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_35","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr","text":"fun box shr( y: U16 val) : I16 val","title":"shr"},{"location":"builtin-I16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_36","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : I16 val","title":"shl_unsafe"},{"location":"builtin-I16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_37","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : I16 val","title":"shr_unsafe"},{"location":"builtin-I16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_38","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I16/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I16/#add_unsafe","text":"fun box add_unsafe( y: I16 val) : I16 val","title":"add_unsafe"},{"location":"builtin-I16/#parameters_27","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_40","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub_unsafe","text":"fun box sub_unsafe( y: I16 val) : I16 val","title":"sub_unsafe"},{"location":"builtin-I16/#parameters_28","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul_unsafe","text":"fun box mul_unsafe( y: I16 val) : I16 val","title":"mul_unsafe"},{"location":"builtin-I16/#parameters_29","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_42","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div_unsafe","text":"fun box div_unsafe( y: I16 val) : I16 val","title":"div_unsafe"},{"location":"builtin-I16/#parameters_30","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_43","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem_unsafe","text":"fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val)","title":"divrem_unsafe"},{"location":"builtin-I16/#parameters_31","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_44","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem_unsafe","text":"fun box rem_unsafe( y: I16 val) : I16 val","title":"rem_unsafe"},{"location":"builtin-I16/#parameters_32","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_45","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg_unsafe","text":"fun box neg_unsafe() : I16 val","title":"neg_unsafe"},{"location":"builtin-I16/#returns_46","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_and","text":"fun box op_and( y: I16 val) : I16 val","title":"op_and"},{"location":"builtin-I16/#parameters_33","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_47","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_or","text":"fun box op_or( y: I16 val) : I16 val","title":"op_or"},{"location":"builtin-I16/#parameters_34","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_48","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_xor","text":"fun box op_xor( y: I16 val) : I16 val","title":"op_xor"},{"location":"builtin-I16/#parameters_35","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_49","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_not","text":"fun box op_not() : I16 val","title":"op_not"},{"location":"builtin-I16/#returns_50","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#add","text":"fun box add( y: I16 val) : I16 val","title":"add"},{"location":"builtin-I16/#parameters_36","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_51","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub","text":"fun box sub( y: I16 val) : I16 val","title":"sub"},{"location":"builtin-I16/#parameters_37","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_52","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul","text":"fun box mul( y: I16 val) : I16 val","title":"mul"},{"location":"builtin-I16/#parameters_38","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_53","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div","text":"fun box div( y: I16 val) : I16 val","title":"div"},{"location":"builtin-I16/#parameters_39","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_54","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem","text":"fun box divrem( y: I16 val) : (I16 val , I16 val)","title":"divrem"},{"location":"builtin-I16/#parameters_40","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_55","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem","text":"fun box rem( y: I16 val) : I16 val","title":"rem"},{"location":"builtin-I16/#parameters_41","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_56","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg","text":"fun box neg() : I16 val","title":"neg"},{"location":"builtin-I16/#returns_57","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#eq","text":"fun box eq( y: I16 val) : Bool val","title":"eq"},{"location":"builtin-I16/#parameters_42","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ne","text":"fun box ne( y: I16 val) : Bool val","title":"ne"},{"location":"builtin-I16/#parameters_43","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#lt","text":"fun box lt( y: I16 val) : Bool val","title":"lt"},{"location":"builtin-I16/#parameters_44","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#le","text":"fun box le( y: I16 val) : Bool val","title":"le"},{"location":"builtin-I16/#parameters_45","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ge","text":"fun box ge( y: I16 val) : Bool val","title":"ge"},{"location":"builtin-I16/#parameters_46","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#gt","text":"fun box gt( y: I16 val) : Bool val","title":"gt"},{"location":"builtin-I16/#parameters_47","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I16/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I16/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I16/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_1","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I16/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I16/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I16/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I16/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I16/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I16/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I16/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I16/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I16/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I16/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I16/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I16/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I16/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I16/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I16/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I16/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I16/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I16/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I16/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I16/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I16/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I16/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I16/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I16/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I16/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I16/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I16/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I16/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I16/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I16/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I16/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#compare","text":"fun box compare( that: I16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I16/#parameters_48","text":"that: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I32/","text":"I32 \u00b6 [Source] primitive val I32 is SignedInteger[I32 val, U32 val] val Implements \u00b6 SignedInteger [ I32 val, U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I32 val) : I32 val^ Parameters \u00b6 value: I32 val Returns \u00b6 I32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^ Parameters \u00b6 a: A Returns \u00b6 I32 val^ min_value \u00b6 [Source] new val min_value() : I32 val^ Returns \u00b6 I32 val^ max_value \u00b6 [Source] new val max_value() : I32 val^ Returns \u00b6 I32 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I32 val Returns \u00b6 I32 val bswap \u00b6 [Source] fun box bswap() : I32 val Returns \u00b6 I32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val max \u00b6 [Source] fun box max( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld \u00b6 [Source] fun box fld( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod \u00b6 [Source] fun box mod( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val addc \u00b6 [Source] fun box addc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) subc \u00b6 [Source] fun box subc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) divc \u00b6 [Source] fun box divc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) remc \u00b6 [Source] fun box remc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) modc \u00b6 [Source] fun box modc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? div_partial \u00b6 [Source] fun box div_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ? Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? shl \u00b6 fun box shl( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr \u00b6 fun box shr( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub_unsafe \u00b6 fun box sub_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul_unsafe \u00b6 fun box mul_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div_unsafe \u00b6 fun box div_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg_unsafe \u00b6 fun box neg_unsafe() : I32 val Returns \u00b6 I32 val op_and \u00b6 fun box op_and( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_or \u00b6 fun box op_or( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_xor \u00b6 fun box op_xor( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_not \u00b6 fun box op_not() : I32 val Returns \u00b6 I32 val add \u00b6 fun box add( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub \u00b6 fun box sub( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul \u00b6 fun box mul( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div \u00b6 fun box div( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem \u00b6 fun box divrem( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem \u00b6 fun box rem( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg \u00b6 fun box neg() : I32 val Returns \u00b6 I32 val eq \u00b6 fun box eq( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I32 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive I32"},{"location":"builtin-I32/#i32","text":"[Source] primitive val I32 is SignedInteger[I32 val, U32 val] val","title":"I32"},{"location":"builtin-I32/#implements","text":"SignedInteger [ I32 val, U32 val] val","title":"Implements"},{"location":"builtin-I32/#constructors","text":"","title":"Constructors"},{"location":"builtin-I32/#create","text":"[Source] new val create( value: I32 val) : I32 val^","title":"create"},{"location":"builtin-I32/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I32/#returns_1","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#min_value","text":"[Source] new val min_value() : I32 val^","title":"min_value"},{"location":"builtin-I32/#returns_2","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#max_value","text":"[Source] new val max_value() : I32 val^","title":"max_value"},{"location":"builtin-I32/#returns_3","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-I32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bit_reverse","text":"[Source] fun box bit_reverse() : I32 val","title":"bit_reverse"},{"location":"builtin-I32/#returns_5","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#bswap","text":"[Source] fun box bswap() : I32 val","title":"bswap"},{"location":"builtin-I32/#returns_6","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-I32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-I32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-I32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-I32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-I32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-I32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I32/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I32/#min","text":"[Source] fun box min( y: I32 val) : I32 val","title":"min"},{"location":"builtin-I32/#parameters_2","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_14","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#max","text":"[Source] fun box max( y: I32 val) : I32 val","title":"max"},{"location":"builtin-I32/#parameters_3","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_15","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld","text":"[Source] fun box fld( y: I32 val) : I32 val","title":"fld"},{"location":"builtin-I32/#parameters_4","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_16","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I32 val) : I32 val","title":"fld_unsafe"},{"location":"builtin-I32/#parameters_5","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_17","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod","text":"[Source] fun box mod( y: I32 val) : I32 val","title":"mod"},{"location":"builtin-I32/#parameters_6","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I32 val) : I32 val","title":"mod_unsafe"},{"location":"builtin-I32/#parameters_7","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_19","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#addc","text":"[Source] fun box addc( y: I32 val) : (I32 val , Bool val)","title":"addc"},{"location":"builtin-I32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_20","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#subc","text":"[Source] fun box subc( y: I32 val) : (I32 val , Bool val)","title":"subc"},{"location":"builtin-I32/#parameters_9","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_21","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#mulc","text":"[Source] fun box mulc( y: I32 val) : (I32 val , Bool val)","title":"mulc"},{"location":"builtin-I32/#parameters_10","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_22","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#divc","text":"[Source] fun box divc( y: I32 val) : (I32 val , Bool val)","title":"divc"},{"location":"builtin-I32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_23","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#remc","text":"[Source] fun box remc( y: I32 val) : (I32 val , Bool val)","title":"remc"},{"location":"builtin-I32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_24","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#fldc","text":"[Source] fun box fldc( y: I32 val) : (I32 val , Bool val)","title":"fldc"},{"location":"builtin-I32/#parameters_13","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_25","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#modc","text":"[Source] fun box modc( y: I32 val) : (I32 val , Bool val)","title":"modc"},{"location":"builtin-I32/#parameters_14","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_26","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#add_partial","text":"[Source] fun box add_partial( y: I32 val) : I32 val ?","title":"add_partial"},{"location":"builtin-I32/#parameters_15","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_27","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#sub_partial","text":"[Source] fun box sub_partial( y: I32 val) : I32 val ?","title":"sub_partial"},{"location":"builtin-I32/#parameters_16","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_28","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mul_partial","text":"[Source] fun box mul_partial( y: I32 val) : I32 val ?","title":"mul_partial"},{"location":"builtin-I32/#parameters_17","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_29","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#div_partial","text":"[Source] fun box div_partial( y: I32 val) : I32 val ?","title":"div_partial"},{"location":"builtin-I32/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_30","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#rem_partial","text":"[Source] fun box rem_partial( y: I32 val) : I32 val ?","title":"rem_partial"},{"location":"builtin-I32/#parameters_19","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_31","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#divrem_partial","text":"[Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ?","title":"divrem_partial"},{"location":"builtin-I32/#parameters_20","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_32","text":"( I32 val , I32 val) ?","title":"Returns"},{"location":"builtin-I32/#fld_partial","text":"[Source] fun box fld_partial( y: I32 val) : I32 val ?","title":"fld_partial"},{"location":"builtin-I32/#parameters_21","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_33","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mod_partial","text":"[Source] fun box mod_partial( y: I32 val) : I32 val ?","title":"mod_partial"},{"location":"builtin-I32/#parameters_22","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_34","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#shl","text":"fun box shl( y: U32 val) : I32 val","title":"shl"},{"location":"builtin-I32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_35","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr","text":"fun box shr( y: U32 val) : I32 val","title":"shr"},{"location":"builtin-I32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_36","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : I32 val","title":"shl_unsafe"},{"location":"builtin-I32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_37","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : I32 val","title":"shr_unsafe"},{"location":"builtin-I32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_38","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I32/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I32/#add_unsafe","text":"fun box add_unsafe( y: I32 val) : I32 val","title":"add_unsafe"},{"location":"builtin-I32/#parameters_27","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub_unsafe","text":"fun box sub_unsafe( y: I32 val) : I32 val","title":"sub_unsafe"},{"location":"builtin-I32/#parameters_28","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_41","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul_unsafe","text":"fun box mul_unsafe( y: I32 val) : I32 val","title":"mul_unsafe"},{"location":"builtin-I32/#parameters_29","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div_unsafe","text":"fun box div_unsafe( y: I32 val) : I32 val","title":"div_unsafe"},{"location":"builtin-I32/#parameters_30","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_43","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem_unsafe","text":"fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val)","title":"divrem_unsafe"},{"location":"builtin-I32/#parameters_31","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_44","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem_unsafe","text":"fun box rem_unsafe( y: I32 val) : I32 val","title":"rem_unsafe"},{"location":"builtin-I32/#parameters_32","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_45","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg_unsafe","text":"fun box neg_unsafe() : I32 val","title":"neg_unsafe"},{"location":"builtin-I32/#returns_46","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_and","text":"fun box op_and( y: I32 val) : I32 val","title":"op_and"},{"location":"builtin-I32/#parameters_33","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_47","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_or","text":"fun box op_or( y: I32 val) : I32 val","title":"op_or"},{"location":"builtin-I32/#parameters_34","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_xor","text":"fun box op_xor( y: I32 val) : I32 val","title":"op_xor"},{"location":"builtin-I32/#parameters_35","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_49","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_not","text":"fun box op_not() : I32 val","title":"op_not"},{"location":"builtin-I32/#returns_50","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#add","text":"fun box add( y: I32 val) : I32 val","title":"add"},{"location":"builtin-I32/#parameters_36","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_51","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub","text":"fun box sub( y: I32 val) : I32 val","title":"sub"},{"location":"builtin-I32/#parameters_37","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_52","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul","text":"fun box mul( y: I32 val) : I32 val","title":"mul"},{"location":"builtin-I32/#parameters_38","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_53","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div","text":"fun box div( y: I32 val) : I32 val","title":"div"},{"location":"builtin-I32/#parameters_39","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_54","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem","text":"fun box divrem( y: I32 val) : (I32 val , I32 val)","title":"divrem"},{"location":"builtin-I32/#parameters_40","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_55","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem","text":"fun box rem( y: I32 val) : I32 val","title":"rem"},{"location":"builtin-I32/#parameters_41","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg","text":"fun box neg() : I32 val","title":"neg"},{"location":"builtin-I32/#returns_57","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#eq","text":"fun box eq( y: I32 val) : Bool val","title":"eq"},{"location":"builtin-I32/#parameters_42","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ne","text":"fun box ne( y: I32 val) : Bool val","title":"ne"},{"location":"builtin-I32/#parameters_43","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#lt","text":"fun box lt( y: I32 val) : Bool val","title":"lt"},{"location":"builtin-I32/#parameters_44","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#le","text":"fun box le( y: I32 val) : Bool val","title":"le"},{"location":"builtin-I32/#parameters_45","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ge","text":"fun box ge( y: I32 val) : Bool val","title":"ge"},{"location":"builtin-I32/#parameters_46","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#gt","text":"fun box gt( y: I32 val) : Bool val","title":"gt"},{"location":"builtin-I32/#parameters_47","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I32/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I32/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I32/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I32/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_1","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I32/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I32/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I32/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I32/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I32/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I32/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I32/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I32/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I32/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I32/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I32/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I32/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I32/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I32/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I32/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I32/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I32/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I32/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I32/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I32/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I32/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I32/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I32/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I32/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I32/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I32/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I32/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I32/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I32/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#compare","text":"fun box compare( that: I32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I32/#parameters_48","text":"that: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I64/","text":"I64 \u00b6 [Source] primitive val I64 is SignedInteger[I64 val, U64 val] val Implements \u00b6 SignedInteger [ I64 val, U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I64 val) : I64 val^ Parameters \u00b6 value: I64 val Returns \u00b6 I64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^ Parameters \u00b6 a: A Returns \u00b6 I64 val^ min_value \u00b6 [Source] new val min_value() : I64 val^ Returns \u00b6 I64 val^ max_value \u00b6 [Source] new val max_value() : I64 val^ Returns \u00b6 I64 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I64 val Returns \u00b6 I64 val bswap \u00b6 [Source] fun box bswap() : I64 val Returns \u00b6 I64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val max \u00b6 [Source] fun box max( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld \u00b6 [Source] fun box fld( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod \u00b6 [Source] fun box mod( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) subc \u00b6 [Source] fun box subc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) divc \u00b6 [Source] fun box divc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) remc \u00b6 [Source] fun box remc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) modc \u00b6 [Source] fun box modc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? div_partial \u00b6 [Source] fun box div_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ? Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? shl \u00b6 fun box shl( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr \u00b6 fun box shr( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub_unsafe \u00b6 fun box sub_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul_unsafe \u00b6 fun box mul_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div_unsafe \u00b6 fun box div_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg_unsafe \u00b6 fun box neg_unsafe() : I64 val Returns \u00b6 I64 val op_and \u00b6 fun box op_and( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_or \u00b6 fun box op_or( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_xor \u00b6 fun box op_xor( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_not \u00b6 fun box op_not() : I64 val Returns \u00b6 I64 val add \u00b6 fun box add( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub \u00b6 fun box sub( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul \u00b6 fun box mul( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div \u00b6 fun box div( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem \u00b6 fun box divrem( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem \u00b6 fun box rem( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg \u00b6 fun box neg() : I64 val Returns \u00b6 I64 val eq \u00b6 fun box eq( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I64 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive I64"},{"location":"builtin-I64/#i64","text":"[Source] primitive val I64 is SignedInteger[I64 val, U64 val] val","title":"I64"},{"location":"builtin-I64/#implements","text":"SignedInteger [ I64 val, U64 val] val","title":"Implements"},{"location":"builtin-I64/#constructors","text":"","title":"Constructors"},{"location":"builtin-I64/#create","text":"[Source] new val create( value: I64 val) : I64 val^","title":"create"},{"location":"builtin-I64/#parameters","text":"value: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I64/#returns_1","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#min_value","text":"[Source] new val min_value() : I64 val^","title":"min_value"},{"location":"builtin-I64/#returns_2","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#max_value","text":"[Source] new val max_value() : I64 val^","title":"max_value"},{"location":"builtin-I64/#returns_3","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-I64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bit_reverse","text":"[Source] fun box bit_reverse() : I64 val","title":"bit_reverse"},{"location":"builtin-I64/#returns_5","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#bswap","text":"[Source] fun box bswap() : I64 val","title":"bswap"},{"location":"builtin-I64/#returns_6","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-I64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-I64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-I64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-I64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-I64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-I64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I64/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I64/#min","text":"[Source] fun box min( y: I64 val) : I64 val","title":"min"},{"location":"builtin-I64/#parameters_2","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_14","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#max","text":"[Source] fun box max( y: I64 val) : I64 val","title":"max"},{"location":"builtin-I64/#parameters_3","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_15","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld","text":"[Source] fun box fld( y: I64 val) : I64 val","title":"fld"},{"location":"builtin-I64/#parameters_4","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_16","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I64 val) : I64 val","title":"fld_unsafe"},{"location":"builtin-I64/#parameters_5","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_17","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod","text":"[Source] fun box mod( y: I64 val) : I64 val","title":"mod"},{"location":"builtin-I64/#parameters_6","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_18","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I64 val) : I64 val","title":"mod_unsafe"},{"location":"builtin-I64/#parameters_7","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I64/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I64/#addc","text":"[Source] fun box addc( y: I64 val) : (I64 val , Bool val)","title":"addc"},{"location":"builtin-I64/#parameters_8","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_21","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#subc","text":"[Source] fun box subc( y: I64 val) : (I64 val , Bool val)","title":"subc"},{"location":"builtin-I64/#parameters_9","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_22","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#mulc","text":"[Source] fun box mulc( y: I64 val) : (I64 val , Bool val)","title":"mulc"},{"location":"builtin-I64/#parameters_10","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_23","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#divc","text":"[Source] fun box divc( y: I64 val) : (I64 val , Bool val)","title":"divc"},{"location":"builtin-I64/#parameters_11","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_24","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#remc","text":"[Source] fun box remc( y: I64 val) : (I64 val , Bool val)","title":"remc"},{"location":"builtin-I64/#parameters_12","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_25","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#fldc","text":"[Source] fun box fldc( y: I64 val) : (I64 val , Bool val)","title":"fldc"},{"location":"builtin-I64/#parameters_13","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_26","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#modc","text":"[Source] fun box modc( y: I64 val) : (I64 val , Bool val)","title":"modc"},{"location":"builtin-I64/#parameters_14","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_27","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#add_partial","text":"[Source] fun box add_partial( y: I64 val) : I64 val ?","title":"add_partial"},{"location":"builtin-I64/#parameters_15","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_28","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#sub_partial","text":"[Source] fun box sub_partial( y: I64 val) : I64 val ?","title":"sub_partial"},{"location":"builtin-I64/#parameters_16","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_29","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mul_partial","text":"[Source] fun box mul_partial( y: I64 val) : I64 val ?","title":"mul_partial"},{"location":"builtin-I64/#parameters_17","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_30","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#div_partial","text":"[Source] fun box div_partial( y: I64 val) : I64 val ?","title":"div_partial"},{"location":"builtin-I64/#parameters_18","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_31","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#rem_partial","text":"[Source] fun box rem_partial( y: I64 val) : I64 val ?","title":"rem_partial"},{"location":"builtin-I64/#parameters_19","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_32","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#divrem_partial","text":"[Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ?","title":"divrem_partial"},{"location":"builtin-I64/#parameters_20","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_33","text":"( I64 val , I64 val) ?","title":"Returns"},{"location":"builtin-I64/#fld_partial","text":"[Source] fun box fld_partial( y: I64 val) : I64 val ?","title":"fld_partial"},{"location":"builtin-I64/#parameters_21","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_34","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mod_partial","text":"[Source] fun box mod_partial( y: I64 val) : I64 val ?","title":"mod_partial"},{"location":"builtin-I64/#parameters_22","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_35","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#shl","text":"fun box shl( y: U64 val) : I64 val","title":"shl"},{"location":"builtin-I64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_36","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr","text":"fun box shr( y: U64 val) : I64 val","title":"shr"},{"location":"builtin-I64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_37","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : I64 val","title":"shl_unsafe"},{"location":"builtin-I64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_38","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : I64 val","title":"shr_unsafe"},{"location":"builtin-I64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_39","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I64/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-I64/#add_unsafe","text":"fun box add_unsafe( y: I64 val) : I64 val","title":"add_unsafe"},{"location":"builtin-I64/#parameters_27","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub_unsafe","text":"fun box sub_unsafe( y: I64 val) : I64 val","title":"sub_unsafe"},{"location":"builtin-I64/#parameters_28","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_42","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul_unsafe","text":"fun box mul_unsafe( y: I64 val) : I64 val","title":"mul_unsafe"},{"location":"builtin-I64/#parameters_29","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div_unsafe","text":"fun box div_unsafe( y: I64 val) : I64 val","title":"div_unsafe"},{"location":"builtin-I64/#parameters_30","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_44","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem_unsafe","text":"fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val)","title":"divrem_unsafe"},{"location":"builtin-I64/#parameters_31","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_45","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem_unsafe","text":"fun box rem_unsafe( y: I64 val) : I64 val","title":"rem_unsafe"},{"location":"builtin-I64/#parameters_32","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_46","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg_unsafe","text":"fun box neg_unsafe() : I64 val","title":"neg_unsafe"},{"location":"builtin-I64/#returns_47","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_and","text":"fun box op_and( y: I64 val) : I64 val","title":"op_and"},{"location":"builtin-I64/#parameters_33","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_48","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_or","text":"fun box op_or( y: I64 val) : I64 val","title":"op_or"},{"location":"builtin-I64/#parameters_34","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_xor","text":"fun box op_xor( y: I64 val) : I64 val","title":"op_xor"},{"location":"builtin-I64/#parameters_35","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_50","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_not","text":"fun box op_not() : I64 val","title":"op_not"},{"location":"builtin-I64/#returns_51","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#add","text":"fun box add( y: I64 val) : I64 val","title":"add"},{"location":"builtin-I64/#parameters_36","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_52","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub","text":"fun box sub( y: I64 val) : I64 val","title":"sub"},{"location":"builtin-I64/#parameters_37","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_53","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul","text":"fun box mul( y: I64 val) : I64 val","title":"mul"},{"location":"builtin-I64/#parameters_38","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_54","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div","text":"fun box div( y: I64 val) : I64 val","title":"div"},{"location":"builtin-I64/#parameters_39","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_55","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem","text":"fun box divrem( y: I64 val) : (I64 val , I64 val)","title":"divrem"},{"location":"builtin-I64/#parameters_40","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_56","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem","text":"fun box rem( y: I64 val) : I64 val","title":"rem"},{"location":"builtin-I64/#parameters_41","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg","text":"fun box neg() : I64 val","title":"neg"},{"location":"builtin-I64/#returns_58","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#eq","text":"fun box eq( y: I64 val) : Bool val","title":"eq"},{"location":"builtin-I64/#parameters_42","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ne","text":"fun box ne( y: I64 val) : Bool val","title":"ne"},{"location":"builtin-I64/#parameters_43","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#lt","text":"fun box lt( y: I64 val) : Bool val","title":"lt"},{"location":"builtin-I64/#parameters_44","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#le","text":"fun box le( y: I64 val) : Bool val","title":"le"},{"location":"builtin-I64/#parameters_45","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ge","text":"fun box ge( y: I64 val) : Bool val","title":"ge"},{"location":"builtin-I64/#parameters_46","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#gt","text":"fun box gt( y: I64 val) : Bool val","title":"gt"},{"location":"builtin-I64/#parameters_47","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I64/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I64/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I64/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I64/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_1","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I64/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I64/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I64/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I64/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I64/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I64/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I64/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I64/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I64/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I64/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I64/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I64/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I64/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I64/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I64/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I64/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I64/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I64/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I64/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I64/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I64/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I64/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I64/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I64/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I64/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I64/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I64/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I64/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#compare","text":"fun box compare( that: I64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I64/#parameters_48","text":"that: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I8/","text":"I8 \u00b6 [Source] primitive val I8 is SignedInteger[I8 val, U8 val] val Implements \u00b6 SignedInteger [ I8 val, U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I8 val) : I8 val^ Parameters \u00b6 value: I8 val Returns \u00b6 I8 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^ Parameters \u00b6 a: A Returns \u00b6 I8 val^ min_value \u00b6 [Source] new val min_value() : I8 val^ Returns \u00b6 I8 val^ max_value \u00b6 [Source] new val max_value() : I8 val^ Returns \u00b6 I8 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I8 val Returns \u00b6 I8 val bswap \u00b6 [Source] fun box bswap() : I8 val Returns \u00b6 I8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val max \u00b6 [Source] fun box max( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld \u00b6 [Source] fun box fld( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod \u00b6 [Source] fun box mod( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val addc \u00b6 [Source] fun box addc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) subc \u00b6 [Source] fun box subc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) divc \u00b6 [Source] fun box divc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) remc \u00b6 [Source] fun box remc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) modc \u00b6 [Source] fun box modc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? div_partial \u00b6 [Source] fun box div_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ? Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? shl \u00b6 fun box shl( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr \u00b6 fun box shr( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub_unsafe \u00b6 fun box sub_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul_unsafe \u00b6 fun box mul_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div_unsafe \u00b6 fun box div_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg_unsafe \u00b6 fun box neg_unsafe() : I8 val Returns \u00b6 I8 val op_and \u00b6 fun box op_and( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_or \u00b6 fun box op_or( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_xor \u00b6 fun box op_xor( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_not \u00b6 fun box op_not() : I8 val Returns \u00b6 I8 val add \u00b6 fun box add( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub \u00b6 fun box sub( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul \u00b6 fun box mul( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div \u00b6 fun box div( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem \u00b6 fun box divrem( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem \u00b6 fun box rem( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg \u00b6 fun box neg() : I8 val Returns \u00b6 I8 val eq \u00b6 fun box eq( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I8 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive I8"},{"location":"builtin-I8/#i8","text":"[Source] primitive val I8 is SignedInteger[I8 val, U8 val] val","title":"I8"},{"location":"builtin-I8/#implements","text":"SignedInteger [ I8 val, U8 val] val","title":"Implements"},{"location":"builtin-I8/#constructors","text":"","title":"Constructors"},{"location":"builtin-I8/#create","text":"[Source] new val create( value: I8 val) : I8 val^","title":"create"},{"location":"builtin-I8/#parameters","text":"value: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I8/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I8/#returns_1","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#min_value","text":"[Source] new val min_value() : I8 val^","title":"min_value"},{"location":"builtin-I8/#returns_2","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#max_value","text":"[Source] new val max_value() : I8 val^","title":"max_value"},{"location":"builtin-I8/#returns_3","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-I8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bit_reverse","text":"[Source] fun box bit_reverse() : I8 val","title":"bit_reverse"},{"location":"builtin-I8/#returns_5","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#bswap","text":"[Source] fun box bswap() : I8 val","title":"bswap"},{"location":"builtin-I8/#returns_6","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-I8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-I8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-I8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-I8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-I8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-I8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I8/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I8/#min","text":"[Source] fun box min( y: I8 val) : I8 val","title":"min"},{"location":"builtin-I8/#parameters_2","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_14","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#max","text":"[Source] fun box max( y: I8 val) : I8 val","title":"max"},{"location":"builtin-I8/#parameters_3","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_15","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld","text":"[Source] fun box fld( y: I8 val) : I8 val","title":"fld"},{"location":"builtin-I8/#parameters_4","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I8 val) : I8 val","title":"fld_unsafe"},{"location":"builtin-I8/#parameters_5","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_17","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod","text":"[Source] fun box mod( y: I8 val) : I8 val","title":"mod"},{"location":"builtin-I8/#parameters_6","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_18","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I8 val) : I8 val","title":"mod_unsafe"},{"location":"builtin-I8/#parameters_7","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_19","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#addc","text":"[Source] fun box addc( y: I8 val) : (I8 val , Bool val)","title":"addc"},{"location":"builtin-I8/#parameters_8","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_20","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#subc","text":"[Source] fun box subc( y: I8 val) : (I8 val , Bool val)","title":"subc"},{"location":"builtin-I8/#parameters_9","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_21","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#mulc","text":"[Source] fun box mulc( y: I8 val) : (I8 val , Bool val)","title":"mulc"},{"location":"builtin-I8/#parameters_10","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_22","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#divc","text":"[Source] fun box divc( y: I8 val) : (I8 val , Bool val)","title":"divc"},{"location":"builtin-I8/#parameters_11","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_23","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#remc","text":"[Source] fun box remc( y: I8 val) : (I8 val , Bool val)","title":"remc"},{"location":"builtin-I8/#parameters_12","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_24","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#fldc","text":"[Source] fun box fldc( y: I8 val) : (I8 val , Bool val)","title":"fldc"},{"location":"builtin-I8/#parameters_13","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_25","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#modc","text":"[Source] fun box modc( y: I8 val) : (I8 val , Bool val)","title":"modc"},{"location":"builtin-I8/#parameters_14","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_26","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#add_partial","text":"[Source] fun box add_partial( y: I8 val) : I8 val ?","title":"add_partial"},{"location":"builtin-I8/#parameters_15","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_27","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#sub_partial","text":"[Source] fun box sub_partial( y: I8 val) : I8 val ?","title":"sub_partial"},{"location":"builtin-I8/#parameters_16","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_28","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mul_partial","text":"[Source] fun box mul_partial( y: I8 val) : I8 val ?","title":"mul_partial"},{"location":"builtin-I8/#parameters_17","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_29","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#div_partial","text":"[Source] fun box div_partial( y: I8 val) : I8 val ?","title":"div_partial"},{"location":"builtin-I8/#parameters_18","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_30","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#rem_partial","text":"[Source] fun box rem_partial( y: I8 val) : I8 val ?","title":"rem_partial"},{"location":"builtin-I8/#parameters_19","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#divrem_partial","text":"[Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ?","title":"divrem_partial"},{"location":"builtin-I8/#parameters_20","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_32","text":"( I8 val , I8 val) ?","title":"Returns"},{"location":"builtin-I8/#fld_partial","text":"[Source] fun box fld_partial( y: I8 val) : I8 val ?","title":"fld_partial"},{"location":"builtin-I8/#parameters_21","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_33","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mod_partial","text":"[Source] fun box mod_partial( y: I8 val) : I8 val ?","title":"mod_partial"},{"location":"builtin-I8/#parameters_22","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_34","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#shl","text":"fun box shl( y: U8 val) : I8 val","title":"shl"},{"location":"builtin-I8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_35","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr","text":"fun box shr( y: U8 val) : I8 val","title":"shr"},{"location":"builtin-I8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_36","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : I8 val","title":"shl_unsafe"},{"location":"builtin-I8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_37","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : I8 val","title":"shr_unsafe"},{"location":"builtin-I8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I8/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I8/#add_unsafe","text":"fun box add_unsafe( y: I8 val) : I8 val","title":"add_unsafe"},{"location":"builtin-I8/#parameters_27","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub_unsafe","text":"fun box sub_unsafe( y: I8 val) : I8 val","title":"sub_unsafe"},{"location":"builtin-I8/#parameters_28","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_41","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul_unsafe","text":"fun box mul_unsafe( y: I8 val) : I8 val","title":"mul_unsafe"},{"location":"builtin-I8/#parameters_29","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_42","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div_unsafe","text":"fun box div_unsafe( y: I8 val) : I8 val","title":"div_unsafe"},{"location":"builtin-I8/#parameters_30","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_43","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem_unsafe","text":"fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val)","title":"divrem_unsafe"},{"location":"builtin-I8/#parameters_31","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_44","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem_unsafe","text":"fun box rem_unsafe( y: I8 val) : I8 val","title":"rem_unsafe"},{"location":"builtin-I8/#parameters_32","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_45","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg_unsafe","text":"fun box neg_unsafe() : I8 val","title":"neg_unsafe"},{"location":"builtin-I8/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_and","text":"fun box op_and( y: I8 val) : I8 val","title":"op_and"},{"location":"builtin-I8/#parameters_33","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_47","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_or","text":"fun box op_or( y: I8 val) : I8 val","title":"op_or"},{"location":"builtin-I8/#parameters_34","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_48","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_xor","text":"fun box op_xor( y: I8 val) : I8 val","title":"op_xor"},{"location":"builtin-I8/#parameters_35","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_49","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_not","text":"fun box op_not() : I8 val","title":"op_not"},{"location":"builtin-I8/#returns_50","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#add","text":"fun box add( y: I8 val) : I8 val","title":"add"},{"location":"builtin-I8/#parameters_36","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_51","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub","text":"fun box sub( y: I8 val) : I8 val","title":"sub"},{"location":"builtin-I8/#parameters_37","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_52","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul","text":"fun box mul( y: I8 val) : I8 val","title":"mul"},{"location":"builtin-I8/#parameters_38","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_53","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div","text":"fun box div( y: I8 val) : I8 val","title":"div"},{"location":"builtin-I8/#parameters_39","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem","text":"fun box divrem( y: I8 val) : (I8 val , I8 val)","title":"divrem"},{"location":"builtin-I8/#parameters_40","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_55","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem","text":"fun box rem( y: I8 val) : I8 val","title":"rem"},{"location":"builtin-I8/#parameters_41","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_56","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg","text":"fun box neg() : I8 val","title":"neg"},{"location":"builtin-I8/#returns_57","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#eq","text":"fun box eq( y: I8 val) : Bool val","title":"eq"},{"location":"builtin-I8/#parameters_42","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ne","text":"fun box ne( y: I8 val) : Bool val","title":"ne"},{"location":"builtin-I8/#parameters_43","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#lt","text":"fun box lt( y: I8 val) : Bool val","title":"lt"},{"location":"builtin-I8/#parameters_44","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#le","text":"fun box le( y: I8 val) : Bool val","title":"le"},{"location":"builtin-I8/#parameters_45","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ge","text":"fun box ge( y: I8 val) : Bool val","title":"ge"},{"location":"builtin-I8/#parameters_46","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#gt","text":"fun box gt( y: I8 val) : Bool val","title":"gt"},{"location":"builtin-I8/#parameters_47","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I8/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I8/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#i8_1","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I8/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I8/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I8/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I8/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I8/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I8/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I8/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I8/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I8/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I8/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I8/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I8/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I8/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I8/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I8/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I8/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I8/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I8/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I8/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I8/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I8/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I8/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I8/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I8/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I8/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I8/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I8/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I8/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I8/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I8/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I8/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I8/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#compare","text":"fun box compare( that: I8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I8/#parameters_48","text":"that: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ILong/","text":"ILong \u00b6 [Source] primitive val ILong is SignedInteger[ILong val, ULong val] val Implements \u00b6 SignedInteger [ ILong val, ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ILong val) : ILong val^ Parameters \u00b6 value: ILong val Returns \u00b6 ILong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^ Parameters \u00b6 a: A Returns \u00b6 ILong val^ min_value \u00b6 [Source] new val min_value() : ILong val^ Returns \u00b6 ILong val^ max_value \u00b6 [Source] new val max_value() : ILong val^ Returns \u00b6 ILong val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ILong val Returns \u00b6 ILong val bswap \u00b6 [Source] fun box bswap() : ILong val Returns \u00b6 ILong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val max \u00b6 [Source] fun box max( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld \u00b6 [Source] fun box fld( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod \u00b6 [Source] fun box mod( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) subc \u00b6 [Source] fun box subc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) divc \u00b6 [Source] fun box divc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) remc \u00b6 [Source] fun box remc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) modc \u00b6 [Source] fun box modc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? div_partial \u00b6 [Source] fun box div_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ? Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? shl \u00b6 fun box shl( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr \u00b6 fun box shr( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub_unsafe \u00b6 fun box sub_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul_unsafe \u00b6 fun box mul_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div_unsafe \u00b6 fun box div_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg_unsafe \u00b6 fun box neg_unsafe() : ILong val Returns \u00b6 ILong val op_and \u00b6 fun box op_and( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_or \u00b6 fun box op_or( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_xor \u00b6 fun box op_xor( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_not \u00b6 fun box op_not() : ILong val Returns \u00b6 ILong val add \u00b6 fun box add( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub \u00b6 fun box sub( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul \u00b6 fun box mul( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div \u00b6 fun box div( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem \u00b6 fun box divrem( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem \u00b6 fun box rem( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg \u00b6 fun box neg() : ILong val Returns \u00b6 ILong val eq \u00b6 fun box eq( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ILong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ILong val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive ILong"},{"location":"builtin-ILong/#ilong","text":"[Source] primitive val ILong is SignedInteger[ILong val, ULong val] val","title":"ILong"},{"location":"builtin-ILong/#implements","text":"SignedInteger [ ILong val, ULong val] val","title":"Implements"},{"location":"builtin-ILong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ILong/#create","text":"[Source] new val create( value: ILong val) : ILong val^","title":"create"},{"location":"builtin-ILong/#parameters","text":"value: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ILong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ILong/#returns_1","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#min_value","text":"[Source] new val min_value() : ILong val^","title":"min_value"},{"location":"builtin-ILong/#returns_2","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#max_value","text":"[Source] new val max_value() : ILong val^","title":"max_value"},{"location":"builtin-ILong/#returns_3","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ILong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ILong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bit_reverse","text":"[Source] fun box bit_reverse() : ILong val","title":"bit_reverse"},{"location":"builtin-ILong/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#bswap","text":"[Source] fun box bswap() : ILong val","title":"bswap"},{"location":"builtin-ILong/#returns_6","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ILong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ILong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ILong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz_unsafe","text":"[Source] fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ILong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ILong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ILong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ILong/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#min","text":"[Source] fun box min( y: ILong val) : ILong val","title":"min"},{"location":"builtin-ILong/#parameters_2","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_14","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#max","text":"[Source] fun box max( y: ILong val) : ILong val","title":"max"},{"location":"builtin-ILong/#parameters_3","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_15","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld","text":"[Source] fun box fld( y: ILong val) : ILong val","title":"fld"},{"location":"builtin-ILong/#parameters_4","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_16","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ILong val) : ILong val","title":"fld_unsafe"},{"location":"builtin-ILong/#parameters_5","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_17","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod","text":"[Source] fun box mod( y: ILong val) : ILong val","title":"mod"},{"location":"builtin-ILong/#parameters_6","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_18","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ILong val) : ILong val","title":"mod_unsafe"},{"location":"builtin-ILong/#parameters_7","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_19","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ILong/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#addc","text":"[Source] fun box addc( y: ILong val) : (ILong val , Bool val)","title":"addc"},{"location":"builtin-ILong/#parameters_8","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_21","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#subc","text":"[Source] fun box subc( y: ILong val) : (ILong val , Bool val)","title":"subc"},{"location":"builtin-ILong/#parameters_9","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_22","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#mulc","text":"[Source] fun box mulc( y: ILong val) : (ILong val , Bool val)","title":"mulc"},{"location":"builtin-ILong/#parameters_10","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_23","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#divc","text":"[Source] fun box divc( y: ILong val) : (ILong val , Bool val)","title":"divc"},{"location":"builtin-ILong/#parameters_11","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_24","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#remc","text":"[Source] fun box remc( y: ILong val) : (ILong val , Bool val)","title":"remc"},{"location":"builtin-ILong/#parameters_12","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_25","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#fldc","text":"[Source] fun box fldc( y: ILong val) : (ILong val , Bool val)","title":"fldc"},{"location":"builtin-ILong/#parameters_13","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_26","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#modc","text":"[Source] fun box modc( y: ILong val) : (ILong val , Bool val)","title":"modc"},{"location":"builtin-ILong/#parameters_14","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_27","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#add_partial","text":"[Source] fun box add_partial( y: ILong val) : ILong val ?","title":"add_partial"},{"location":"builtin-ILong/#parameters_15","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_28","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#sub_partial","text":"[Source] fun box sub_partial( y: ILong val) : ILong val ?","title":"sub_partial"},{"location":"builtin-ILong/#parameters_16","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_29","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mul_partial","text":"[Source] fun box mul_partial( y: ILong val) : ILong val ?","title":"mul_partial"},{"location":"builtin-ILong/#parameters_17","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_30","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#div_partial","text":"[Source] fun box div_partial( y: ILong val) : ILong val ?","title":"div_partial"},{"location":"builtin-ILong/#parameters_18","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_31","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#rem_partial","text":"[Source] fun box rem_partial( y: ILong val) : ILong val ?","title":"rem_partial"},{"location":"builtin-ILong/#parameters_19","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_32","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ?","title":"divrem_partial"},{"location":"builtin-ILong/#parameters_20","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_33","text":"( ILong val , ILong val) ?","title":"Returns"},{"location":"builtin-ILong/#fld_partial","text":"[Source] fun box fld_partial( y: ILong val) : ILong val ?","title":"fld_partial"},{"location":"builtin-ILong/#parameters_21","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_34","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mod_partial","text":"[Source] fun box mod_partial( y: ILong val) : ILong val ?","title":"mod_partial"},{"location":"builtin-ILong/#parameters_22","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_35","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#shl","text":"fun box shl( y: ULong val) : ILong val","title":"shl"},{"location":"builtin-ILong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_36","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr","text":"fun box shr( y: ULong val) : ILong val","title":"shr"},{"location":"builtin-ILong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_37","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ILong val","title":"shl_unsafe"},{"location":"builtin-ILong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_38","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ILong val","title":"shr_unsafe"},{"location":"builtin-ILong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_39","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ILong/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-ILong/#add_unsafe","text":"fun box add_unsafe( y: ILong val) : ILong val","title":"add_unsafe"},{"location":"builtin-ILong/#parameters_27","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_41","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub_unsafe","text":"fun box sub_unsafe( y: ILong val) : ILong val","title":"sub_unsafe"},{"location":"builtin-ILong/#parameters_28","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_42","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul_unsafe","text":"fun box mul_unsafe( y: ILong val) : ILong val","title":"mul_unsafe"},{"location":"builtin-ILong/#parameters_29","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div_unsafe","text":"fun box div_unsafe( y: ILong val) : ILong val","title":"div_unsafe"},{"location":"builtin-ILong/#parameters_30","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_44","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val)","title":"divrem_unsafe"},{"location":"builtin-ILong/#parameters_31","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_45","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem_unsafe","text":"fun box rem_unsafe( y: ILong val) : ILong val","title":"rem_unsafe"},{"location":"builtin-ILong/#parameters_32","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_46","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg_unsafe","text":"fun box neg_unsafe() : ILong val","title":"neg_unsafe"},{"location":"builtin-ILong/#returns_47","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_and","text":"fun box op_and( y: ILong val) : ILong val","title":"op_and"},{"location":"builtin-ILong/#parameters_33","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_48","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_or","text":"fun box op_or( y: ILong val) : ILong val","title":"op_or"},{"location":"builtin-ILong/#parameters_34","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_49","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_xor","text":"fun box op_xor( y: ILong val) : ILong val","title":"op_xor"},{"location":"builtin-ILong/#parameters_35","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_50","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_not","text":"fun box op_not() : ILong val","title":"op_not"},{"location":"builtin-ILong/#returns_51","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#add","text":"fun box add( y: ILong val) : ILong val","title":"add"},{"location":"builtin-ILong/#parameters_36","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_52","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub","text":"fun box sub( y: ILong val) : ILong val","title":"sub"},{"location":"builtin-ILong/#parameters_37","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_53","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul","text":"fun box mul( y: ILong val) : ILong val","title":"mul"},{"location":"builtin-ILong/#parameters_38","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_54","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div","text":"fun box div( y: ILong val) : ILong val","title":"div"},{"location":"builtin-ILong/#parameters_39","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_55","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem","text":"fun box divrem( y: ILong val) : (ILong val , ILong val)","title":"divrem"},{"location":"builtin-ILong/#parameters_40","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_56","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem","text":"fun box rem( y: ILong val) : ILong val","title":"rem"},{"location":"builtin-ILong/#parameters_41","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_57","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg","text":"fun box neg() : ILong val","title":"neg"},{"location":"builtin-ILong/#returns_58","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#eq","text":"fun box eq( y: ILong val) : Bool val","title":"eq"},{"location":"builtin-ILong/#parameters_42","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ne","text":"fun box ne( y: ILong val) : Bool val","title":"ne"},{"location":"builtin-ILong/#parameters_43","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#lt","text":"fun box lt( y: ILong val) : Bool val","title":"lt"},{"location":"builtin-ILong/#parameters_44","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#le","text":"fun box le( y: ILong val) : Bool val","title":"le"},{"location":"builtin-ILong/#parameters_45","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ge","text":"fun box ge( y: ILong val) : Bool val","title":"ge"},{"location":"builtin-ILong/#parameters_46","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#gt","text":"fun box gt( y: ILong val) : Bool val","title":"gt"},{"location":"builtin-ILong/#parameters_47","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ILong/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ILong/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ILong/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ILong/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ILong/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ILong/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_1","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ILong/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ILong/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ILong/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ILong/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ILong/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ILong/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ILong/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ILong/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ILong/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ILong/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ILong/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ILong/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ILong/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ILong/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ILong/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ILong/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ILong/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ILong/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ILong/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ILong/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ILong/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ILong/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ILong/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ILong/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ILong/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ILong/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ILong/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#compare","text":"fun box compare( that: ILong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ILong/#parameters_48","text":"that: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ISize/","text":"ISize \u00b6 [Source] primitive val ISize is SignedInteger[ISize val, USize val] val Implements \u00b6 SignedInteger [ ISize val, USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ISize val) : ISize val^ Parameters \u00b6 value: ISize val Returns \u00b6 ISize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^ Parameters \u00b6 a: A Returns \u00b6 ISize val^ min_value \u00b6 [Source] new val min_value() : ISize val^ Returns \u00b6 ISize val^ max_value \u00b6 [Source] new val max_value() : ISize val^ Returns \u00b6 ISize val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : ISize val Returns \u00b6 ISize val bswap \u00b6 [Source] fun box bswap() : ISize val Returns \u00b6 ISize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val max \u00b6 [Source] fun box max( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld \u00b6 [Source] fun box fld( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod \u00b6 [Source] fun box mod( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val addc \u00b6 [Source] fun box addc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) subc \u00b6 [Source] fun box subc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) divc \u00b6 [Source] fun box divc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) remc \u00b6 [Source] fun box remc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) modc \u00b6 [Source] fun box modc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? div_partial \u00b6 [Source] fun box div_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ? Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? shl \u00b6 fun box shl( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr \u00b6 fun box shr( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub_unsafe \u00b6 fun box sub_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul_unsafe \u00b6 fun box mul_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div_unsafe \u00b6 fun box div_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem_unsafe \u00b6 fun box rem_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg_unsafe \u00b6 fun box neg_unsafe() : ISize val Returns \u00b6 ISize val op_and \u00b6 fun box op_and( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_or \u00b6 fun box op_or( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_xor \u00b6 fun box op_xor( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_not \u00b6 fun box op_not() : ISize val Returns \u00b6 ISize val add \u00b6 fun box add( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub \u00b6 fun box sub( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul \u00b6 fun box mul( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div \u00b6 fun box div( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem \u00b6 fun box divrem( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem \u00b6 fun box rem( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg \u00b6 fun box neg() : ISize val Returns \u00b6 ISize val eq \u00b6 fun box eq( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val le \u00b6 fun box le( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ISize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ISize val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive ISize"},{"location":"builtin-ISize/#isize","text":"[Source] primitive val ISize is SignedInteger[ISize val, USize val] val","title":"ISize"},{"location":"builtin-ISize/#implements","text":"SignedInteger [ ISize val, USize val] val","title":"Implements"},{"location":"builtin-ISize/#constructors","text":"","title":"Constructors"},{"location":"builtin-ISize/#create","text":"[Source] new val create( value: ISize val) : ISize val^","title":"create"},{"location":"builtin-ISize/#parameters","text":"value: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ISize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ISize/#returns_1","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#min_value","text":"[Source] new val min_value() : ISize val^","title":"min_value"},{"location":"builtin-ISize/#returns_2","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#max_value","text":"[Source] new val max_value() : ISize val^","title":"max_value"},{"location":"builtin-ISize/#returns_3","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ISize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-ISize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bit_reverse","text":"[Source] fun box bit_reverse() : ISize val","title":"bit_reverse"},{"location":"builtin-ISize/#returns_5","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#bswap","text":"[Source] fun box bswap() : ISize val","title":"bswap"},{"location":"builtin-ISize/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-ISize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-ISize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-ISize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz_unsafe","text":"[Source] fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-ISize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-ISize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-ISize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ISize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#min","text":"[Source] fun box min( y: ISize val) : ISize val","title":"min"},{"location":"builtin-ISize/#parameters_2","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_14","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#max","text":"[Source] fun box max( y: ISize val) : ISize val","title":"max"},{"location":"builtin-ISize/#parameters_3","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_15","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld","text":"[Source] fun box fld( y: ISize val) : ISize val","title":"fld"},{"location":"builtin-ISize/#parameters_4","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_16","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ISize val) : ISize val","title":"fld_unsafe"},{"location":"builtin-ISize/#parameters_5","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_17","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod","text":"[Source] fun box mod( y: ISize val) : ISize val","title":"mod"},{"location":"builtin-ISize/#parameters_6","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_18","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ISize val) : ISize val","title":"mod_unsafe"},{"location":"builtin-ISize/#parameters_7","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_19","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#addc","text":"[Source] fun box addc( y: ISize val) : (ISize val , Bool val)","title":"addc"},{"location":"builtin-ISize/#parameters_8","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_20","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#subc","text":"[Source] fun box subc( y: ISize val) : (ISize val , Bool val)","title":"subc"},{"location":"builtin-ISize/#parameters_9","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_21","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#mulc","text":"[Source] fun box mulc( y: ISize val) : (ISize val , Bool val)","title":"mulc"},{"location":"builtin-ISize/#parameters_10","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_22","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#divc","text":"[Source] fun box divc( y: ISize val) : (ISize val , Bool val)","title":"divc"},{"location":"builtin-ISize/#parameters_11","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_23","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#remc","text":"[Source] fun box remc( y: ISize val) : (ISize val , Bool val)","title":"remc"},{"location":"builtin-ISize/#parameters_12","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_24","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#fldc","text":"[Source] fun box fldc( y: ISize val) : (ISize val , Bool val)","title":"fldc"},{"location":"builtin-ISize/#parameters_13","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_25","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#modc","text":"[Source] fun box modc( y: ISize val) : (ISize val , Bool val)","title":"modc"},{"location":"builtin-ISize/#parameters_14","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_26","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#add_partial","text":"[Source] fun box add_partial( y: ISize val) : ISize val ?","title":"add_partial"},{"location":"builtin-ISize/#parameters_15","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_27","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#sub_partial","text":"[Source] fun box sub_partial( y: ISize val) : ISize val ?","title":"sub_partial"},{"location":"builtin-ISize/#parameters_16","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_28","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mul_partial","text":"[Source] fun box mul_partial( y: ISize val) : ISize val ?","title":"mul_partial"},{"location":"builtin-ISize/#parameters_17","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_29","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#div_partial","text":"[Source] fun box div_partial( y: ISize val) : ISize val ?","title":"div_partial"},{"location":"builtin-ISize/#parameters_18","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_30","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#rem_partial","text":"[Source] fun box rem_partial( y: ISize val) : ISize val ?","title":"rem_partial"},{"location":"builtin-ISize/#parameters_19","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_31","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#divrem_partial","text":"[Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ?","title":"divrem_partial"},{"location":"builtin-ISize/#parameters_20","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_32","text":"( ISize val , ISize val) ?","title":"Returns"},{"location":"builtin-ISize/#fld_partial","text":"[Source] fun box fld_partial( y: ISize val) : ISize val ?","title":"fld_partial"},{"location":"builtin-ISize/#parameters_21","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mod_partial","text":"[Source] fun box mod_partial( y: ISize val) : ISize val ?","title":"mod_partial"},{"location":"builtin-ISize/#parameters_22","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#shl","text":"fun box shl( y: USize val) : ISize val","title":"shl"},{"location":"builtin-ISize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_35","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr","text":"fun box shr( y: USize val) : ISize val","title":"shr"},{"location":"builtin-ISize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_36","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : ISize val","title":"shl_unsafe"},{"location":"builtin-ISize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_37","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : ISize val","title":"shr_unsafe"},{"location":"builtin-ISize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_38","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ISize/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-ISize/#add_unsafe","text":"fun box add_unsafe( y: ISize val) : ISize val","title":"add_unsafe"},{"location":"builtin-ISize/#parameters_27","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_40","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub_unsafe","text":"fun box sub_unsafe( y: ISize val) : ISize val","title":"sub_unsafe"},{"location":"builtin-ISize/#parameters_28","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_41","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul_unsafe","text":"fun box mul_unsafe( y: ISize val) : ISize val","title":"mul_unsafe"},{"location":"builtin-ISize/#parameters_29","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_42","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div_unsafe","text":"fun box div_unsafe( y: ISize val) : ISize val","title":"div_unsafe"},{"location":"builtin-ISize/#parameters_30","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_43","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem_unsafe","text":"fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val)","title":"divrem_unsafe"},{"location":"builtin-ISize/#parameters_31","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_44","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem_unsafe","text":"fun box rem_unsafe( y: ISize val) : ISize val","title":"rem_unsafe"},{"location":"builtin-ISize/#parameters_32","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_45","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg_unsafe","text":"fun box neg_unsafe() : ISize val","title":"neg_unsafe"},{"location":"builtin-ISize/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_and","text":"fun box op_and( y: ISize val) : ISize val","title":"op_and"},{"location":"builtin-ISize/#parameters_33","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_47","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_or","text":"fun box op_or( y: ISize val) : ISize val","title":"op_or"},{"location":"builtin-ISize/#parameters_34","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_48","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_xor","text":"fun box op_xor( y: ISize val) : ISize val","title":"op_xor"},{"location":"builtin-ISize/#parameters_35","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_49","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_not","text":"fun box op_not() : ISize val","title":"op_not"},{"location":"builtin-ISize/#returns_50","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#add","text":"fun box add( y: ISize val) : ISize val","title":"add"},{"location":"builtin-ISize/#parameters_36","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_51","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub","text":"fun box sub( y: ISize val) : ISize val","title":"sub"},{"location":"builtin-ISize/#parameters_37","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_52","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul","text":"fun box mul( y: ISize val) : ISize val","title":"mul"},{"location":"builtin-ISize/#parameters_38","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_53","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div","text":"fun box div( y: ISize val) : ISize val","title":"div"},{"location":"builtin-ISize/#parameters_39","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_54","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem","text":"fun box divrem( y: ISize val) : (ISize val , ISize val)","title":"divrem"},{"location":"builtin-ISize/#parameters_40","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_55","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem","text":"fun box rem( y: ISize val) : ISize val","title":"rem"},{"location":"builtin-ISize/#parameters_41","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_56","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg","text":"fun box neg() : ISize val","title":"neg"},{"location":"builtin-ISize/#returns_57","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#eq","text":"fun box eq( y: ISize val) : Bool val","title":"eq"},{"location":"builtin-ISize/#parameters_42","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ne","text":"fun box ne( y: ISize val) : Bool val","title":"ne"},{"location":"builtin-ISize/#parameters_43","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#lt","text":"fun box lt( y: ISize val) : Bool val","title":"lt"},{"location":"builtin-ISize/#parameters_44","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#le","text":"fun box le( y: ISize val) : Bool val","title":"le"},{"location":"builtin-ISize/#parameters_45","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ge","text":"fun box ge( y: ISize val) : Bool val","title":"ge"},{"location":"builtin-ISize/#parameters_46","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#gt","text":"fun box gt( y: ISize val) : Bool val","title":"gt"},{"location":"builtin-ISize/#parameters_47","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-ISize/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ISize/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ISize/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ISize/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ISize/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ISize/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ISize/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ISize/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_1","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ISize/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ISize/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ISize/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ISize/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ISize/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ISize/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ISize/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ISize/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ISize/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ISize/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ISize/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ISize/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ISize/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ISize/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ISize/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ISize/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ISize/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ISize/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ISize/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ISize/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ISize/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ISize/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ISize/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ISize/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ISize/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ISize/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#compare","text":"fun box compare( that: ISize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ISize/#parameters_48","text":"that: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-InputNotify/","text":"InputNotify \u00b6 [Source] Notification for data arriving via an input stream. interface ref InputNotify Public Functions \u00b6 apply \u00b6 [Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 None val dispose \u00b6 [Source] Called when no more data will arrive on the stream. fun ref dispose() : None val Returns \u00b6 None val","title":"interface InputNotify"},{"location":"builtin-InputNotify/#inputnotify","text":"[Source] Notification for data arriving via an input stream. interface ref InputNotify","title":"InputNotify"},{"location":"builtin-InputNotify/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-InputNotify/#apply","text":"[Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val","title":"apply"},{"location":"builtin-InputNotify/#parameters","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-InputNotify/#returns","text":"None val","title":"Returns"},{"location":"builtin-InputNotify/#dispose","text":"[Source] Called when no more data will arrive on the stream. fun ref dispose() : None val","title":"dispose"},{"location":"builtin-InputNotify/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-InputStream/","text":"InputStream \u00b6 [Source] Asynchronous access to some input stream. interface tag InputStream Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose()","title":"interface InputStream"},{"location":"builtin-InputStream/#inputstream","text":"[Source] Asynchronous access to some input stream. interface tag InputStream","title":"InputStream"},{"location":"builtin-InputStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-InputStream/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-InputStream/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-InputStream/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Int/","text":"Int \u00b6 [Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Int"},{"location":"builtin-Int/#int","text":"[Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Int"},{"location":"builtin-Int/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-Integer/","text":"Integer[A: Integer [A] val] \u00b6 [Source] trait val Integer[A: Integer[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val)","title":"trait Integer"},{"location":"builtin-Integer/#integera-integera-val","text":"[Source] trait val Integer[A: Integer[A] val] is Real[A] val","title":"Integer[A: Integer[A] val]"},{"location":"builtin-Integer/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-Integer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Integer/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Integer/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Integer/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Integer/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Integer/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Integer/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Integer/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Integer/#add_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-Integer/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-Integer/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-Integer/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Integer/#div_unsafe","text":"[Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-Integer/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem_unsafe","text":"[Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-Integer/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem_unsafe","text":"[Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-Integer/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld_unsafe","text":"[Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-Integer/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod_unsafe","text":"[Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-Integer/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Integer/#add_partial","text":"[Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-Integer/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_12","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#sub_partial","text":"[Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-Integer/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mul_partial","text":"[Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-Integer/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_14","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#div_partial","text":"[Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-Integer/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_15","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#rem_partial","text":"[Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-Integer/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_16","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#divrem_partial","text":"[Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-Integer/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_17","text":"(A , A) ?","title":"Returns"},{"location":"builtin-Integer/#fld_partial","text":"[Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-Integer/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_18","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mod_partial","text":"[Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-Integer/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_19","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#neg_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-Integer/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Integer/#addc","text":"[Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-Integer/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_21","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#subc","text":"[Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-Integer/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_22","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#mulc","text":"[Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-Integer/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_23","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#divc","text":"[Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-Integer/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_24","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#remc","text":"[Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-Integer/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_25","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#fldc","text":"[Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-Integer/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_26","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#modc","text":"[Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-Integer/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_27","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-Integer/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_28","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-Integer/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_29","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-Integer/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_30","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-Integer/#returns_31","text":"A","title":"Returns"},{"location":"builtin-Integer/#bit_reverse","text":"[Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-Integer/#returns_32","text":"A","title":"Returns"},{"location":"builtin-Integer/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-Integer/#returns_33","text":"A","title":"Returns"},{"location":"builtin-Integer/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Integer/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_34","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Integer/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_35","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Integer/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_36","text":"A","title":"Returns"},{"location":"builtin-Integer/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Integer/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_37","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Integer/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_38","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Integer/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_39","text":"A","title":"Returns"},{"location":"builtin-Integer/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Integer/#returns_40","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Integer/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_41","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Integer/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_42","text":"A","title":"Returns"},{"location":"builtin-Integer/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Integer/#parameters_36","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_43","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Integer/#parameters_37","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Integer/#parameters_38","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_45","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Integer/#parameters_39","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_46","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Integer/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_47","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Integer/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_48","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Integer/#parameters_42","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_49","text":"A","title":"Returns"},{"location":"builtin-Integer/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Integer/#parameters_43","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_50","text":"A","title":"Returns"},{"location":"builtin-Integer/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Integer/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Integer/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Integer/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-Integer/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Integer/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Integer/#returns_55","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Integer/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Integer/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Integer/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Integer/#returns_59","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Integer/#returns_60","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Integer/#returns_61","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Integer/#returns_62","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Integer/#returns_63","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Integer/#returns_64","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Integer/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Integer/#returns_66","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Integer/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Integer/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Integer/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Integer/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Integer/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Integer/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Integer/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Integer/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Integer/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Integer/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Integer/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Integer/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Integer/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Integer/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Integer/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Integer/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Integer/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Integer/#returns_84","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Integer/#returns_85","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Integer/#parameters_44","text":"that: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_86","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Iterator/","text":"Iterator[A: A] \u00b6 [Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness. Usage \u00b6 Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this. Implementing Iterators \u00b6 Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness. Example \u00b6 // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A] Public Functions \u00b6 has_next \u00b6 [Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ? Returns \u00b6 A ?","title":"interface Iterator"},{"location":"builtin-Iterator/#iteratora-a","text":"[Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness.","title":"Iterator[A: A]"},{"location":"builtin-Iterator/#usage","text":"Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this.","title":"Usage"},{"location":"builtin-Iterator/#implementing-iterators","text":"Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness.","title":"Implementing Iterators"},{"location":"builtin-Iterator/#example","text":"// Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A]","title":"Example"},{"location":"builtin-Iterator/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Iterator/#has_next","text":"[Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val","title":"has_next"},{"location":"builtin-Iterator/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Iterator/#next","text":"[Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ?","title":"next"},{"location":"builtin-Iterator/#returns_1","text":"A ?","title":"Returns"},{"location":"builtin-Less/","text":"Less \u00b6 [Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Less val^ Returns \u00b6 Less val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Less"},{"location":"builtin-Less/#less","text":"[Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref","title":"Less"},{"location":"builtin-Less/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Less/#constructors","text":"","title":"Constructors"},{"location":"builtin-Less/#create","text":"[Source] new val create() : Less val^","title":"create"},{"location":"builtin-Less/#returns","text":"Less val^","title":"Returns"},{"location":"builtin-Less/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Less/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Less/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Less/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Less/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Less/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Less/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-None/","text":"None \u00b6 [Source] primitive val None is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create() : None val^ Returns \u00b6 None val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val","title":"primitive None"},{"location":"builtin-None/#none","text":"[Source] primitive val None is Stringable box","title":"None"},{"location":"builtin-None/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-None/#constructors","text":"","title":"Constructors"},{"location":"builtin-None/#create","text":"[Source] new val create() : None val^","title":"create"},{"location":"builtin-None/#returns","text":"None val^","title":"Returns"},{"location":"builtin-None/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-None/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-None/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-None/#eq","text":"[Source] fun box eq( that: None val) : Bool val","title":"eq"},{"location":"builtin-None/#parameters","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-None/#ne","text":"[Source] fun box ne( that: None val) : Bool val","title":"ne"},{"location":"builtin-None/#parameters_1","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-NullablePointer/","text":"NullablePointer[A: A] \u00b6 [Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A] Constructors \u00b6 create \u00b6 [Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^ Parameters \u00b6 that: A Returns \u00b6 NullablePointer [A] ref^ none \u00b6 [Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^ Returns \u00b6 NullablePointer [A] ref^ Public Functions \u00b6 apply \u00b6 [Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ? Returns \u00b6 this->A ? is_none \u00b6 [Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val Returns \u00b6 Bool val","title":"struct NullablePointer"},{"location":"builtin-NullablePointer/#nullablepointera-a","text":"[Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A]","title":"NullablePointer[A: A]"},{"location":"builtin-NullablePointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-NullablePointer/#create","text":"[Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^","title":"create"},{"location":"builtin-NullablePointer/#parameters","text":"that: A","title":"Parameters"},{"location":"builtin-NullablePointer/#returns","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#none","text":"[Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^","title":"none"},{"location":"builtin-NullablePointer/#returns_1","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-NullablePointer/#apply","text":"[Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ?","title":"apply"},{"location":"builtin-NullablePointer/#returns_2","text":"this->A ?","title":"Returns"},{"location":"builtin-NullablePointer/#is_none","text":"[Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val","title":"is_none"},{"location":"builtin-NullablePointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Number/","text":"Number \u00b6 [Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"type Number"},{"location":"builtin-Number/#number","text":"[Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Number"},{"location":"builtin-Number/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-OutStream/","text":"OutStream \u00b6 [Source] Asnychronous access to some output stream. interface tag OutStream Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush the stream. be flush()","title":"interface OutStream"},{"location":"builtin-OutStream/#outstream","text":"[Source] Asnychronous access to some output stream. interface tag OutStream","title":"OutStream"},{"location":"builtin-OutStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-OutStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-OutStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-OutStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-OutStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-OutStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#flush","text":"[Source] Flush the stream. be flush()","title":"flush"},{"location":"builtin-Platform/","text":"Platform \u00b6 [Source] primitive val Platform Constructors \u00b6 create \u00b6 [Source] new val create() : Platform val^ Returns \u00b6 Platform val^ Public Functions \u00b6 bsd \u00b6 [Source] fun box bsd() : Bool val Returns \u00b6 Bool val freebsd \u00b6 [Source] fun box freebsd() : Bool val Returns \u00b6 Bool val dragonfly \u00b6 [Source] fun box dragonfly() : Bool val Returns \u00b6 Bool val openbsd \u00b6 [Source] fun box openbsd() : Bool val Returns \u00b6 Bool val linux \u00b6 [Source] fun box linux() : Bool val Returns \u00b6 Bool val osx \u00b6 [Source] fun box osx() : Bool val Returns \u00b6 Bool val posix \u00b6 [Source] fun box posix() : Bool val Returns \u00b6 Bool val windows \u00b6 [Source] fun box windows() : Bool val Returns \u00b6 Bool val x86 \u00b6 [Source] fun box x86() : Bool val Returns \u00b6 Bool val arm \u00b6 [Source] fun box arm() : Bool val Returns \u00b6 Bool val lp64 \u00b6 [Source] fun box lp64() : Bool val Returns \u00b6 Bool val llp64 \u00b6 [Source] fun box llp64() : Bool val Returns \u00b6 Bool val ilp32 \u00b6 [Source] fun box ilp32() : Bool val Returns \u00b6 Bool val bigendian \u00b6 [Source] fun box bigendian() : Bool val Returns \u00b6 Bool val littleendian \u00b6 [Source] fun box littleendian() : Bool val Returns \u00b6 Bool val native128 \u00b6 [Source] fun box native128() : Bool val Returns \u00b6 Bool val debug \u00b6 [Source] fun box debug() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val","title":"primitive Platform"},{"location":"builtin-Platform/#platform","text":"[Source] primitive val Platform","title":"Platform"},{"location":"builtin-Platform/#constructors","text":"","title":"Constructors"},{"location":"builtin-Platform/#create","text":"[Source] new val create() : Platform val^","title":"create"},{"location":"builtin-Platform/#returns","text":"Platform val^","title":"Returns"},{"location":"builtin-Platform/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Platform/#bsd","text":"[Source] fun box bsd() : Bool val","title":"bsd"},{"location":"builtin-Platform/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#freebsd","text":"[Source] fun box freebsd() : Bool val","title":"freebsd"},{"location":"builtin-Platform/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#dragonfly","text":"[Source] fun box dragonfly() : Bool val","title":"dragonfly"},{"location":"builtin-Platform/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#openbsd","text":"[Source] fun box openbsd() : Bool val","title":"openbsd"},{"location":"builtin-Platform/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#linux","text":"[Source] fun box linux() : Bool val","title":"linux"},{"location":"builtin-Platform/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#osx","text":"[Source] fun box osx() : Bool val","title":"osx"},{"location":"builtin-Platform/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#posix","text":"[Source] fun box posix() : Bool val","title":"posix"},{"location":"builtin-Platform/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#windows","text":"[Source] fun box windows() : Bool val","title":"windows"},{"location":"builtin-Platform/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#x86","text":"[Source] fun box x86() : Bool val","title":"x86"},{"location":"builtin-Platform/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#arm","text":"[Source] fun box arm() : Bool val","title":"arm"},{"location":"builtin-Platform/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#lp64","text":"[Source] fun box lp64() : Bool val","title":"lp64"},{"location":"builtin-Platform/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#llp64","text":"[Source] fun box llp64() : Bool val","title":"llp64"},{"location":"builtin-Platform/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ilp32","text":"[Source] fun box ilp32() : Bool val","title":"ilp32"},{"location":"builtin-Platform/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#bigendian","text":"[Source] fun box bigendian() : Bool val","title":"bigendian"},{"location":"builtin-Platform/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#littleendian","text":"[Source] fun box littleendian() : Bool val","title":"littleendian"},{"location":"builtin-Platform/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#native128","text":"[Source] fun box native128() : Bool val","title":"native128"},{"location":"builtin-Platform/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#debug","text":"[Source] fun box debug() : Bool val","title":"debug"},{"location":"builtin-Platform/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#eq","text":"[Source] fun box eq( that: Platform val) : Bool val","title":"eq"},{"location":"builtin-Platform/#parameters","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ne","text":"[Source] fun box ne( that: Platform val) : Bool val","title":"ne"},{"location":"builtin-Platform/#parameters_1","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_19","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/","text":"Pointer[A: A] \u00b6 [Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A] Constructors \u00b6 create \u00b6 [Source] A null pointer. new ref create() : Pointer[A] ref^ Returns \u00b6 Pointer [A] ref^ Public Functions \u00b6 offset \u00b6 [Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag Parameters \u00b6 n: USize val Returns \u00b6 Pointer [A] tag usize \u00b6 [Source] Convert the pointer into an integer. fun tag usize() : USize val Returns \u00b6 USize val is_null \u00b6 [Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val lt \u00b6 [Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ne \u00b6 [Source] fun tag ne( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val le \u00b6 [Source] fun tag le( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ge \u00b6 [Source] fun tag ge( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val gt \u00b6 [Source] fun tag gt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val hash \u00b6 [Source] Returns a hash of the address. fun tag hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val Returns \u00b6 U64 val","title":"struct Pointer"},{"location":"builtin-Pointer/#pointera-a","text":"[Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A]","title":"Pointer[A: A]"},{"location":"builtin-Pointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Pointer/#create","text":"[Source] A null pointer. new ref create() : Pointer[A] ref^","title":"create"},{"location":"builtin-Pointer/#returns","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Pointer/#offset","text":"[Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag","title":"offset"},{"location":"builtin-Pointer/#parameters","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_1","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Pointer/#usize","text":"[Source] Convert the pointer into an integer. fun tag usize() : USize val","title":"usize"},{"location":"builtin-Pointer/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#is_null","text":"[Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val","title":"is_null"},{"location":"builtin-Pointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#eq","text":"[Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val","title":"eq"},{"location":"builtin-Pointer/#parameters_1","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#lt","text":"[Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val","title":"lt"},{"location":"builtin-Pointer/#parameters_2","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ne","text":"[Source] fun tag ne( that: Pointer[A] tag) : Bool val","title":"ne"},{"location":"builtin-Pointer/#parameters_3","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#le","text":"[Source] fun tag le( that: Pointer[A] tag) : Bool val","title":"le"},{"location":"builtin-Pointer/#parameters_4","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ge","text":"[Source] fun tag ge( that: Pointer[A] tag) : Bool val","title":"ge"},{"location":"builtin-Pointer/#parameters_5","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#gt","text":"[Source] fun tag gt( that: Pointer[A] tag) : Bool val","title":"gt"},{"location":"builtin-Pointer/#parameters_6","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#hash","text":"[Source] Returns a hash of the address. fun tag hash() : USize val","title":"hash"},{"location":"builtin-Pointer/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#hash64","text":"[Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val","title":"hash64"},{"location":"builtin-Pointer/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-ReadElement/","text":"ReadElement[A: A] \u00b6 [Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( i: USize val) : A ? Parameters \u00b6 i: USize val Returns \u00b6 A ?","title":"interface ReadElement"},{"location":"builtin-ReadElement/#readelementa-a","text":"[Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A]","title":"ReadElement[A: A]"},{"location":"builtin-ReadElement/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadElement/#apply","text":"[Source] fun box apply( i: USize val) : A ?","title":"apply"},{"location":"builtin-ReadElement/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadElement/#returns","text":"A ?","title":"Returns"},{"location":"builtin-ReadSeq/","text":"ReadSeq[A: A] \u00b6 [Source] The readable interface of a sequence. interface box ReadSeq[A: A] Public Functions \u00b6 size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? values \u00b6 [Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface ReadSeq"},{"location":"builtin-ReadSeq/#readseqa-a","text":"[Source] The readable interface of a sequence. interface box ReadSeq[A: A]","title":"ReadSeq[A: A]"},{"location":"builtin-ReadSeq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadSeq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-ReadSeq/#returns","text":"USize val","title":"Returns"},{"location":"builtin-ReadSeq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-ReadSeq/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadSeq/#returns_1","text":"this->A ?","title":"Returns"},{"location":"builtin-ReadSeq/#values","text":"[Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-ReadSeq/#returns_2","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Real/","text":"Real[A: Real [A] val] \u00b6 [Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref Implements \u00b6 Stringable box _ArithmeticConvertible val Comparable [A] ref Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] Integer division, rounded towards zero. fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val)","title":"trait Real"},{"location":"builtin-Real/#reala-reala-val","text":"[Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref","title":"Real[A: Real[A] val]"},{"location":"builtin-Real/#implements","text":"Stringable box _ArithmeticConvertible val Comparable [A] ref","title":"Implements"},{"location":"builtin-Real/#constructors","text":"","title":"Constructors"},{"location":"builtin-Real/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Real/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Real/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Real/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Real/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Real/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Real/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Real/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Real/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Real/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Real/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Real/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Real/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Real/#div","text":"[Source] Integer division, rounded towards zero. fun box div( y: A) : A","title":"div"},{"location":"builtin-Real/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Real/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Real/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Real/#rem","text":"[Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Real/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Real/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Real/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Real/#fld","text":"[Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Real/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Real/#mod","text":"[Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Real/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_12","text":"A","title":"Returns"},{"location":"builtin-Real/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Real/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Real/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Real/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Real/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Real/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Real/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Real/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_19","text":"A","title":"Returns"},{"location":"builtin-Real/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Real/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Real/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Real/#returns_21","text":"USize val","title":"Returns"},{"location":"builtin-Real/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Real/#returns_22","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Real/#returns_23","text":"String iso^","title":"Returns"},{"location":"builtin-Real/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Real/#returns_24","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Real/#returns_25","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Real/#returns_26","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Real/#returns_27","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Real/#returns_28","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Real/#returns_29","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Real/#returns_30","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Real/#returns_31","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Real/#returns_32","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Real/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Real/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Real/#returns_35","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Real/#returns_36","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Real/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Real/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Real/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Real/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Real/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Real/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Real/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Real/#returns_44","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Real/#returns_45","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Real/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Real/#returns_47","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Real/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Real/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Real/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Real/#returns_51","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Real/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Real/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Real/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Real/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Real/#parameters_18","text":"that: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_56","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-RuntimeOptions/","text":"RuntimeOptions \u00b6 [Source] Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your Main actor: fun @runtime_override_defaults(rto: RuntimeOptions) => and then overriding the fields of rto (the RuntimeOptions instance) as needed. NOTE: Command line arguments still any values set via @runtime_override_defaults . The following example overrides the --ponyhelp argument to default it to true instead of false causing the compiled program to always display the Pony runtime help: actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true struct ref RuntimeOptions Constructors \u00b6 create \u00b6 [Source] new iso create() : RuntimeOptions iso^ Returns \u00b6 RuntimeOptions iso^ Public fields \u00b6 var ponymaxthreads: U32 val \u00b6 [Source] Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available. var ponyminthreads: U32 val \u00b6 [Source] Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available. var ponynoscale: Bool val \u00b6 [Source] Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads. var ponysuspendthreshold: U32 val \u00b6 [Source] Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms. var ponycdinterval: U32 val \u00b6 [Source] Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms. var ponygcinitial: USize val \u00b6 [Source] Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14. var ponygcfactor: F64 val \u00b6 [Source] After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0. var ponynoyield: Bool val \u00b6 [Source] Do not yield the CPU when no work is available. var ponynoblock: Bool val \u00b6 [Source] Do not send block messages to the cycle detector. var ponypin: Bool val \u00b6 [Source] Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if --ponypinasio is set. var ponypinasio: Bool val \u00b6 [Source] Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires --ponypin to be set to have any effect. var ponyversion: Bool val \u00b6 [Source] Print the version of the compiler and exit. var ponyhelp: Bool val \u00b6 [Source] Print the runtime usage options and exit.","title":"struct RuntimeOptions"},{"location":"builtin-RuntimeOptions/#runtimeoptions","text":"[Source] Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your Main actor: fun @runtime_override_defaults(rto: RuntimeOptions) => and then overriding the fields of rto (the RuntimeOptions instance) as needed. NOTE: Command line arguments still any values set via @runtime_override_defaults . The following example overrides the --ponyhelp argument to default it to true instead of false causing the compiled program to always display the Pony runtime help: actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true struct ref RuntimeOptions","title":"RuntimeOptions"},{"location":"builtin-RuntimeOptions/#constructors","text":"","title":"Constructors"},{"location":"builtin-RuntimeOptions/#create","text":"[Source] new iso create() : RuntimeOptions iso^","title":"create"},{"location":"builtin-RuntimeOptions/#returns","text":"RuntimeOptions iso^","title":"Returns"},{"location":"builtin-RuntimeOptions/#public-fields","text":"","title":"Public fields"},{"location":"builtin-RuntimeOptions/#var-ponymaxthreads-u32-val","text":"[Source] Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available.","title":"var ponymaxthreads: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponyminthreads-u32-val","text":"[Source] Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available.","title":"var ponyminthreads: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponynoscale-bool-val","text":"[Source] Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads.","title":"var ponynoscale: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponysuspendthreshold-u32-val","text":"[Source] Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms.","title":"var ponysuspendthreshold: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponycdinterval-u32-val","text":"[Source] Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms.","title":"var ponycdinterval: U32 val"},{"location":"builtin-RuntimeOptions/#var-ponygcinitial-usize-val","text":"[Source] Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14.","title":"var ponygcinitial: USize val"},{"location":"builtin-RuntimeOptions/#var-ponygcfactor-f64-val","text":"[Source] After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0.","title":"var ponygcfactor: F64 val"},{"location":"builtin-RuntimeOptions/#var-ponynoyield-bool-val","text":"[Source] Do not yield the CPU when no work is available.","title":"var ponynoyield: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponynoblock-bool-val","text":"[Source] Do not send block messages to the cycle detector.","title":"var ponynoblock: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponypin-bool-val","text":"[Source] Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if --ponypinasio is set.","title":"var ponypin: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponypinasio-bool-val","text":"[Source] Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires --ponypin to be set to have any effect.","title":"var ponypinasio: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponyversion-bool-val","text":"[Source] Print the version of the compiler and exit.","title":"var ponyversion: Bool val"},{"location":"builtin-RuntimeOptions/#var-ponyhelp-bool-val","text":"[Source] Print the runtime usage options and exit.","title":"var ponyhelp: Bool val"},{"location":"builtin-Seq/","text":"Seq[A: A] \u00b6 [Source] A sequence of elements. interface ref Seq[A: A] Constructors \u00b6 create \u00b6 [Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Seq [A] ref^ Public Functions \u00b6 reserve \u00b6 [Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update \u00b6 [Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? clear \u00b6 [Source] Removes all elements from the sequence. fun ref clear() : None val Returns \u00b6 None val push \u00b6 [Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Removes an element from the end of the sequence. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val truncate \u00b6 [Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val values \u00b6 [Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface Seq"},{"location":"builtin-Seq/#seqa-a","text":"[Source] A sequence of elements. interface ref Seq[A: A]","title":"Seq[A: A]"},{"location":"builtin-Seq/#constructors","text":"","title":"Constructors"},{"location":"builtin-Seq/#create","text":"[Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^","title":"create"},{"location":"builtin-Seq/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Seq/#returns","text":"Seq [A] ref^","title":"Returns"},{"location":"builtin-Seq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Seq/#reserve","text":"[Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Seq/#parameters_1","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Seq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-Seq/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Seq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Seq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_3","text":"this->A ?","title":"Returns"},{"location":"builtin-Seq/#update","text":"[Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Seq/#parameters_3","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_4","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#clear","text":"[Source] Removes all elements from the sequence. fun ref clear() : None val","title":"clear"},{"location":"builtin-Seq/#returns_5","text":"None val","title":"Returns"},{"location":"builtin-Seq/#push","text":"[Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Seq/#parameters_4","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Seq/#pop","text":"[Source] Removes an element from the end of the sequence. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Seq/#returns_7","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#unshift","text":"[Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Seq/#parameters_5","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Seq/#shift","text":"[Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Seq/#returns_9","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#append","text":"[Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Seq/#parameters_6","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_10","text":"None val","title":"Returns"},{"location":"builtin-Seq/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Seq/#parameters_7","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_11","text":"None val","title":"Returns"},{"location":"builtin-Seq/#truncate","text":"[Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Seq/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_12","text":"None val","title":"Returns"},{"location":"builtin-Seq/#values","text":"[Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-Seq/#returns_13","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Signed/","text":"Signed \u00b6 [Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"type Signed"},{"location":"builtin-Signed/#signed","text":"[Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Signed"},{"location":"builtin-Signed/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Type Alias For"},{"location":"builtin-SignedInteger/","text":"SignedInteger[A: SignedInteger [A, B] val, B: UnsignedInteger [B] val] \u00b6 [Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : B Returns \u00b6 B shl \u00b6 [Source] fun box shl( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : B Returns \u00b6 B clz \u00b6 [Source] fun box clz() : B Returns \u00b6 B ctz \u00b6 [Source] fun box ctz() : B Returns \u00b6 B clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B Returns \u00b6 B ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B Returns \u00b6 B bitwidth \u00b6 [Source] fun box bitwidth() : B Returns \u00b6 B bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val)","title":"trait SignedInteger"},{"location":"builtin-SignedInteger/#signedintegera-signedintegera-b-val-b-unsignedintegerb-val","text":"[Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]"},{"location":"builtin-SignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-SignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-SignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-SignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-SignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-SignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-SignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SignedInteger/#abs","text":"[Source] fun box abs() : B","title":"abs"},{"location":"builtin-SignedInteger/#returns_4","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#shl","text":"[Source] fun box shl( y: B) : A","title":"shl"},{"location":"builtin-SignedInteger/#parameters_2","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr","text":"[Source] fun box shr( y: B) : A","title":"shr"},{"location":"builtin-SignedInteger/#parameters_3","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A","title":"shl_unsafe"},{"location":"builtin-SignedInteger/#parameters_4","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A","title":"shr_unsafe"},{"location":"builtin-SignedInteger/#parameters_5","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#popcount","text":"[Source] fun box popcount() : B","title":"popcount"},{"location":"builtin-SignedInteger/#returns_9","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz","text":"[Source] fun box clz() : B","title":"clz"},{"location":"builtin-SignedInteger/#returns_10","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz","text":"[Source] fun box ctz() : B","title":"ctz"},{"location":"builtin-SignedInteger/#returns_11","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B","title":"clz_unsafe"},{"location":"builtin-SignedInteger/#returns_12","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B","title":"ctz_unsafe"},{"location":"builtin-SignedInteger/#returns_13","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : B","title":"bitwidth"},{"location":"builtin-SignedInteger/#returns_14","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-SignedInteger/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-SignedInteger/#returns_16","text":"String iso^","title":"Returns"},{"location":"builtin-SignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-SignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-SignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-SignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-SignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-SignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_21","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-SignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-SignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-SignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-SignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-SignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-SignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-SignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_28","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-SignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_29","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-SignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_30","text":"(A , A) ?","title":"Returns"},{"location":"builtin-SignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-SignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_31","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-SignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_32","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-SignedInteger/#returns_33","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-SignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-SignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_35","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-SignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_36","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-SignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_37","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-SignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_38","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-SignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_39","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-SignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-SignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-SignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-SignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-SignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-SignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-SignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-SignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-SignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-SignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-SignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-SignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_51","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-SignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-SignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-SignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-SignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_55","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-SignedInteger/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-SignedInteger/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-SignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-SignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-SignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-SignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-SignedInteger/#parameters_46","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_62","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-SignedInteger/#parameters_47","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_63","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-SignedInteger/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-SignedInteger/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-SignedInteger/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-SignedInteger/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-SignedInteger/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-SignedInteger/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-SignedInteger/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-SignedInteger/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-SignedInteger/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-SignedInteger/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-SignedInteger/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-SignedInteger/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-SignedInteger/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-SignedInteger/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-SignedInteger/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-SignedInteger/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-SignedInteger/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-SignedInteger/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-SignedInteger/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-SignedInteger/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-SignedInteger/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-SignedInteger/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-SignedInteger/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-SignedInteger/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-SignedInteger/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-SignedInteger/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-SignedInteger/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-SignedInteger/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-SignedInteger/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-SignedInteger/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-SignedInteger/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-SignedInteger/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-SignedInteger/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-SignedInteger/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-SignedInteger/#parameters_48","text":"that: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-SourceLoc/","text":"SourceLoc \u00b6 [Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc Public Functions \u00b6 file \u00b6 [Source] Name and path of source file. fun box file() : String val Returns \u00b6 String val type_name \u00b6 [Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val Returns \u00b6 String val method_name \u00b6 [Source] Name of containing method. fun box method_name() : String val Returns \u00b6 String val line \u00b6 [Source] Line number within file. Line numbers start at 1. fun box line() : USize val Returns \u00b6 USize val pos \u00b6 [Source] Character position on line. Character positions start at 1. fun box pos() : USize val Returns \u00b6 USize val","title":"interface SourceLoc"},{"location":"builtin-SourceLoc/#sourceloc","text":"[Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc","title":"SourceLoc"},{"location":"builtin-SourceLoc/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SourceLoc/#file","text":"[Source] Name and path of source file. fun box file() : String val","title":"file"},{"location":"builtin-SourceLoc/#returns","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#type_name","text":"[Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val","title":"type_name"},{"location":"builtin-SourceLoc/#returns_1","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#method_name","text":"[Source] Name of containing method. fun box method_name() : String val","title":"method_name"},{"location":"builtin-SourceLoc/#returns_2","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#line","text":"[Source] Line number within file. Line numbers start at 1. fun box line() : USize val","title":"line"},{"location":"builtin-SourceLoc/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-SourceLoc/#pos","text":"[Source] Character position on line. Character positions start at 1. fun box pos() : USize val","title":"pos"},{"location":"builtin-SourceLoc/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-StdStream/","text":"StdStream \u00b6 [Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush any data out to the os (ignoring failures). be flush()","title":"actor StdStream"},{"location":"builtin-StdStream/#stdstream","text":"[Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream","title":"StdStream"},{"location":"builtin-StdStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-StdStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-StdStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-StdStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-StdStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-StdStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#flush","text":"[Source] Flush any data out to the os (ignoring failures). be flush()","title":"flush"},{"location":"builtin-Stdin/","text":"Stdin \u00b6 [Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose()","title":"actor Stdin"},{"location":"builtin-Stdin/#stdin","text":"[Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin","title":"Stdin"},{"location":"builtin-Stdin/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-Stdin/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-Stdin/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-Stdin/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-String/","text":"String \u00b6 [Source] A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") ? // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") ? // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box Implements \u00b6 Seq [ U8 val] ref Comparable [ String box] ref Stringable box Constructors \u00b6 create \u00b6 [Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 String ref^ from_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^ Parameters \u00b6 data: Array [ U8 val] val Returns \u00b6 String val^ from_iso_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^ Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 String iso^ from_cpointer \u00b6 [Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0 Returns \u00b6 String ref^ from_cstring \u00b6 [Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref Returns \u00b6 String ref^ copy_cpointer \u00b6 [Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box len: USize val Returns \u00b6 String ref^ copy_cstring \u00b6 [Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box Returns \u00b6 String ref^ from_utf32 \u00b6 [Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^ Parameters \u00b6 value: U32 val Returns \u00b6 String ref^ Public Functions \u00b6 push_utf32 \u00b6 [Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val cpointer \u00b6 [Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [ U8 val] tag cstring \u00b6 [Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag Returns \u00b6 Pointer [ U8 val] tag array \u00b6 [Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val iso_array \u00b6 [Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^ size \u00b6 [Source] Returns the length of the string data in bytes. fun box size() : USize val Returns \u00b6 USize val codepoints \u00b6 [Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val Parameters \u00b6 from: ISize val = 0 to: ISize val = call Returns \u00b6 USize val space \u00b6 [Source] Returns the space available for data, not including the null terminator. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val Returns \u00b6 None val recalc \u00b6 [Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val Returns \u00b6 None val truncate \u00b6 [Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 String val chop \u00b6 [Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( String iso^ , String iso^) unchop \u00b6 [Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^) Parameters \u00b6 b: String iso Returns \u00b6 (( String iso^ , String iso^) | String iso^) is_null_terminated \u00b6 [Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val Returns \u00b6 Bool val utf32 \u00b6 [Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ? Parameters \u00b6 offset: ISize val Returns \u00b6 ( U32 val , U8 val) ? apply \u00b6 [Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ? Parameters \u00b6 i: USize val Returns \u00b6 U8 val ? update \u00b6 [Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ? Parameters \u00b6 i: USize val value: U8 val Returns \u00b6 U8 val ? at_offset \u00b6 [Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ? Parameters \u00b6 offset: ISize val Returns \u00b6 U8 val ? update_offset \u00b6 [Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 U8 val ? clone \u00b6 [Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^ Returns \u00b6 String iso^ repeat_str \u00b6 [Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^ Parameters \u00b6 num: USize val = 1 sep: String val = \"\" Returns \u00b6 String iso^ mul \u00b6 [Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^ Parameters \u00b6 num: USize val Returns \u00b6 String iso^ find \u00b6 [Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 ISize val ? rfind \u00b6 [Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = call nth: USize val = 0 Returns \u00b6 ISize val ? contains \u00b6 [Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 Bool val count \u00b6 [Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 USize val at \u00b6 [Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 Bool val delete \u00b6 [Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val Parameters \u00b6 offset: ISize val len: USize val = 1 Returns \u00b6 None val substring \u00b6 [Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ lower \u00b6 [Source] Returns a lower case version of the string. fun box lower() : String iso^ Returns \u00b6 String iso^ lower_in_place \u00b6 [Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val Returns \u00b6 None val upper \u00b6 [Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^ Returns \u00b6 String iso^ upper_in_place \u00b6 [Source] Transforms the string to upper case. fun ref upper_in_place() : None val Returns \u00b6 None val reverse \u00b6 [Source] Returns a reversed version of the string. fun box reverse() : String iso^ Returns \u00b6 String iso^ reverse_in_place \u00b6 [Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val Returns \u00b6 None val push \u00b6 [Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val pop \u00b6 [Source] Remove a byte from the end of the string. fun ref pop() : U8 val ? Returns \u00b6 U8 val ? unshift \u00b6 [Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val shift \u00b6 [Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ? Returns \u00b6 U8 val ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val clear \u00b6 [Source] Truncate the string to zero length. fun ref clear() : None val Returns \u00b6 None val insert \u00b6 [Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^ Parameters \u00b6 offset: ISize val that: String val Returns \u00b6 String iso^ insert_in_place \u00b6 [Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val Parameters \u00b6 offset: ISize val that: String box Returns \u00b6 None val insert_byte \u00b6 [Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 None val cut \u00b6 [Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ cut_in_place \u00b6 [Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 None val remove \u00b6 [Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val Parameters \u00b6 s: String box Returns \u00b6 USize val replace \u00b6 [Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val Parameters \u00b6 from: String box to: String box n: USize val = 0 Returns \u00b6 USize val split_by \u00b6 [Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^ Parameters \u00b6 delim: String val n: USize val = call Returns \u00b6 Array [ String val] iso^ split \u00b6 [Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^ Parameters \u00b6 delim: String val = \" \" n: USize val = 0 Returns \u00b6 Array [ String val] iso^ strip \u00b6 [Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val rstrip \u00b6 [Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val lstrip \u00b6 [Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val add \u00b6 [Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String iso^ Parameters \u00b6 that: String box Returns \u00b6 String iso^ join \u00b6 [Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^ Parameters \u00b6 data: Iterator [ Stringable box] ref Returns \u00b6 String iso^ compare \u00b6 [Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box Returns \u00b6 ( Less val | Equal val | Greater val) compare_sub \u00b6 [Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val offset_to_index \u00b6 [Source] fun box offset_to_index( i: ISize val) : USize val Parameters \u00b6 i: ISize val Returns \u00b6 USize val bool \u00b6 [Source] fun box bool() : Bool val ? Returns \u00b6 Bool val ? i8 \u00b6 [Source] fun box i8( base: U8 val = 0) : I8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I8 val ? i16 \u00b6 [Source] fun box i16( base: U8 val = 0) : I16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I16 val ? i32 \u00b6 [Source] fun box i32( base: U8 val = 0) : I32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I32 val ? i64 \u00b6 [Source] fun box i64( base: U8 val = 0) : I64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I64 val ? i128 \u00b6 [Source] fun box i128( base: U8 val = 0) : I128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I128 val ? ilong \u00b6 [Source] fun box ilong( base: U8 val = 0) : ILong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ILong val ? isize \u00b6 [Source] fun box isize( base: U8 val = 0) : ISize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ISize val ? u8 \u00b6 [Source] fun box u8( base: U8 val = 0) : U8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U8 val ? u16 \u00b6 [Source] fun box u16( base: U8 val = 0) : U16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U16 val ? u32 \u00b6 [Source] fun box u32( base: U8 val = 0) : U32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U32 val ? u64 \u00b6 [Source] fun box u64( base: U8 val = 0) : U64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U64 val ? u128 \u00b6 [Source] fun box u128( base: U8 val = 0) : U128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U128 val ? ulong \u00b6 [Source] fun box ulong( base: U8 val = 0) : ULong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ULong val ? usize \u00b6 [Source] fun box usize( base: U8 val = 0) : USize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 USize val ? read_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ? Parameters \u00b6 offset: ISize val = 0 base: U8 val = 0 Returns \u00b6 (A , USize val) ? f32 \u00b6 [Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F32 val ? f64 \u00b6 [Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F64 val ? hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ values \u00b6 [Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^ Returns \u00b6 StringBytes ref^ runes \u00b6 [Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^ Returns \u00b6 StringRunes ref^ ge \u00b6 fun box ge( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val gt \u00b6 fun box gt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val ne \u00b6 fun box ne( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val","title":"class String"},{"location":"builtin-String/#string","text":"[Source] A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") ? // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") ? // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box","title":"String"},{"location":"builtin-String/#implements","text":"Seq [ U8 val] ref Comparable [ String box] ref Stringable box","title":"Implements"},{"location":"builtin-String/#constructors","text":"","title":"Constructors"},{"location":"builtin-String/#create","text":"[Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^","title":"create"},{"location":"builtin-String/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_array","text":"[Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^","title":"from_array"},{"location":"builtin-String/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"builtin-String/#returns_1","text":"String val^","title":"Returns"},{"location":"builtin-String/#from_iso_array","text":"[Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^","title":"from_iso_array"},{"location":"builtin-String/#parameters_2","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-String/#returns_2","text":"String iso^","title":"Returns"},{"location":"builtin-String/#from_cpointer","text":"[Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^","title":"from_cpointer"},{"location":"builtin-String/#parameters_3","text":"str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_3","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_cstring","text":"[Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^","title":"from_cstring"},{"location":"builtin-String/#parameters_4","text":"str: Pointer [ U8 val] ref","title":"Parameters"},{"location":"builtin-String/#returns_4","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cpointer","text":"[Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^","title":"copy_cpointer"},{"location":"builtin-String/#parameters_5","text":"str: Pointer [ U8 val] box len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_5","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cstring","text":"[Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^","title":"copy_cstring"},{"location":"builtin-String/#parameters_6","text":"str: Pointer [ U8 val] box","title":"Parameters"},{"location":"builtin-String/#returns_6","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_utf32","text":"[Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^","title":"from_utf32"},{"location":"builtin-String/#parameters_7","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_7","text":"String ref^","title":"Returns"},{"location":"builtin-String/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-String/#push_utf32","text":"[Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val","title":"push_utf32"},{"location":"builtin-String/#parameters_8","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-String/#cpointer","text":"[Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag","title":"cpointer"},{"location":"builtin-String/#parameters_9","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_9","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#cstring","text":"[Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag","title":"cstring"},{"location":"builtin-String/#returns_10","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#array","text":"[Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val","title":"array"},{"location":"builtin-String/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"builtin-String/#iso_array","text":"[Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^","title":"iso_array"},{"location":"builtin-String/#returns_12","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"builtin-String/#size","text":"[Source] Returns the length of the string data in bytes. fun box size() : USize val","title":"size"},{"location":"builtin-String/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-String/#codepoints","text":"[Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val","title":"codepoints"},{"location":"builtin-String/#parameters_10","text":"from: ISize val = 0 to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-String/#space","text":"[Source] Returns the space available for data, not including the null terminator. fun box space() : USize val","title":"space"},{"location":"builtin-String/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-String/#reserve","text":"[Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-String/#parameters_11","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_16","text":"None val","title":"Returns"},{"location":"builtin-String/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val","title":"compact"},{"location":"builtin-String/#returns_17","text":"None val","title":"Returns"},{"location":"builtin-String/#recalc","text":"[Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val","title":"recalc"},{"location":"builtin-String/#returns_18","text":"None val","title":"Returns"},{"location":"builtin-String/#truncate","text":"[Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-String/#parameters_12","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_19","text":"None val","title":"Returns"},{"location":"builtin-String/#trim_in_place","text":"[Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-String/#parameters_13","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_20","text":"None val","title":"Returns"},{"location":"builtin-String/#trim","text":"[Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val","title":"trim"},{"location":"builtin-String/#parameters_14","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_21","text":"String val","title":"Returns"},{"location":"builtin-String/#chop","text":"[Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^)","title":"chop"},{"location":"builtin-String/#parameters_15","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-String/#returns_22","text":"( String iso^ , String iso^)","title":"Returns"},{"location":"builtin-String/#unchop","text":"[Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^)","title":"unchop"},{"location":"builtin-String/#parameters_16","text":"b: String iso","title":"Parameters"},{"location":"builtin-String/#returns_23","text":"(( String iso^ , String iso^) | String iso^)","title":"Returns"},{"location":"builtin-String/#is_null_terminated","text":"[Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val","title":"is_null_terminated"},{"location":"builtin-String/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-String/#utf32","text":"[Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ?","title":"utf32"},{"location":"builtin-String/#parameters_17","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_25","text":"( U32 val , U8 val) ?","title":"Returns"},{"location":"builtin-String/#apply","text":"[Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ?","title":"apply"},{"location":"builtin-String/#parameters_18","text":"i: USize val","title":"Parameters"},{"location":"builtin-String/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update","text":"[Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ?","title":"update"},{"location":"builtin-String/#parameters_19","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_27","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#at_offset","text":"[Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ?","title":"at_offset"},{"location":"builtin-String/#parameters_20","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_28","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update_offset","text":"[Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ?","title":"update_offset"},{"location":"builtin-String/#parameters_21","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_29","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#clone","text":"[Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^","title":"clone"},{"location":"builtin-String/#returns_30","text":"String iso^","title":"Returns"},{"location":"builtin-String/#repeat_str","text":"[Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^","title":"repeat_str"},{"location":"builtin-String/#parameters_22","text":"num: USize val = 1 sep: String val = \"\"","title":"Parameters"},{"location":"builtin-String/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-String/#mul","text":"[Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^","title":"mul"},{"location":"builtin-String/#parameters_23","text":"num: USize val","title":"Parameters"},{"location":"builtin-String/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-String/#find","text":"[Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ?","title":"find"},{"location":"builtin-String/#parameters_24","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#rfind","text":"[Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ?","title":"rfind"},{"location":"builtin-String/#parameters_25","text":"s: String box offset: ISize val = call nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#contains","text":"[Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val","title":"contains"},{"location":"builtin-String/#parameters_26","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-String/#count","text":"[Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val","title":"count"},{"location":"builtin-String/#parameters_27","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_36","text":"USize val","title":"Returns"},{"location":"builtin-String/#at","text":"[Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val","title":"at"},{"location":"builtin-String/#parameters_28","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_37","text":"Bool val","title":"Returns"},{"location":"builtin-String/#delete","text":"[Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val","title":"delete"},{"location":"builtin-String/#parameters_29","text":"offset: ISize val len: USize val = 1","title":"Parameters"},{"location":"builtin-String/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-String/#substring","text":"[Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^","title":"substring"},{"location":"builtin-String/#parameters_30","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower","text":"[Source] Returns a lower case version of the string. fun box lower() : String iso^","title":"lower"},{"location":"builtin-String/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower_in_place","text":"[Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val","title":"lower_in_place"},{"location":"builtin-String/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-String/#upper","text":"[Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^","title":"upper"},{"location":"builtin-String/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-String/#upper_in_place","text":"[Source] Transforms the string to upper case. fun ref upper_in_place() : None val","title":"upper_in_place"},{"location":"builtin-String/#returns_43","text":"None val","title":"Returns"},{"location":"builtin-String/#reverse","text":"[Source] Returns a reversed version of the string. fun box reverse() : String iso^","title":"reverse"},{"location":"builtin-String/#returns_44","text":"String iso^","title":"Returns"},{"location":"builtin-String/#reverse_in_place","text":"[Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-String/#returns_45","text":"None val","title":"Returns"},{"location":"builtin-String/#push","text":"[Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val","title":"push"},{"location":"builtin-String/#parameters_31","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_46","text":"None val","title":"Returns"},{"location":"builtin-String/#pop","text":"[Source] Remove a byte from the end of the string. fun ref pop() : U8 val ?","title":"pop"},{"location":"builtin-String/#returns_47","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#unshift","text":"[Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val","title":"unshift"},{"location":"builtin-String/#parameters_32","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_48","text":"None val","title":"Returns"},{"location":"builtin-String/#shift","text":"[Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ?","title":"shift"},{"location":"builtin-String/#returns_49","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-String/#parameters_33","text":"seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-String/#concat","text":"[Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-String/#parameters_34","text":"iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_51","text":"None val","title":"Returns"},{"location":"builtin-String/#clear","text":"[Source] Truncate the string to zero length. fun ref clear() : None val","title":"clear"},{"location":"builtin-String/#returns_52","text":"None val","title":"Returns"},{"location":"builtin-String/#insert","text":"[Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^","title":"insert"},{"location":"builtin-String/#parameters_35","text":"offset: ISize val that: String val","title":"Parameters"},{"location":"builtin-String/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-String/#insert_in_place","text":"[Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val","title":"insert_in_place"},{"location":"builtin-String/#parameters_36","text":"offset: ISize val that: String box","title":"Parameters"},{"location":"builtin-String/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-String/#insert_byte","text":"[Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val","title":"insert_byte"},{"location":"builtin-String/#parameters_37","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_55","text":"None val","title":"Returns"},{"location":"builtin-String/#cut","text":"[Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^","title":"cut"},{"location":"builtin-String/#parameters_38","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_56","text":"String iso^","title":"Returns"},{"location":"builtin-String/#cut_in_place","text":"[Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val","title":"cut_in_place"},{"location":"builtin-String/#parameters_39","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_57","text":"None val","title":"Returns"},{"location":"builtin-String/#remove","text":"[Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val","title":"remove"},{"location":"builtin-String/#parameters_40","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-String/#replace","text":"[Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val","title":"replace"},{"location":"builtin-String/#parameters_41","text":"from: String box to: String box n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-String/#split_by","text":"[Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^","title":"split_by"},{"location":"builtin-String/#parameters_42","text":"delim: String val n: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_60","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#split","text":"[Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^","title":"split"},{"location":"builtin-String/#parameters_43","text":"delim: String val = \" \" n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_61","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#strip","text":"[Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val","title":"strip"},{"location":"builtin-String/#parameters_44","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_62","text":"None val","title":"Returns"},{"location":"builtin-String/#rstrip","text":"[Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val","title":"rstrip"},{"location":"builtin-String/#parameters_45","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_63","text":"None val","title":"Returns"},{"location":"builtin-String/#lstrip","text":"[Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val","title":"lstrip"},{"location":"builtin-String/#parameters_46","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_64","text":"None val","title":"Returns"},{"location":"builtin-String/#add","text":"[Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String iso^","title":"add"},{"location":"builtin-String/#parameters_47","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_65","text":"String iso^","title":"Returns"},{"location":"builtin-String/#join","text":"[Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^","title":"join"},{"location":"builtin-String/#parameters_48","text":"data: Iterator [ Stringable box] ref","title":"Parameters"},{"location":"builtin-String/#returns_66","text":"String iso^","title":"Returns"},{"location":"builtin-String/#compare","text":"[Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-String/#parameters_49","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_67","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#compare_sub","text":"[Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val)","title":"compare_sub"},{"location":"builtin-String/#parameters_50","text":"that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false","title":"Parameters"},{"location":"builtin-String/#returns_68","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#eq","text":"[Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val","title":"eq"},{"location":"builtin-String/#parameters_51","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-String/#lt","text":"[Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val","title":"lt"},{"location":"builtin-String/#parameters_52","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-String/#le","text":"[Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val","title":"le"},{"location":"builtin-String/#parameters_53","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-String/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"builtin-String/#parameters_54","text":"i: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_72","text":"USize val","title":"Returns"},{"location":"builtin-String/#bool","text":"[Source] fun box bool() : Bool val ?","title":"bool"},{"location":"builtin-String/#returns_73","text":"Bool val ?","title":"Returns"},{"location":"builtin-String/#i8","text":"[Source] fun box i8( base: U8 val = 0) : I8 val ?","title":"i8"},{"location":"builtin-String/#parameters_55","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_74","text":"I8 val ?","title":"Returns"},{"location":"builtin-String/#i16","text":"[Source] fun box i16( base: U8 val = 0) : I16 val ?","title":"i16"},{"location":"builtin-String/#parameters_56","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_75","text":"I16 val ?","title":"Returns"},{"location":"builtin-String/#i32","text":"[Source] fun box i32( base: U8 val = 0) : I32 val ?","title":"i32"},{"location":"builtin-String/#parameters_57","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_76","text":"I32 val ?","title":"Returns"},{"location":"builtin-String/#i64","text":"[Source] fun box i64( base: U8 val = 0) : I64 val ?","title":"i64"},{"location":"builtin-String/#parameters_58","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_77","text":"I64 val ?","title":"Returns"},{"location":"builtin-String/#i128","text":"[Source] fun box i128( base: U8 val = 0) : I128 val ?","title":"i128"},{"location":"builtin-String/#parameters_59","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_78","text":"I128 val ?","title":"Returns"},{"location":"builtin-String/#ilong","text":"[Source] fun box ilong( base: U8 val = 0) : ILong val ?","title":"ilong"},{"location":"builtin-String/#parameters_60","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_79","text":"ILong val ?","title":"Returns"},{"location":"builtin-String/#isize","text":"[Source] fun box isize( base: U8 val = 0) : ISize val ?","title":"isize"},{"location":"builtin-String/#parameters_61","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_80","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#u8","text":"[Source] fun box u8( base: U8 val = 0) : U8 val ?","title":"u8"},{"location":"builtin-String/#parameters_62","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_81","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#u16","text":"[Source] fun box u16( base: U8 val = 0) : U16 val ?","title":"u16"},{"location":"builtin-String/#parameters_63","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_82","text":"U16 val ?","title":"Returns"},{"location":"builtin-String/#u32","text":"[Source] fun box u32( base: U8 val = 0) : U32 val ?","title":"u32"},{"location":"builtin-String/#parameters_64","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_83","text":"U32 val ?","title":"Returns"},{"location":"builtin-String/#u64","text":"[Source] fun box u64( base: U8 val = 0) : U64 val ?","title":"u64"},{"location":"builtin-String/#parameters_65","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_84","text":"U64 val ?","title":"Returns"},{"location":"builtin-String/#u128","text":"[Source] fun box u128( base: U8 val = 0) : U128 val ?","title":"u128"},{"location":"builtin-String/#parameters_66","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_85","text":"U128 val ?","title":"Returns"},{"location":"builtin-String/#ulong","text":"[Source] fun box ulong( base: U8 val = 0) : ULong val ?","title":"ulong"},{"location":"builtin-String/#parameters_67","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_86","text":"ULong val ?","title":"Returns"},{"location":"builtin-String/#usize","text":"[Source] fun box usize( base: U8 val = 0) : USize val ?","title":"usize"},{"location":"builtin-String/#parameters_68","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_87","text":"USize val ?","title":"Returns"},{"location":"builtin-String/#read_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","text":"[Source] Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ?","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_69","text":"offset: ISize val = 0 base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_88","text":"(A , USize val) ?","title":"Returns"},{"location":"builtin-String/#f32","text":"[Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ?","title":"f32"},{"location":"builtin-String/#parameters_70","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_89","text":"F32 val ?","title":"Returns"},{"location":"builtin-String/#f64","text":"[Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ?","title":"f64"},{"location":"builtin-String/#parameters_71","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_90","text":"F64 val ?","title":"Returns"},{"location":"builtin-String/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-String/#returns_91","text":"USize val","title":"Returns"},{"location":"builtin-String/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-String/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-String/#string_1","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-String/#returns_93","text":"String iso^","title":"Returns"},{"location":"builtin-String/#values","text":"[Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^","title":"values"},{"location":"builtin-String/#returns_94","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-String/#runes","text":"[Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^","title":"runes"},{"location":"builtin-String/#returns_95","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-String/#ge","text":"fun box ge( that: String box) : Bool val","title":"ge"},{"location":"builtin-String/#parameters_72","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_96","text":"Bool val","title":"Returns"},{"location":"builtin-String/#gt","text":"fun box gt( that: String box) : Bool val","title":"gt"},{"location":"builtin-String/#parameters_73","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_97","text":"Bool val","title":"Returns"},{"location":"builtin-String/#ne","text":"fun box ne( that: String box) : Bool val","title":"ne"},{"location":"builtin-String/#parameters_74","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_98","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/","text":"StringBytes \u00b6 [Source] class ref StringBytes is Iterator[U8 val] ref Implements \u00b6 Iterator [ U8 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringBytes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringBytes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U8 val ? Returns \u00b6 U8 val ?","title":"class StringBytes"},{"location":"builtin-StringBytes/#stringbytes","text":"[Source] class ref StringBytes is Iterator[U8 val] ref","title":"StringBytes"},{"location":"builtin-StringBytes/#implements","text":"Iterator [ U8 val] ref","title":"Implements"},{"location":"builtin-StringBytes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringBytes/#create","text":"[Source] new ref create( string: String box) : StringBytes ref^","title":"create"},{"location":"builtin-StringBytes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringBytes/#returns","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-StringBytes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringBytes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringBytes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/#next","text":"[Source] fun ref next() : U8 val ?","title":"next"},{"location":"builtin-StringBytes/#returns_2","text":"U8 val ?","title":"Returns"},{"location":"builtin-StringRunes/","text":"StringRunes \u00b6 [Source] class ref StringRunes is Iterator[U32 val] ref Implements \u00b6 Iterator [ U32 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringRunes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringRunes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U32 val ? Returns \u00b6 U32 val ?","title":"class StringRunes"},{"location":"builtin-StringRunes/#stringrunes","text":"[Source] class ref StringRunes is Iterator[U32 val] ref","title":"StringRunes"},{"location":"builtin-StringRunes/#implements","text":"Iterator [ U32 val] ref","title":"Implements"},{"location":"builtin-StringRunes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringRunes/#create","text":"[Source] new ref create( string: String box) : StringRunes ref^","title":"create"},{"location":"builtin-StringRunes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringRunes/#returns","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-StringRunes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringRunes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringRunes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringRunes/#next","text":"[Source] fun ref next() : U32 val ?","title":"next"},{"location":"builtin-StringRunes/#returns_2","text":"U32 val ?","title":"Returns"},{"location":"builtin-Stringable/","text":"Stringable \u00b6 [Source] Things that can be turned into a String. interface box Stringable Public Functions \u00b6 string \u00b6 [Source] Generate a string representation of this object. fun box string() : String iso^ Returns \u00b6 String iso^","title":"interface Stringable"},{"location":"builtin-Stringable/#stringable","text":"[Source] Things that can be turned into a String. interface box Stringable","title":"Stringable"},{"location":"builtin-Stringable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Stringable/#string","text":"[Source] Generate a string representation of this object. fun box string() : String iso^","title":"string"},{"location":"builtin-Stringable/#returns","text":"String iso^","title":"Returns"},{"location":"builtin-U128/","text":"U128 \u00b6 [Source] primitive val U128 is UnsignedInteger[U128 val] val Implements \u00b6 UnsignedInteger [ U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U128 val) : U128 val^ Parameters \u00b6 value: U128 val Returns \u00b6 U128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^ Parameters \u00b6 a: A Returns \u00b6 U128 val^ min_value \u00b6 [Source] new val min_value() : U128 val^ Returns \u00b6 U128 val^ max_value \u00b6 [Source] new val max_value() : U128 val^ Returns \u00b6 U128 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U128 val Returns \u00b6 U128 val abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U128 val Returns \u00b6 U128 val bswap \u00b6 [Source] fun box bswap() : U128 val Returns \u00b6 U128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val max \u00b6 [Source] fun box max( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem \u00b6 [Source] fun box divrem( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div \u00b6 [Source] fun box div( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem \u00b6 [Source] fun box rem( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) subc \u00b6 [Source] fun box subc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) divc \u00b6 [Source] fun box divc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) remc \u00b6 [Source] fun box remc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? div_partial \u00b6 [Source] fun box div_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ? Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) ? shl \u00b6 fun box shl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr \u00b6 fun box shr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fld \u00b6 fun box fld( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fldc \u00b6 fun box fldc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mod \u00b6 fun box mod( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val modc \u00b6 fun box modc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotl \u00b6 fun box rotl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotr \u00b6 fun box rotr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val add_unsafe \u00b6 fun box add_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub_unsafe \u00b6 fun box sub_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg_unsafe \u00b6 fun box neg_unsafe() : U128 val Returns \u00b6 U128 val op_and \u00b6 fun box op_and( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_or \u00b6 fun box op_or( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_xor \u00b6 fun box op_xor( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_not \u00b6 fun box op_not() : U128 val Returns \u00b6 U128 val add \u00b6 fun box add( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub \u00b6 fun box sub( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg \u00b6 fun box neg() : U128 val Returns \u00b6 U128 val eq \u00b6 fun box eq( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: U128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U128 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive U128"},{"location":"builtin-U128/#u128","text":"[Source] primitive val U128 is UnsignedInteger[U128 val] val","title":"U128"},{"location":"builtin-U128/#implements","text":"UnsignedInteger [ U128 val] val","title":"Implements"},{"location":"builtin-U128/#constructors","text":"","title":"Constructors"},{"location":"builtin-U128/#create","text":"[Source] new val create( value: U128 val) : U128 val^","title":"create"},{"location":"builtin-U128/#parameters","text":"value: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U128/#returns_1","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#min_value","text":"[Source] new val min_value() : U128 val^","title":"min_value"},{"location":"builtin-U128/#returns_2","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#max_value","text":"[Source] new val max_value() : U128 val^","title":"max_value"},{"location":"builtin-U128/#returns_3","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U128/#next_pow2","text":"[Source] fun box next_pow2() : U128 val","title":"next_pow2"},{"location":"builtin-U128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-U128/#returns_5","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bit_reverse","text":"[Source] fun box bit_reverse() : U128 val","title":"bit_reverse"},{"location":"builtin-U128/#returns_6","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bswap","text":"[Source] fun box bswap() : U128 val","title":"bswap"},{"location":"builtin-U128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-U128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-U128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-U128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-U128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-U128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-U128/#returns_13","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U128/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U128/#min","text":"[Source] fun box min( y: U128 val) : U128 val","title":"min"},{"location":"builtin-U128/#parameters_2","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_15","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#max","text":"[Source] fun box max( y: U128 val) : U128 val","title":"max"},{"location":"builtin-U128/#parameters_3","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_16","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U128/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U128/#returns_18","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-U128/#returns_19","text":"String iso^","title":"Returns"},{"location":"builtin-U128/#mul","text":"[Source] fun box mul( y: U128 val) : U128 val","title":"mul"},{"location":"builtin-U128/#parameters_4","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_20","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem","text":"[Source] fun box divrem( y: U128 val) : (U128 val , U128 val)","title":"divrem"},{"location":"builtin-U128/#parameters_5","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_21","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div","text":"[Source] fun box div( y: U128 val) : U128 val","title":"div"},{"location":"builtin-U128/#parameters_6","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_22","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem","text":"[Source] fun box rem( y: U128 val) : U128 val","title":"rem"},{"location":"builtin-U128/#parameters_7","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_23","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val","title":"mul_unsafe"},{"location":"builtin-U128/#parameters_8","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_24","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val)","title":"divrem_unsafe"},{"location":"builtin-U128/#parameters_9","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_25","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val","title":"div_unsafe"},{"location":"builtin-U128/#parameters_10","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_26","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val","title":"rem_unsafe"},{"location":"builtin-U128/#parameters_11","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-U128/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-U128/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U128/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U128/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#addc","text":"[Source] fun box addc( y: U128 val) : (U128 val , Bool val)","title":"addc"},{"location":"builtin-U128/#parameters_12","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_32","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#subc","text":"[Source] fun box subc( y: U128 val) : (U128 val , Bool val)","title":"subc"},{"location":"builtin-U128/#parameters_13","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_33","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mulc","text":"[Source] fun box mulc( y: U128 val) : (U128 val , Bool val)","title":"mulc"},{"location":"builtin-U128/#parameters_14","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_34","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#divc","text":"[Source] fun box divc( y: U128 val) : (U128 val , Bool val)","title":"divc"},{"location":"builtin-U128/#parameters_15","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_35","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#remc","text":"[Source] fun box remc( y: U128 val) : (U128 val , Bool val)","title":"remc"},{"location":"builtin-U128/#parameters_16","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_36","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#add_partial","text":"[Source] fun box add_partial( y: U128 val) : U128 val ?","title":"add_partial"},{"location":"builtin-U128/#parameters_17","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_37","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#sub_partial","text":"[Source] fun box sub_partial( y: U128 val) : U128 val ?","title":"sub_partial"},{"location":"builtin-U128/#parameters_18","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_38","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mul_partial","text":"[Source] fun box mul_partial( y: U128 val) : U128 val ?","title":"mul_partial"},{"location":"builtin-U128/#parameters_19","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_39","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#div_partial","text":"[Source] fun box div_partial( y: U128 val) : U128 val ?","title":"div_partial"},{"location":"builtin-U128/#parameters_20","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_40","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#rem_partial","text":"[Source] fun box rem_partial( y: U128 val) : U128 val ?","title":"rem_partial"},{"location":"builtin-U128/#parameters_21","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_41","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#divrem_partial","text":"[Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ?","title":"divrem_partial"},{"location":"builtin-U128/#parameters_22","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_42","text":"( U128 val , U128 val) ?","title":"Returns"},{"location":"builtin-U128/#shl","text":"fun box shl( y: U128 val) : U128 val","title":"shl"},{"location":"builtin-U128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_43","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr","text":"fun box shr( y: U128 val) : U128 val","title":"shr"},{"location":"builtin-U128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_44","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fld","text":"fun box fld( y: U128 val) : U128 val","title":"fld"},{"location":"builtin-U128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_45","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fldc","text":"fun box fldc( y: U128 val) : (U128 val , Bool val)","title":"fldc"},{"location":"builtin-U128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_46","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#fld_partial","text":"fun box fld_partial( y: U128 val) : U128 val ?","title":"fld_partial"},{"location":"builtin-U128/#parameters_27","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_47","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#fld_unsafe","text":"fun box fld_unsafe( y: U128 val) : U128 val","title":"fld_unsafe"},{"location":"builtin-U128/#parameters_28","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_48","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mod","text":"fun box mod( y: U128 val) : U128 val","title":"mod"},{"location":"builtin-U128/#parameters_29","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#modc","text":"fun box modc( y: U128 val) : (U128 val , Bool val)","title":"modc"},{"location":"builtin-U128/#parameters_30","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_50","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mod_partial","text":"fun box mod_partial( y: U128 val) : U128 val ?","title":"mod_partial"},{"location":"builtin-U128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_51","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mod_unsafe","text":"fun box mod_unsafe( y: U128 val) : U128 val","title":"mod_unsafe"},{"location":"builtin-U128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_52","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : U128 val","title":"shl_unsafe"},{"location":"builtin-U128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_53","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : U128 val","title":"shr_unsafe"},{"location":"builtin-U128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_54","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotl","text":"fun box rotl( y: U128 val) : U128 val","title":"rotl"},{"location":"builtin-U128/#parameters_35","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_55","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotr","text":"fun box rotr( y: U128 val) : U128 val","title":"rotr"},{"location":"builtin-U128/#parameters_36","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_56","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add_unsafe","text":"fun box add_unsafe( y: U128 val) : U128 val","title":"add_unsafe"},{"location":"builtin-U128/#parameters_37","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub_unsafe","text":"fun box sub_unsafe( y: U128 val) : U128 val","title":"sub_unsafe"},{"location":"builtin-U128/#parameters_38","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_58","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg_unsafe","text":"fun box neg_unsafe() : U128 val","title":"neg_unsafe"},{"location":"builtin-U128/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_and","text":"fun box op_and( y: U128 val) : U128 val","title":"op_and"},{"location":"builtin-U128/#parameters_39","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_60","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_or","text":"fun box op_or( y: U128 val) : U128 val","title":"op_or"},{"location":"builtin-U128/#parameters_40","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_xor","text":"fun box op_xor( y: U128 val) : U128 val","title":"op_xor"},{"location":"builtin-U128/#parameters_41","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_62","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_not","text":"fun box op_not() : U128 val","title":"op_not"},{"location":"builtin-U128/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add","text":"fun box add( y: U128 val) : U128 val","title":"add"},{"location":"builtin-U128/#parameters_42","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_64","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub","text":"fun box sub( y: U128 val) : U128 val","title":"sub"},{"location":"builtin-U128/#parameters_43","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg","text":"fun box neg() : U128 val","title":"neg"},{"location":"builtin-U128/#returns_66","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#eq","text":"fun box eq( y: U128 val) : Bool val","title":"eq"},{"location":"builtin-U128/#parameters_44","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ne","text":"fun box ne( y: U128 val) : Bool val","title":"ne"},{"location":"builtin-U128/#parameters_45","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#lt","text":"fun box lt( y: U128 val) : Bool val","title":"lt"},{"location":"builtin-U128/#parameters_46","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#le","text":"fun box le( y: U128 val) : Bool val","title":"le"},{"location":"builtin-U128/#parameters_47","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ge","text":"fun box ge( y: U128 val) : Bool val","title":"ge"},{"location":"builtin-U128/#parameters_48","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#gt","text":"fun box gt( y: U128 val) : Bool val","title":"gt"},{"location":"builtin-U128/#parameters_49","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U128/#returns_73","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U128/#returns_74","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U128/#returns_75","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U128/#returns_76","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U128/#returns_77","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U128/#returns_78","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U128/#returns_79","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U128/#returns_80","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U128/#returns_81","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U128/#returns_82","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U128/#returns_83","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_1","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U128/#returns_84","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U128/#returns_85","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U128/#returns_86","text":"USize val","title":"Returns"},{"location":"builtin-U128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U128/#returns_87","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U128/#returns_88","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U128/#returns_89","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U128/#returns_90","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U128/#returns_91","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U128/#returns_92","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U128/#returns_93","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U128/#returns_94","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U128/#returns_95","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U128/#returns_96","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U128/#returns_97","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U128/#returns_98","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U128/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U128/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-U128/#compare","text":"fun box compare( that: U128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U128/#parameters_50","text":"that: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U16/","text":"U16 \u00b6 [Source] primitive val U16 is UnsignedInteger[U16 val] val Implements \u00b6 UnsignedInteger [ U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U16 val) : U16 val^ Parameters \u00b6 value: U16 val Returns \u00b6 U16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^ Parameters \u00b6 a: A Returns \u00b6 U16 val^ min_value \u00b6 [Source] new val min_value() : U16 val^ Returns \u00b6 U16 val^ max_value \u00b6 [Source] new val max_value() : U16 val^ Returns \u00b6 U16 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U16 val Returns \u00b6 U16 val abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U16 val Returns \u00b6 U16 val bswap \u00b6 [Source] fun box bswap() : U16 val Returns \u00b6 U16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val max \u00b6 [Source] fun box max( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val addc \u00b6 [Source] fun box addc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) subc \u00b6 [Source] fun box subc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) divc \u00b6 [Source] fun box divc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) remc \u00b6 [Source] fun box remc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? div_partial \u00b6 [Source] fun box div_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ? Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) ? shl \u00b6 fun box shl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr \u00b6 fun box shr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fld \u00b6 fun box fld( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fldc \u00b6 fun box fldc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mod \u00b6 fun box mod( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val modc \u00b6 fun box modc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotl \u00b6 fun box rotl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotr \u00b6 fun box rotr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub_unsafe \u00b6 fun box sub_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul_unsafe \u00b6 fun box mul_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div_unsafe \u00b6 fun box div_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg_unsafe \u00b6 fun box neg_unsafe() : U16 val Returns \u00b6 U16 val op_and \u00b6 fun box op_and( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_or \u00b6 fun box op_or( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_xor \u00b6 fun box op_xor( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_not \u00b6 fun box op_not() : U16 val Returns \u00b6 U16 val add \u00b6 fun box add( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub \u00b6 fun box sub( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul \u00b6 fun box mul( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div \u00b6 fun box div( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem \u00b6 fun box divrem( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem \u00b6 fun box rem( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg \u00b6 fun box neg() : U16 val Returns \u00b6 U16 val eq \u00b6 fun box eq( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U16 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive U16"},{"location":"builtin-U16/#u16","text":"[Source] primitive val U16 is UnsignedInteger[U16 val] val","title":"U16"},{"location":"builtin-U16/#implements","text":"UnsignedInteger [ U16 val] val","title":"Implements"},{"location":"builtin-U16/#constructors","text":"","title":"Constructors"},{"location":"builtin-U16/#create","text":"[Source] new val create( value: U16 val) : U16 val^","title":"create"},{"location":"builtin-U16/#parameters","text":"value: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U16/#returns_1","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#min_value","text":"[Source] new val min_value() : U16 val^","title":"min_value"},{"location":"builtin-U16/#returns_2","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#max_value","text":"[Source] new val max_value() : U16 val^","title":"max_value"},{"location":"builtin-U16/#returns_3","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U16/#next_pow2","text":"[Source] fun box next_pow2() : U16 val","title":"next_pow2"},{"location":"builtin-U16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-U16/#returns_5","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bit_reverse","text":"[Source] fun box bit_reverse() : U16 val","title":"bit_reverse"},{"location":"builtin-U16/#returns_6","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bswap","text":"[Source] fun box bswap() : U16 val","title":"bswap"},{"location":"builtin-U16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-U16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-U16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-U16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-U16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-U16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-U16/#returns_13","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U16/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U16/#min","text":"[Source] fun box min( y: U16 val) : U16 val","title":"min"},{"location":"builtin-U16/#parameters_2","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_15","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#max","text":"[Source] fun box max( y: U16 val) : U16 val","title":"max"},{"location":"builtin-U16/#parameters_3","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_16","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#addc","text":"[Source] fun box addc( y: U16 val) : (U16 val , Bool val)","title":"addc"},{"location":"builtin-U16/#parameters_4","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_17","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#subc","text":"[Source] fun box subc( y: U16 val) : (U16 val , Bool val)","title":"subc"},{"location":"builtin-U16/#parameters_5","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_18","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mulc","text":"[Source] fun box mulc( y: U16 val) : (U16 val , Bool val)","title":"mulc"},{"location":"builtin-U16/#parameters_6","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_19","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#divc","text":"[Source] fun box divc( y: U16 val) : (U16 val , Bool val)","title":"divc"},{"location":"builtin-U16/#parameters_7","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_20","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#remc","text":"[Source] fun box remc( y: U16 val) : (U16 val , Bool val)","title":"remc"},{"location":"builtin-U16/#parameters_8","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_21","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#add_partial","text":"[Source] fun box add_partial( y: U16 val) : U16 val ?","title":"add_partial"},{"location":"builtin-U16/#parameters_9","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_22","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#sub_partial","text":"[Source] fun box sub_partial( y: U16 val) : U16 val ?","title":"sub_partial"},{"location":"builtin-U16/#parameters_10","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_23","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mul_partial","text":"[Source] fun box mul_partial( y: U16 val) : U16 val ?","title":"mul_partial"},{"location":"builtin-U16/#parameters_11","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_24","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#div_partial","text":"[Source] fun box div_partial( y: U16 val) : U16 val ?","title":"div_partial"},{"location":"builtin-U16/#parameters_12","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_25","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#rem_partial","text":"[Source] fun box rem_partial( y: U16 val) : U16 val ?","title":"rem_partial"},{"location":"builtin-U16/#parameters_13","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_26","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#divrem_partial","text":"[Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ?","title":"divrem_partial"},{"location":"builtin-U16/#parameters_14","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_27","text":"( U16 val , U16 val) ?","title":"Returns"},{"location":"builtin-U16/#shl","text":"fun box shl( y: U16 val) : U16 val","title":"shl"},{"location":"builtin-U16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_28","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr","text":"fun box shr( y: U16 val) : U16 val","title":"shr"},{"location":"builtin-U16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_29","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fld","text":"fun box fld( y: U16 val) : U16 val","title":"fld"},{"location":"builtin-U16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fldc","text":"fun box fldc( y: U16 val) : (U16 val , Bool val)","title":"fldc"},{"location":"builtin-U16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_31","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#fld_partial","text":"fun box fld_partial( y: U16 val) : U16 val ?","title":"fld_partial"},{"location":"builtin-U16/#parameters_19","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#fld_unsafe","text":"fun box fld_unsafe( y: U16 val) : U16 val","title":"fld_unsafe"},{"location":"builtin-U16/#parameters_20","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_33","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mod","text":"fun box mod( y: U16 val) : U16 val","title":"mod"},{"location":"builtin-U16/#parameters_21","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_34","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#modc","text":"fun box modc( y: U16 val) : (U16 val , Bool val)","title":"modc"},{"location":"builtin-U16/#parameters_22","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_35","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mod_partial","text":"fun box mod_partial( y: U16 val) : U16 val ?","title":"mod_partial"},{"location":"builtin-U16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_36","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mod_unsafe","text":"fun box mod_unsafe( y: U16 val) : U16 val","title":"mod_unsafe"},{"location":"builtin-U16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_37","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : U16 val","title":"shl_unsafe"},{"location":"builtin-U16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_38","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : U16 val","title":"shr_unsafe"},{"location":"builtin-U16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_39","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotl","text":"fun box rotl( y: U16 val) : U16 val","title":"rotl"},{"location":"builtin-U16/#parameters_27","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_40","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotr","text":"fun box rotr( y: U16 val) : U16 val","title":"rotr"},{"location":"builtin-U16/#parameters_28","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_41","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U16/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U16/#add_unsafe","text":"fun box add_unsafe( y: U16 val) : U16 val","title":"add_unsafe"},{"location":"builtin-U16/#parameters_29","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_43","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub_unsafe","text":"fun box sub_unsafe( y: U16 val) : U16 val","title":"sub_unsafe"},{"location":"builtin-U16/#parameters_30","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_44","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul_unsafe","text":"fun box mul_unsafe( y: U16 val) : U16 val","title":"mul_unsafe"},{"location":"builtin-U16/#parameters_31","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_45","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div_unsafe","text":"fun box div_unsafe( y: U16 val) : U16 val","title":"div_unsafe"},{"location":"builtin-U16/#parameters_32","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem_unsafe","text":"fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val)","title":"divrem_unsafe"},{"location":"builtin-U16/#parameters_33","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_47","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem_unsafe","text":"fun box rem_unsafe( y: U16 val) : U16 val","title":"rem_unsafe"},{"location":"builtin-U16/#parameters_34","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg_unsafe","text":"fun box neg_unsafe() : U16 val","title":"neg_unsafe"},{"location":"builtin-U16/#returns_49","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_and","text":"fun box op_and( y: U16 val) : U16 val","title":"op_and"},{"location":"builtin-U16/#parameters_35","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_50","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_or","text":"fun box op_or( y: U16 val) : U16 val","title":"op_or"},{"location":"builtin-U16/#parameters_36","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_51","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_xor","text":"fun box op_xor( y: U16 val) : U16 val","title":"op_xor"},{"location":"builtin-U16/#parameters_37","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_52","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_not","text":"fun box op_not() : U16 val","title":"op_not"},{"location":"builtin-U16/#returns_53","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#add","text":"fun box add( y: U16 val) : U16 val","title":"add"},{"location":"builtin-U16/#parameters_38","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_54","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub","text":"fun box sub( y: U16 val) : U16 val","title":"sub"},{"location":"builtin-U16/#parameters_39","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_55","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul","text":"fun box mul( y: U16 val) : U16 val","title":"mul"},{"location":"builtin-U16/#parameters_40","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_56","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div","text":"fun box div( y: U16 val) : U16 val","title":"div"},{"location":"builtin-U16/#parameters_41","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_57","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem","text":"fun box divrem( y: U16 val) : (U16 val , U16 val)","title":"divrem"},{"location":"builtin-U16/#parameters_42","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_58","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem","text":"fun box rem( y: U16 val) : U16 val","title":"rem"},{"location":"builtin-U16/#parameters_43","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_59","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg","text":"fun box neg() : U16 val","title":"neg"},{"location":"builtin-U16/#returns_60","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#eq","text":"fun box eq( y: U16 val) : Bool val","title":"eq"},{"location":"builtin-U16/#parameters_44","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ne","text":"fun box ne( y: U16 val) : Bool val","title":"ne"},{"location":"builtin-U16/#parameters_45","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#lt","text":"fun box lt( y: U16 val) : Bool val","title":"lt"},{"location":"builtin-U16/#parameters_46","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#le","text":"fun box le( y: U16 val) : Bool val","title":"le"},{"location":"builtin-U16/#parameters_47","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ge","text":"fun box ge( y: U16 val) : Bool val","title":"ge"},{"location":"builtin-U16/#parameters_48","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#gt","text":"fun box gt( y: U16 val) : Bool val","title":"gt"},{"location":"builtin-U16/#parameters_49","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U16/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U16/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U16/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U16/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U16/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U16/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U16/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U16/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U16/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U16/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_1","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U16/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U16/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U16/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U16/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U16/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U16/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U16/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U16/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U16/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U16/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U16/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U16/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U16/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U16/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U16/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U16/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U16/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U16/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U16/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U16/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U16/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U16/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U16/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U16/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#compare","text":"fun box compare( that: U16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U16/#parameters_50","text":"that: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U32/","text":"U32 \u00b6 [Source] primitive val U32 is UnsignedInteger[U32 val] val Implements \u00b6 UnsignedInteger [ U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U32 val) : U32 val^ Parameters \u00b6 value: U32 val Returns \u00b6 U32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^ Parameters \u00b6 a: A Returns \u00b6 U32 val^ min_value \u00b6 [Source] new val min_value() : U32 val^ Returns \u00b6 U32 val^ max_value \u00b6 [Source] new val max_value() : U32 val^ Returns \u00b6 U32 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U32 val Returns \u00b6 U32 val abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U32 val Returns \u00b6 U32 val bswap \u00b6 [Source] fun box bswap() : U32 val Returns \u00b6 U32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val max \u00b6 [Source] fun box max( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val addc \u00b6 [Source] fun box addc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) subc \u00b6 [Source] fun box subc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) divc \u00b6 [Source] fun box divc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) remc \u00b6 [Source] fun box remc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? div_partial \u00b6 [Source] fun box div_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ? Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) ? shl \u00b6 fun box shl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr \u00b6 fun box shr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fld \u00b6 fun box fld( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fldc \u00b6 fun box fldc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mod \u00b6 fun box mod( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val modc \u00b6 fun box modc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotl \u00b6 fun box rotl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotr \u00b6 fun box rotr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub_unsafe \u00b6 fun box sub_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul_unsafe \u00b6 fun box mul_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div_unsafe \u00b6 fun box div_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg_unsafe \u00b6 fun box neg_unsafe() : U32 val Returns \u00b6 U32 val op_and \u00b6 fun box op_and( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_or \u00b6 fun box op_or( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_xor \u00b6 fun box op_xor( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_not \u00b6 fun box op_not() : U32 val Returns \u00b6 U32 val add \u00b6 fun box add( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub \u00b6 fun box sub( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul \u00b6 fun box mul( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div \u00b6 fun box div( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem \u00b6 fun box divrem( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem \u00b6 fun box rem( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg \u00b6 fun box neg() : U32 val Returns \u00b6 U32 val eq \u00b6 fun box eq( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U32 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive U32"},{"location":"builtin-U32/#u32","text":"[Source] primitive val U32 is UnsignedInteger[U32 val] val","title":"U32"},{"location":"builtin-U32/#implements","text":"UnsignedInteger [ U32 val] val","title":"Implements"},{"location":"builtin-U32/#constructors","text":"","title":"Constructors"},{"location":"builtin-U32/#create","text":"[Source] new val create( value: U32 val) : U32 val^","title":"create"},{"location":"builtin-U32/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U32/#returns_1","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#min_value","text":"[Source] new val min_value() : U32 val^","title":"min_value"},{"location":"builtin-U32/#returns_2","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#max_value","text":"[Source] new val max_value() : U32 val^","title":"max_value"},{"location":"builtin-U32/#returns_3","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U32/#next_pow2","text":"[Source] fun box next_pow2() : U32 val","title":"next_pow2"},{"location":"builtin-U32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-U32/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bit_reverse","text":"[Source] fun box bit_reverse() : U32 val","title":"bit_reverse"},{"location":"builtin-U32/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bswap","text":"[Source] fun box bswap() : U32 val","title":"bswap"},{"location":"builtin-U32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-U32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-U32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-U32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-U32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-U32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-U32/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U32/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U32/#min","text":"[Source] fun box min( y: U32 val) : U32 val","title":"min"},{"location":"builtin-U32/#parameters_2","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_15","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#max","text":"[Source] fun box max( y: U32 val) : U32 val","title":"max"},{"location":"builtin-U32/#parameters_3","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_16","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#addc","text":"[Source] fun box addc( y: U32 val) : (U32 val , Bool val)","title":"addc"},{"location":"builtin-U32/#parameters_4","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_17","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#subc","text":"[Source] fun box subc( y: U32 val) : (U32 val , Bool val)","title":"subc"},{"location":"builtin-U32/#parameters_5","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_18","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mulc","text":"[Source] fun box mulc( y: U32 val) : (U32 val , Bool val)","title":"mulc"},{"location":"builtin-U32/#parameters_6","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_19","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#divc","text":"[Source] fun box divc( y: U32 val) : (U32 val , Bool val)","title":"divc"},{"location":"builtin-U32/#parameters_7","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_20","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#remc","text":"[Source] fun box remc( y: U32 val) : (U32 val , Bool val)","title":"remc"},{"location":"builtin-U32/#parameters_8","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_21","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#add_partial","text":"[Source] fun box add_partial( y: U32 val) : U32 val ?","title":"add_partial"},{"location":"builtin-U32/#parameters_9","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_22","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#sub_partial","text":"[Source] fun box sub_partial( y: U32 val) : U32 val ?","title":"sub_partial"},{"location":"builtin-U32/#parameters_10","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_23","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mul_partial","text":"[Source] fun box mul_partial( y: U32 val) : U32 val ?","title":"mul_partial"},{"location":"builtin-U32/#parameters_11","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_24","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#div_partial","text":"[Source] fun box div_partial( y: U32 val) : U32 val ?","title":"div_partial"},{"location":"builtin-U32/#parameters_12","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_25","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#rem_partial","text":"[Source] fun box rem_partial( y: U32 val) : U32 val ?","title":"rem_partial"},{"location":"builtin-U32/#parameters_13","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_26","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#divrem_partial","text":"[Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ?","title":"divrem_partial"},{"location":"builtin-U32/#parameters_14","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_27","text":"( U32 val , U32 val) ?","title":"Returns"},{"location":"builtin-U32/#shl","text":"fun box shl( y: U32 val) : U32 val","title":"shl"},{"location":"builtin-U32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_28","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr","text":"fun box shr( y: U32 val) : U32 val","title":"shr"},{"location":"builtin-U32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_29","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fld","text":"fun box fld( y: U32 val) : U32 val","title":"fld"},{"location":"builtin-U32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_30","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fldc","text":"fun box fldc( y: U32 val) : (U32 val , Bool val)","title":"fldc"},{"location":"builtin-U32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_31","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#fld_partial","text":"fun box fld_partial( y: U32 val) : U32 val ?","title":"fld_partial"},{"location":"builtin-U32/#parameters_19","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_32","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#fld_unsafe","text":"fun box fld_unsafe( y: U32 val) : U32 val","title":"fld_unsafe"},{"location":"builtin-U32/#parameters_20","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mod","text":"fun box mod( y: U32 val) : U32 val","title":"mod"},{"location":"builtin-U32/#parameters_21","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_34","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#modc","text":"fun box modc( y: U32 val) : (U32 val , Bool val)","title":"modc"},{"location":"builtin-U32/#parameters_22","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_35","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mod_partial","text":"fun box mod_partial( y: U32 val) : U32 val ?","title":"mod_partial"},{"location":"builtin-U32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mod_unsafe","text":"fun box mod_unsafe( y: U32 val) : U32 val","title":"mod_unsafe"},{"location":"builtin-U32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_37","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : U32 val","title":"shl_unsafe"},{"location":"builtin-U32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_38","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : U32 val","title":"shr_unsafe"},{"location":"builtin-U32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_39","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotl","text":"fun box rotl( y: U32 val) : U32 val","title":"rotl"},{"location":"builtin-U32/#parameters_27","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_40","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotr","text":"fun box rotr( y: U32 val) : U32 val","title":"rotr"},{"location":"builtin-U32/#parameters_28","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_41","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U32/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U32/#add_unsafe","text":"fun box add_unsafe( y: U32 val) : U32 val","title":"add_unsafe"},{"location":"builtin-U32/#parameters_29","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_43","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub_unsafe","text":"fun box sub_unsafe( y: U32 val) : U32 val","title":"sub_unsafe"},{"location":"builtin-U32/#parameters_30","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_44","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul_unsafe","text":"fun box mul_unsafe( y: U32 val) : U32 val","title":"mul_unsafe"},{"location":"builtin-U32/#parameters_31","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_45","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div_unsafe","text":"fun box div_unsafe( y: U32 val) : U32 val","title":"div_unsafe"},{"location":"builtin-U32/#parameters_32","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_46","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem_unsafe","text":"fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val)","title":"divrem_unsafe"},{"location":"builtin-U32/#parameters_33","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_47","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem_unsafe","text":"fun box rem_unsafe( y: U32 val) : U32 val","title":"rem_unsafe"},{"location":"builtin-U32/#parameters_34","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_48","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg_unsafe","text":"fun box neg_unsafe() : U32 val","title":"neg_unsafe"},{"location":"builtin-U32/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_and","text":"fun box op_and( y: U32 val) : U32 val","title":"op_and"},{"location":"builtin-U32/#parameters_35","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_50","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_or","text":"fun box op_or( y: U32 val) : U32 val","title":"op_or"},{"location":"builtin-U32/#parameters_36","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_51","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_xor","text":"fun box op_xor( y: U32 val) : U32 val","title":"op_xor"},{"location":"builtin-U32/#parameters_37","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_52","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_not","text":"fun box op_not() : U32 val","title":"op_not"},{"location":"builtin-U32/#returns_53","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#add","text":"fun box add( y: U32 val) : U32 val","title":"add"},{"location":"builtin-U32/#parameters_38","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_54","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub","text":"fun box sub( y: U32 val) : U32 val","title":"sub"},{"location":"builtin-U32/#parameters_39","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_55","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul","text":"fun box mul( y: U32 val) : U32 val","title":"mul"},{"location":"builtin-U32/#parameters_40","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_56","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div","text":"fun box div( y: U32 val) : U32 val","title":"div"},{"location":"builtin-U32/#parameters_41","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_57","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem","text":"fun box divrem( y: U32 val) : (U32 val , U32 val)","title":"divrem"},{"location":"builtin-U32/#parameters_42","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_58","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem","text":"fun box rem( y: U32 val) : U32 val","title":"rem"},{"location":"builtin-U32/#parameters_43","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_59","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg","text":"fun box neg() : U32 val","title":"neg"},{"location":"builtin-U32/#returns_60","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#eq","text":"fun box eq( y: U32 val) : Bool val","title":"eq"},{"location":"builtin-U32/#parameters_44","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ne","text":"fun box ne( y: U32 val) : Bool val","title":"ne"},{"location":"builtin-U32/#parameters_45","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#lt","text":"fun box lt( y: U32 val) : Bool val","title":"lt"},{"location":"builtin-U32/#parameters_46","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#le","text":"fun box le( y: U32 val) : Bool val","title":"le"},{"location":"builtin-U32/#parameters_47","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ge","text":"fun box ge( y: U32 val) : Bool val","title":"ge"},{"location":"builtin-U32/#parameters_48","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#gt","text":"fun box gt( y: U32 val) : Bool val","title":"gt"},{"location":"builtin-U32/#parameters_49","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U32/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U32/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U32/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U32/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U32/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U32/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U32/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U32/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U32/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U32/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U32/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_1","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U32/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U32/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U32/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U32/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U32/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U32/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U32/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U32/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U32/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U32/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U32/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U32/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U32/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U32/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U32/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U32/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U32/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U32/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U32/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U32/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U32/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U32/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#compare","text":"fun box compare( that: U32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U32/#parameters_50","text":"that: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U64/","text":"U64 \u00b6 [Source] primitive val U64 is UnsignedInteger[U64 val] val Implements \u00b6 UnsignedInteger [ U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U64 val) : U64 val^ Parameters \u00b6 value: U64 val Returns \u00b6 U64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^ Parameters \u00b6 a: A Returns \u00b6 U64 val^ min_value \u00b6 [Source] new val min_value() : U64 val^ Returns \u00b6 U64 val^ max_value \u00b6 [Source] new val max_value() : U64 val^ Returns \u00b6 U64 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U64 val Returns \u00b6 U64 val abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U64 val Returns \u00b6 U64 val bswap \u00b6 [Source] fun box bswap() : U64 val Returns \u00b6 U64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val max \u00b6 [Source] fun box max( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) subc \u00b6 [Source] fun box subc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) divc \u00b6 [Source] fun box divc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) remc \u00b6 [Source] fun box remc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? div_partial \u00b6 [Source] fun box div_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ? Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) ? shl \u00b6 fun box shl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr \u00b6 fun box shr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fld \u00b6 fun box fld( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fldc \u00b6 fun box fldc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mod \u00b6 fun box mod( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val modc \u00b6 fun box modc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotl \u00b6 fun box rotl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotr \u00b6 fun box rotr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub_unsafe \u00b6 fun box sub_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul_unsafe \u00b6 fun box mul_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div_unsafe \u00b6 fun box div_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg_unsafe \u00b6 fun box neg_unsafe() : U64 val Returns \u00b6 U64 val op_and \u00b6 fun box op_and( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_or \u00b6 fun box op_or( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_xor \u00b6 fun box op_xor( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_not \u00b6 fun box op_not() : U64 val Returns \u00b6 U64 val add \u00b6 fun box add( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub \u00b6 fun box sub( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul \u00b6 fun box mul( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div \u00b6 fun box div( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem \u00b6 fun box divrem( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem \u00b6 fun box rem( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg \u00b6 fun box neg() : U64 val Returns \u00b6 U64 val eq \u00b6 fun box eq( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U64 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive U64"},{"location":"builtin-U64/#u64","text":"[Source] primitive val U64 is UnsignedInteger[U64 val] val","title":"U64"},{"location":"builtin-U64/#implements","text":"UnsignedInteger [ U64 val] val","title":"Implements"},{"location":"builtin-U64/#constructors","text":"","title":"Constructors"},{"location":"builtin-U64/#create","text":"[Source] new val create( value: U64 val) : U64 val^","title":"create"},{"location":"builtin-U64/#parameters","text":"value: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U64/#returns_1","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#min_value","text":"[Source] new val min_value() : U64 val^","title":"min_value"},{"location":"builtin-U64/#returns_2","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#max_value","text":"[Source] new val max_value() : U64 val^","title":"max_value"},{"location":"builtin-U64/#returns_3","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U64/#next_pow2","text":"[Source] fun box next_pow2() : U64 val","title":"next_pow2"},{"location":"builtin-U64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-U64/#returns_5","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bit_reverse","text":"[Source] fun box bit_reverse() : U64 val","title":"bit_reverse"},{"location":"builtin-U64/#returns_6","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bswap","text":"[Source] fun box bswap() : U64 val","title":"bswap"},{"location":"builtin-U64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-U64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-U64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-U64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-U64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-U64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-U64/#returns_13","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U64/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U64/#min","text":"[Source] fun box min( y: U64 val) : U64 val","title":"min"},{"location":"builtin-U64/#parameters_2","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_15","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#max","text":"[Source] fun box max( y: U64 val) : U64 val","title":"max"},{"location":"builtin-U64/#parameters_3","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_16","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U64/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U64/#addc","text":"[Source] fun box addc( y: U64 val) : (U64 val , Bool val)","title":"addc"},{"location":"builtin-U64/#parameters_4","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_18","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#subc","text":"[Source] fun box subc( y: U64 val) : (U64 val , Bool val)","title":"subc"},{"location":"builtin-U64/#parameters_5","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_19","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mulc","text":"[Source] fun box mulc( y: U64 val) : (U64 val , Bool val)","title":"mulc"},{"location":"builtin-U64/#parameters_6","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_20","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#divc","text":"[Source] fun box divc( y: U64 val) : (U64 val , Bool val)","title":"divc"},{"location":"builtin-U64/#parameters_7","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_21","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#remc","text":"[Source] fun box remc( y: U64 val) : (U64 val , Bool val)","title":"remc"},{"location":"builtin-U64/#parameters_8","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_22","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#add_partial","text":"[Source] fun box add_partial( y: U64 val) : U64 val ?","title":"add_partial"},{"location":"builtin-U64/#parameters_9","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_23","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#sub_partial","text":"[Source] fun box sub_partial( y: U64 val) : U64 val ?","title":"sub_partial"},{"location":"builtin-U64/#parameters_10","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_24","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mul_partial","text":"[Source] fun box mul_partial( y: U64 val) : U64 val ?","title":"mul_partial"},{"location":"builtin-U64/#parameters_11","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_25","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#div_partial","text":"[Source] fun box div_partial( y: U64 val) : U64 val ?","title":"div_partial"},{"location":"builtin-U64/#parameters_12","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_26","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#rem_partial","text":"[Source] fun box rem_partial( y: U64 val) : U64 val ?","title":"rem_partial"},{"location":"builtin-U64/#parameters_13","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#divrem_partial","text":"[Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ?","title":"divrem_partial"},{"location":"builtin-U64/#parameters_14","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_28","text":"( U64 val , U64 val) ?","title":"Returns"},{"location":"builtin-U64/#shl","text":"fun box shl( y: U64 val) : U64 val","title":"shl"},{"location":"builtin-U64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_29","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr","text":"fun box shr( y: U64 val) : U64 val","title":"shr"},{"location":"builtin-U64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_30","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fld","text":"fun box fld( y: U64 val) : U64 val","title":"fld"},{"location":"builtin-U64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_31","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fldc","text":"fun box fldc( y: U64 val) : (U64 val , Bool val)","title":"fldc"},{"location":"builtin-U64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_32","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#fld_partial","text":"fun box fld_partial( y: U64 val) : U64 val ?","title":"fld_partial"},{"location":"builtin-U64/#parameters_19","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_33","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#fld_unsafe","text":"fun box fld_unsafe( y: U64 val) : U64 val","title":"fld_unsafe"},{"location":"builtin-U64/#parameters_20","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mod","text":"fun box mod( y: U64 val) : U64 val","title":"mod"},{"location":"builtin-U64/#parameters_21","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_35","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#modc","text":"fun box modc( y: U64 val) : (U64 val , Bool val)","title":"modc"},{"location":"builtin-U64/#parameters_22","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_36","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mod_partial","text":"fun box mod_partial( y: U64 val) : U64 val ?","title":"mod_partial"},{"location":"builtin-U64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_37","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mod_unsafe","text":"fun box mod_unsafe( y: U64 val) : U64 val","title":"mod_unsafe"},{"location":"builtin-U64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_38","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : U64 val","title":"shl_unsafe"},{"location":"builtin-U64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_39","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : U64 val","title":"shr_unsafe"},{"location":"builtin-U64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_40","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotl","text":"fun box rotl( y: U64 val) : U64 val","title":"rotl"},{"location":"builtin-U64/#parameters_27","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_41","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotr","text":"fun box rotr( y: U64 val) : U64 val","title":"rotr"},{"location":"builtin-U64/#parameters_28","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_42","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U64/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-U64/#add_unsafe","text":"fun box add_unsafe( y: U64 val) : U64 val","title":"add_unsafe"},{"location":"builtin-U64/#parameters_29","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub_unsafe","text":"fun box sub_unsafe( y: U64 val) : U64 val","title":"sub_unsafe"},{"location":"builtin-U64/#parameters_30","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_45","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul_unsafe","text":"fun box mul_unsafe( y: U64 val) : U64 val","title":"mul_unsafe"},{"location":"builtin-U64/#parameters_31","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_46","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div_unsafe","text":"fun box div_unsafe( y: U64 val) : U64 val","title":"div_unsafe"},{"location":"builtin-U64/#parameters_32","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_47","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem_unsafe","text":"fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val)","title":"divrem_unsafe"},{"location":"builtin-U64/#parameters_33","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_48","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem_unsafe","text":"fun box rem_unsafe( y: U64 val) : U64 val","title":"rem_unsafe"},{"location":"builtin-U64/#parameters_34","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_49","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg_unsafe","text":"fun box neg_unsafe() : U64 val","title":"neg_unsafe"},{"location":"builtin-U64/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_and","text":"fun box op_and( y: U64 val) : U64 val","title":"op_and"},{"location":"builtin-U64/#parameters_35","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_51","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_or","text":"fun box op_or( y: U64 val) : U64 val","title":"op_or"},{"location":"builtin-U64/#parameters_36","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_xor","text":"fun box op_xor( y: U64 val) : U64 val","title":"op_xor"},{"location":"builtin-U64/#parameters_37","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_53","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_not","text":"fun box op_not() : U64 val","title":"op_not"},{"location":"builtin-U64/#returns_54","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#add","text":"fun box add( y: U64 val) : U64 val","title":"add"},{"location":"builtin-U64/#parameters_38","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_55","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub","text":"fun box sub( y: U64 val) : U64 val","title":"sub"},{"location":"builtin-U64/#parameters_39","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_56","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul","text":"fun box mul( y: U64 val) : U64 val","title":"mul"},{"location":"builtin-U64/#parameters_40","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div","text":"fun box div( y: U64 val) : U64 val","title":"div"},{"location":"builtin-U64/#parameters_41","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_58","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem","text":"fun box divrem( y: U64 val) : (U64 val , U64 val)","title":"divrem"},{"location":"builtin-U64/#parameters_42","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_59","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem","text":"fun box rem( y: U64 val) : U64 val","title":"rem"},{"location":"builtin-U64/#parameters_43","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg","text":"fun box neg() : U64 val","title":"neg"},{"location":"builtin-U64/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#eq","text":"fun box eq( y: U64 val) : Bool val","title":"eq"},{"location":"builtin-U64/#parameters_44","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ne","text":"fun box ne( y: U64 val) : Bool val","title":"ne"},{"location":"builtin-U64/#parameters_45","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#lt","text":"fun box lt( y: U64 val) : Bool val","title":"lt"},{"location":"builtin-U64/#parameters_46","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#le","text":"fun box le( y: U64 val) : Bool val","title":"le"},{"location":"builtin-U64/#parameters_47","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ge","text":"fun box ge( y: U64 val) : Bool val","title":"ge"},{"location":"builtin-U64/#parameters_48","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#gt","text":"fun box gt( y: U64 val) : Bool val","title":"gt"},{"location":"builtin-U64/#parameters_49","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U64/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U64/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U64/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U64/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U64/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U64/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U64/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U64/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U64/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U64/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U64/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_1","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U64/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U64/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U64/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U64/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U64/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U64/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U64/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U64/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U64/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U64/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U64/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U64/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U64/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U64/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U64/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U64/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U64/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U64/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U64/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U64/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U64/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U64/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#compare","text":"fun box compare( that: U64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U64/#parameters_50","text":"that: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U8/","text":"U8 \u00b6 [Source] primitive val U8 is UnsignedInteger[U8 val] val Implements \u00b6 UnsignedInteger [ U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U8 val) : U8 val^ Parameters \u00b6 value: U8 val Returns \u00b6 U8 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^ Parameters \u00b6 a: B Returns \u00b6 U8 val^ min_value \u00b6 [Source] new val min_value() : U8 val^ Returns \u00b6 U8 val^ max_value \u00b6 [Source] new val max_value() : U8 val^ Returns \u00b6 U8 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U8 val Returns \u00b6 U8 val abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U8 val Returns \u00b6 U8 val bswap \u00b6 [Source] fun box bswap() : U8 val Returns \u00b6 U8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val max \u00b6 [Source] fun box max( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val addc \u00b6 [Source] fun box addc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) subc \u00b6 [Source] fun box subc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) divc \u00b6 [Source] fun box divc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) remc \u00b6 [Source] fun box remc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? div_partial \u00b6 [Source] fun box div_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ? Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) ? shl \u00b6 fun box shl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr \u00b6 fun box shr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fld \u00b6 fun box fld( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fldc \u00b6 fun box fldc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mod \u00b6 fun box mod( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val modc \u00b6 fun box modc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotl \u00b6 fun box rotl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotr \u00b6 fun box rotr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub_unsafe \u00b6 fun box sub_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul_unsafe \u00b6 fun box mul_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div_unsafe \u00b6 fun box div_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg_unsafe \u00b6 fun box neg_unsafe() : U8 val Returns \u00b6 U8 val op_and \u00b6 fun box op_and( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_or \u00b6 fun box op_or( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_xor \u00b6 fun box op_xor( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_not \u00b6 fun box op_not() : U8 val Returns \u00b6 U8 val add \u00b6 fun box add( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub \u00b6 fun box sub( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul \u00b6 fun box mul( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div \u00b6 fun box div( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem \u00b6 fun box divrem( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem \u00b6 fun box rem( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg \u00b6 fun box neg() : U8 val Returns \u00b6 U8 val eq \u00b6 fun box eq( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U8 val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive U8"},{"location":"builtin-U8/#u8","text":"[Source] primitive val U8 is UnsignedInteger[U8 val] val","title":"U8"},{"location":"builtin-U8/#implements","text":"UnsignedInteger [ U8 val] val","title":"Implements"},{"location":"builtin-U8/#constructors","text":"","title":"Constructors"},{"location":"builtin-U8/#create","text":"[Source] new val create( value: U8 val) : U8 val^","title":"create"},{"location":"builtin-U8/#parameters","text":"value: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-U8/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-U8/#returns_1","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#min_value","text":"[Source] new val min_value() : U8 val^","title":"min_value"},{"location":"builtin-U8/#returns_2","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#max_value","text":"[Source] new val max_value() : U8 val^","title":"max_value"},{"location":"builtin-U8/#returns_3","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U8/#next_pow2","text":"[Source] fun box next_pow2() : U8 val","title":"next_pow2"},{"location":"builtin-U8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-U8/#returns_5","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bit_reverse","text":"[Source] fun box bit_reverse() : U8 val","title":"bit_reverse"},{"location":"builtin-U8/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bswap","text":"[Source] fun box bswap() : U8 val","title":"bswap"},{"location":"builtin-U8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-U8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-U8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-U8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-U8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-U8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-U8/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U8/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U8/#min","text":"[Source] fun box min( y: U8 val) : U8 val","title":"min"},{"location":"builtin-U8/#parameters_2","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_15","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#max","text":"[Source] fun box max( y: U8 val) : U8 val","title":"max"},{"location":"builtin-U8/#parameters_3","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_16","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#addc","text":"[Source] fun box addc( y: U8 val) : (U8 val , Bool val)","title":"addc"},{"location":"builtin-U8/#parameters_4","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_17","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#subc","text":"[Source] fun box subc( y: U8 val) : (U8 val , Bool val)","title":"subc"},{"location":"builtin-U8/#parameters_5","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_18","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mulc","text":"[Source] fun box mulc( y: U8 val) : (U8 val , Bool val)","title":"mulc"},{"location":"builtin-U8/#parameters_6","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_19","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#divc","text":"[Source] fun box divc( y: U8 val) : (U8 val , Bool val)","title":"divc"},{"location":"builtin-U8/#parameters_7","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_20","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#remc","text":"[Source] fun box remc( y: U8 val) : (U8 val , Bool val)","title":"remc"},{"location":"builtin-U8/#parameters_8","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_21","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#add_partial","text":"[Source] fun box add_partial( y: U8 val) : U8 val ?","title":"add_partial"},{"location":"builtin-U8/#parameters_9","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_22","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#sub_partial","text":"[Source] fun box sub_partial( y: U8 val) : U8 val ?","title":"sub_partial"},{"location":"builtin-U8/#parameters_10","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_23","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mul_partial","text":"[Source] fun box mul_partial( y: U8 val) : U8 val ?","title":"mul_partial"},{"location":"builtin-U8/#parameters_11","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_24","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#div_partial","text":"[Source] fun box div_partial( y: U8 val) : U8 val ?","title":"div_partial"},{"location":"builtin-U8/#parameters_12","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#rem_partial","text":"[Source] fun box rem_partial( y: U8 val) : U8 val ?","title":"rem_partial"},{"location":"builtin-U8/#parameters_13","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#divrem_partial","text":"[Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ?","title":"divrem_partial"},{"location":"builtin-U8/#parameters_14","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_27","text":"( U8 val , U8 val) ?","title":"Returns"},{"location":"builtin-U8/#shl","text":"fun box shl( y: U8 val) : U8 val","title":"shl"},{"location":"builtin-U8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_28","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr","text":"fun box shr( y: U8 val) : U8 val","title":"shr"},{"location":"builtin-U8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fld","text":"fun box fld( y: U8 val) : U8 val","title":"fld"},{"location":"builtin-U8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_30","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fldc","text":"fun box fldc( y: U8 val) : (U8 val , Bool val)","title":"fldc"},{"location":"builtin-U8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_31","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#fld_partial","text":"fun box fld_partial( y: U8 val) : U8 val ?","title":"fld_partial"},{"location":"builtin-U8/#parameters_19","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_32","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#fld_unsafe","text":"fun box fld_unsafe( y: U8 val) : U8 val","title":"fld_unsafe"},{"location":"builtin-U8/#parameters_20","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_33","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mod","text":"fun box mod( y: U8 val) : U8 val","title":"mod"},{"location":"builtin-U8/#parameters_21","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_34","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#modc","text":"fun box modc( y: U8 val) : (U8 val , Bool val)","title":"modc"},{"location":"builtin-U8/#parameters_22","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_35","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mod_partial","text":"fun box mod_partial( y: U8 val) : U8 val ?","title":"mod_partial"},{"location":"builtin-U8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_36","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mod_unsafe","text":"fun box mod_unsafe( y: U8 val) : U8 val","title":"mod_unsafe"},{"location":"builtin-U8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_37","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : U8 val","title":"shl_unsafe"},{"location":"builtin-U8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_38","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : U8 val","title":"shr_unsafe"},{"location":"builtin-U8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_39","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotl","text":"fun box rotl( y: U8 val) : U8 val","title":"rotl"},{"location":"builtin-U8/#parameters_27","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_40","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotr","text":"fun box rotr( y: U8 val) : U8 val","title":"rotr"},{"location":"builtin-U8/#parameters_28","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_41","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U8/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U8/#add_unsafe","text":"fun box add_unsafe( y: U8 val) : U8 val","title":"add_unsafe"},{"location":"builtin-U8/#parameters_29","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_43","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub_unsafe","text":"fun box sub_unsafe( y: U8 val) : U8 val","title":"sub_unsafe"},{"location":"builtin-U8/#parameters_30","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_44","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul_unsafe","text":"fun box mul_unsafe( y: U8 val) : U8 val","title":"mul_unsafe"},{"location":"builtin-U8/#parameters_31","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div_unsafe","text":"fun box div_unsafe( y: U8 val) : U8 val","title":"div_unsafe"},{"location":"builtin-U8/#parameters_32","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_46","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem_unsafe","text":"fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val)","title":"divrem_unsafe"},{"location":"builtin-U8/#parameters_33","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_47","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem_unsafe","text":"fun box rem_unsafe( y: U8 val) : U8 val","title":"rem_unsafe"},{"location":"builtin-U8/#parameters_34","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_48","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg_unsafe","text":"fun box neg_unsafe() : U8 val","title":"neg_unsafe"},{"location":"builtin-U8/#returns_49","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_and","text":"fun box op_and( y: U8 val) : U8 val","title":"op_and"},{"location":"builtin-U8/#parameters_35","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_50","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_or","text":"fun box op_or( y: U8 val) : U8 val","title":"op_or"},{"location":"builtin-U8/#parameters_36","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_51","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_xor","text":"fun box op_xor( y: U8 val) : U8 val","title":"op_xor"},{"location":"builtin-U8/#parameters_37","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_52","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_not","text":"fun box op_not() : U8 val","title":"op_not"},{"location":"builtin-U8/#returns_53","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#add","text":"fun box add( y: U8 val) : U8 val","title":"add"},{"location":"builtin-U8/#parameters_38","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_54","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub","text":"fun box sub( y: U8 val) : U8 val","title":"sub"},{"location":"builtin-U8/#parameters_39","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_55","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul","text":"fun box mul( y: U8 val) : U8 val","title":"mul"},{"location":"builtin-U8/#parameters_40","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_56","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div","text":"fun box div( y: U8 val) : U8 val","title":"div"},{"location":"builtin-U8/#parameters_41","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_57","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem","text":"fun box divrem( y: U8 val) : (U8 val , U8 val)","title":"divrem"},{"location":"builtin-U8/#parameters_42","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_58","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem","text":"fun box rem( y: U8 val) : U8 val","title":"rem"},{"location":"builtin-U8/#parameters_43","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_59","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg","text":"fun box neg() : U8 val","title":"neg"},{"location":"builtin-U8/#returns_60","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#eq","text":"fun box eq( y: U8 val) : Bool val","title":"eq"},{"location":"builtin-U8/#parameters_44","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ne","text":"fun box ne( y: U8 val) : Bool val","title":"ne"},{"location":"builtin-U8/#parameters_45","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#lt","text":"fun box lt( y: U8 val) : Bool val","title":"lt"},{"location":"builtin-U8/#parameters_46","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#le","text":"fun box le( y: U8 val) : Bool val","title":"le"},{"location":"builtin-U8/#parameters_47","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ge","text":"fun box ge( y: U8 val) : Bool val","title":"ge"},{"location":"builtin-U8/#parameters_48","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#gt","text":"fun box gt( y: U8 val) : Bool val","title":"gt"},{"location":"builtin-U8/#parameters_49","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U8/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U8/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U8/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U8/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U8/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U8/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U8/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U8/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U8/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_1","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U8/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U8/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U8/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U8/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U8/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U8/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U8/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U8/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U8/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U8/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U8/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U8/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U8/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U8/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U8/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U8/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U8/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U8/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U8/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U8/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U8/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U8/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U8/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U8/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U8/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#compare","text":"fun box compare( that: U8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U8/#parameters_50","text":"that: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ULong/","text":"ULong \u00b6 [Source] primitive val ULong is UnsignedInteger[ULong val] val Implements \u00b6 UnsignedInteger [ ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ULong val) : ULong val^ Parameters \u00b6 value: ULong val Returns \u00b6 ULong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^ Parameters \u00b6 a: A Returns \u00b6 ULong val^ min_value \u00b6 [Source] new val min_value() : ULong val^ Returns \u00b6 ULong val^ max_value \u00b6 [Source] new val max_value() : ULong val^ Returns \u00b6 ULong val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : ULong val Returns \u00b6 ULong val abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ULong val Returns \u00b6 ULong val bswap \u00b6 [Source] fun box bswap() : ULong val Returns \u00b6 ULong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val max \u00b6 [Source] fun box max( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) subc \u00b6 [Source] fun box subc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) divc \u00b6 [Source] fun box divc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) remc \u00b6 [Source] fun box remc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? div_partial \u00b6 [Source] fun box div_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ? Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) ? shl \u00b6 fun box shl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr \u00b6 fun box shr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fld \u00b6 fun box fld( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fldc \u00b6 fun box fldc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) fld_partial \u00b6 fun box fld_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? fld_unsafe \u00b6 fun box fld_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mod \u00b6 fun box mod( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val modc \u00b6 fun box modc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mod_partial \u00b6 fun box mod_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mod_unsafe \u00b6 fun box mod_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotl \u00b6 fun box rotl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotr \u00b6 fun box rotr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub_unsafe \u00b6 fun box sub_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul_unsafe \u00b6 fun box mul_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div_unsafe \u00b6 fun box div_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg_unsafe \u00b6 fun box neg_unsafe() : ULong val Returns \u00b6 ULong val op_and \u00b6 fun box op_and( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_or \u00b6 fun box op_or( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_xor \u00b6 fun box op_xor( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_not \u00b6 fun box op_not() : ULong val Returns \u00b6 ULong val add \u00b6 fun box add( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub \u00b6 fun box sub( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul \u00b6 fun box mul( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div \u00b6 fun box div( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem \u00b6 fun box divrem( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem \u00b6 fun box rem( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg \u00b6 fun box neg() : ULong val Returns \u00b6 ULong val eq \u00b6 fun box eq( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ULong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ULong val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive ULong"},{"location":"builtin-ULong/#ulong","text":"[Source] primitive val ULong is UnsignedInteger[ULong val] val","title":"ULong"},{"location":"builtin-ULong/#implements","text":"UnsignedInteger [ ULong val] val","title":"Implements"},{"location":"builtin-ULong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ULong/#create","text":"[Source] new val create( value: ULong val) : ULong val^","title":"create"},{"location":"builtin-ULong/#parameters","text":"value: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ULong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ULong/#returns_1","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#min_value","text":"[Source] new val min_value() : ULong val^","title":"min_value"},{"location":"builtin-ULong/#returns_2","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#max_value","text":"[Source] new val max_value() : ULong val^","title":"max_value"},{"location":"builtin-ULong/#returns_3","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ULong/#next_pow2","text":"[Source] fun box next_pow2() : ULong val","title":"next_pow2"},{"location":"builtin-ULong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ULong/#returns_5","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bit_reverse","text":"[Source] fun box bit_reverse() : ULong val","title":"bit_reverse"},{"location":"builtin-ULong/#returns_6","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bswap","text":"[Source] fun box bswap() : ULong val","title":"bswap"},{"location":"builtin-ULong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ULong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ULong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ULong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ULong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ULong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ULong/#returns_13","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ULong/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#min","text":"[Source] fun box min( y: ULong val) : ULong val","title":"min"},{"location":"builtin-ULong/#parameters_2","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_15","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#max","text":"[Source] fun box max( y: ULong val) : ULong val","title":"max"},{"location":"builtin-ULong/#parameters_3","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_16","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ULong/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#addc","text":"[Source] fun box addc( y: ULong val) : (ULong val , Bool val)","title":"addc"},{"location":"builtin-ULong/#parameters_4","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_18","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#subc","text":"[Source] fun box subc( y: ULong val) : (ULong val , Bool val)","title":"subc"},{"location":"builtin-ULong/#parameters_5","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_19","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mulc","text":"[Source] fun box mulc( y: ULong val) : (ULong val , Bool val)","title":"mulc"},{"location":"builtin-ULong/#parameters_6","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_20","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#divc","text":"[Source] fun box divc( y: ULong val) : (ULong val , Bool val)","title":"divc"},{"location":"builtin-ULong/#parameters_7","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_21","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#remc","text":"[Source] fun box remc( y: ULong val) : (ULong val , Bool val)","title":"remc"},{"location":"builtin-ULong/#parameters_8","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_22","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#add_partial","text":"[Source] fun box add_partial( y: ULong val) : ULong val ?","title":"add_partial"},{"location":"builtin-ULong/#parameters_9","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_23","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#sub_partial","text":"[Source] fun box sub_partial( y: ULong val) : ULong val ?","title":"sub_partial"},{"location":"builtin-ULong/#parameters_10","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_24","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mul_partial","text":"[Source] fun box mul_partial( y: ULong val) : ULong val ?","title":"mul_partial"},{"location":"builtin-ULong/#parameters_11","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_25","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#div_partial","text":"[Source] fun box div_partial( y: ULong val) : ULong val ?","title":"div_partial"},{"location":"builtin-ULong/#parameters_12","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_26","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#rem_partial","text":"[Source] fun box rem_partial( y: ULong val) : ULong val ?","title":"rem_partial"},{"location":"builtin-ULong/#parameters_13","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_27","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ?","title":"divrem_partial"},{"location":"builtin-ULong/#parameters_14","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_28","text":"( ULong val , ULong val) ?","title":"Returns"},{"location":"builtin-ULong/#shl","text":"fun box shl( y: ULong val) : ULong val","title":"shl"},{"location":"builtin-ULong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_29","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr","text":"fun box shr( y: ULong val) : ULong val","title":"shr"},{"location":"builtin-ULong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_30","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fld","text":"fun box fld( y: ULong val) : ULong val","title":"fld"},{"location":"builtin-ULong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_31","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fldc","text":"fun box fldc( y: ULong val) : (ULong val , Bool val)","title":"fldc"},{"location":"builtin-ULong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_32","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#fld_partial","text":"fun box fld_partial( y: ULong val) : ULong val ?","title":"fld_partial"},{"location":"builtin-ULong/#parameters_19","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_33","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#fld_unsafe","text":"fun box fld_unsafe( y: ULong val) : ULong val","title":"fld_unsafe"},{"location":"builtin-ULong/#parameters_20","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mod","text":"fun box mod( y: ULong val) : ULong val","title":"mod"},{"location":"builtin-ULong/#parameters_21","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_35","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#modc","text":"fun box modc( y: ULong val) : (ULong val , Bool val)","title":"modc"},{"location":"builtin-ULong/#parameters_22","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_36","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mod_partial","text":"fun box mod_partial( y: ULong val) : ULong val ?","title":"mod_partial"},{"location":"builtin-ULong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_37","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mod_unsafe","text":"fun box mod_unsafe( y: ULong val) : ULong val","title":"mod_unsafe"},{"location":"builtin-ULong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_38","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ULong val","title":"shl_unsafe"},{"location":"builtin-ULong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_39","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ULong val","title":"shr_unsafe"},{"location":"builtin-ULong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_40","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotl","text":"fun box rotl( y: ULong val) : ULong val","title":"rotl"},{"location":"builtin-ULong/#parameters_27","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_41","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotr","text":"fun box rotr( y: ULong val) : ULong val","title":"rotr"},{"location":"builtin-ULong/#parameters_28","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_42","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ULong/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-ULong/#add_unsafe","text":"fun box add_unsafe( y: ULong val) : ULong val","title":"add_unsafe"},{"location":"builtin-ULong/#parameters_29","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_44","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub_unsafe","text":"fun box sub_unsafe( y: ULong val) : ULong val","title":"sub_unsafe"},{"location":"builtin-ULong/#parameters_30","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_45","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul_unsafe","text":"fun box mul_unsafe( y: ULong val) : ULong val","title":"mul_unsafe"},{"location":"builtin-ULong/#parameters_31","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_46","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div_unsafe","text":"fun box div_unsafe( y: ULong val) : ULong val","title":"div_unsafe"},{"location":"builtin-ULong/#parameters_32","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_47","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val)","title":"divrem_unsafe"},{"location":"builtin-ULong/#parameters_33","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_48","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem_unsafe","text":"fun box rem_unsafe( y: ULong val) : ULong val","title":"rem_unsafe"},{"location":"builtin-ULong/#parameters_34","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_49","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg_unsafe","text":"fun box neg_unsafe() : ULong val","title":"neg_unsafe"},{"location":"builtin-ULong/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_and","text":"fun box op_and( y: ULong val) : ULong val","title":"op_and"},{"location":"builtin-ULong/#parameters_35","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_51","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_or","text":"fun box op_or( y: ULong val) : ULong val","title":"op_or"},{"location":"builtin-ULong/#parameters_36","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_xor","text":"fun box op_xor( y: ULong val) : ULong val","title":"op_xor"},{"location":"builtin-ULong/#parameters_37","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_53","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_not","text":"fun box op_not() : ULong val","title":"op_not"},{"location":"builtin-ULong/#returns_54","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#add","text":"fun box add( y: ULong val) : ULong val","title":"add"},{"location":"builtin-ULong/#parameters_38","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_55","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub","text":"fun box sub( y: ULong val) : ULong val","title":"sub"},{"location":"builtin-ULong/#parameters_39","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_56","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul","text":"fun box mul( y: ULong val) : ULong val","title":"mul"},{"location":"builtin-ULong/#parameters_40","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_57","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div","text":"fun box div( y: ULong val) : ULong val","title":"div"},{"location":"builtin-ULong/#parameters_41","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_58","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem","text":"fun box divrem( y: ULong val) : (ULong val , ULong val)","title":"divrem"},{"location":"builtin-ULong/#parameters_42","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_59","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem","text":"fun box rem( y: ULong val) : ULong val","title":"rem"},{"location":"builtin-ULong/#parameters_43","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_60","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg","text":"fun box neg() : ULong val","title":"neg"},{"location":"builtin-ULong/#returns_61","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#eq","text":"fun box eq( y: ULong val) : Bool val","title":"eq"},{"location":"builtin-ULong/#parameters_44","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ne","text":"fun box ne( y: ULong val) : Bool val","title":"ne"},{"location":"builtin-ULong/#parameters_45","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#lt","text":"fun box lt( y: ULong val) : Bool val","title":"lt"},{"location":"builtin-ULong/#parameters_46","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#le","text":"fun box le( y: ULong val) : Bool val","title":"le"},{"location":"builtin-ULong/#parameters_47","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ge","text":"fun box ge( y: ULong val) : Bool val","title":"ge"},{"location":"builtin-ULong/#parameters_48","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#gt","text":"fun box gt( y: ULong val) : Bool val","title":"gt"},{"location":"builtin-ULong/#parameters_49","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ULong/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ULong/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ULong/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ULong/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ULong/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ULong/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ULong/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ULong/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ULong/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ULong/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ULong/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ULong/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ULong/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_1","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ULong/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ULong/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ULong/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ULong/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ULong/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ULong/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ULong/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ULong/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ULong/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ULong/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ULong/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ULong/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ULong/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ULong/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ULong/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ULong/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ULong/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ULong/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ULong/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ULong/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#compare","text":"fun box compare( that: ULong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ULong/#parameters_50","text":"that: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-USize/","text":"USize \u00b6 [Source] primitive val USize is UnsignedInteger[USize val] val Implements \u00b6 UnsignedInteger [ USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: USize val) : USize val^ Parameters \u00b6 value: USize val Returns \u00b6 USize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^ Parameters \u00b6 a: A Returns \u00b6 USize val^ min_value \u00b6 [Source] new val min_value() : USize val^ Returns \u00b6 USize val^ max_value \u00b6 [Source] new val max_value() : USize val^ Returns \u00b6 USize val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : USize val Returns \u00b6 USize val abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : USize val Returns \u00b6 USize val bswap \u00b6 [Source] fun box bswap() : USize val Returns \u00b6 USize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val max \u00b6 [Source] fun box max( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) subc \u00b6 [Source] fun box subc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) divc \u00b6 [Source] fun box divc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) remc \u00b6 [Source] fun box remc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? div_partial \u00b6 [Source] fun box div_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ? Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) ? shl \u00b6 fun box shl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr \u00b6 fun box shr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fld \u00b6 fun box fld( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fldc \u00b6 fun box fldc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) fld_partial \u00b6 fun box fld_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? fld_unsafe \u00b6 fun box fld_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mod \u00b6 fun box mod( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val modc \u00b6 fun box modc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mod_partial \u00b6 fun box mod_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mod_unsafe \u00b6 fun box mod_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotl \u00b6 fun box rotl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotr \u00b6 fun box rotr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub_unsafe \u00b6 fun box sub_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul_unsafe \u00b6 fun box mul_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div_unsafe \u00b6 fun box div_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem_unsafe \u00b6 fun box rem_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg_unsafe \u00b6 fun box neg_unsafe() : USize val Returns \u00b6 USize val op_and \u00b6 fun box op_and( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_or \u00b6 fun box op_or( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_xor \u00b6 fun box op_xor( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_not \u00b6 fun box op_not() : USize val Returns \u00b6 USize val add \u00b6 fun box add( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub \u00b6 fun box sub( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul \u00b6 fun box mul( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div \u00b6 fun box div( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem \u00b6 fun box divrem( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem \u00b6 fun box rem( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg \u00b6 fun box neg() : USize val Returns \u00b6 USize val eq \u00b6 fun box eq( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val le \u00b6 fun box le( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: USize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: USize val Returns \u00b6 ( Less val | Equal val | Greater val)","title":"primitive USize"},{"location":"builtin-USize/#usize","text":"[Source] primitive val USize is UnsignedInteger[USize val] val","title":"USize"},{"location":"builtin-USize/#implements","text":"UnsignedInteger [ USize val] val","title":"Implements"},{"location":"builtin-USize/#constructors","text":"","title":"Constructors"},{"location":"builtin-USize/#create","text":"[Source] new val create( value: USize val) : USize val^","title":"create"},{"location":"builtin-USize/#parameters","text":"value: USize val","title":"Parameters"},{"location":"builtin-USize/#returns","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-USize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-USize/#returns_1","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#min_value","text":"[Source] new val min_value() : USize val^","title":"min_value"},{"location":"builtin-USize/#returns_2","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#max_value","text":"[Source] new val max_value() : USize val^","title":"max_value"},{"location":"builtin-USize/#returns_3","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-USize/#next_pow2","text":"[Source] fun box next_pow2() : USize val","title":"next_pow2"},{"location":"builtin-USize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-USize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-USize/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bit_reverse","text":"[Source] fun box bit_reverse() : USize val","title":"bit_reverse"},{"location":"builtin-USize/#returns_6","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bswap","text":"[Source] fun box bswap() : USize val","title":"bswap"},{"location":"builtin-USize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-USize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-USize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-USize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-USize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-USize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-USize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-USize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-USize/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-USize/#min","text":"[Source] fun box min( y: USize val) : USize val","title":"min"},{"location":"builtin-USize/#parameters_2","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-USize/#max","text":"[Source] fun box max( y: USize val) : USize val","title":"max"},{"location":"builtin-USize/#parameters_3","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-USize/#addc","text":"[Source] fun box addc( y: USize val) : (USize val , Bool val)","title":"addc"},{"location":"builtin-USize/#parameters_4","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_17","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#subc","text":"[Source] fun box subc( y: USize val) : (USize val , Bool val)","title":"subc"},{"location":"builtin-USize/#parameters_5","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_18","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mulc","text":"[Source] fun box mulc( y: USize val) : (USize val , Bool val)","title":"mulc"},{"location":"builtin-USize/#parameters_6","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_19","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#divc","text":"[Source] fun box divc( y: USize val) : (USize val , Bool val)","title":"divc"},{"location":"builtin-USize/#parameters_7","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_20","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#remc","text":"[Source] fun box remc( y: USize val) : (USize val , Bool val)","title":"remc"},{"location":"builtin-USize/#parameters_8","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_21","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#add_partial","text":"[Source] fun box add_partial( y: USize val) : USize val ?","title":"add_partial"},{"location":"builtin-USize/#parameters_9","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_22","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#sub_partial","text":"[Source] fun box sub_partial( y: USize val) : USize val ?","title":"sub_partial"},{"location":"builtin-USize/#parameters_10","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_23","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mul_partial","text":"[Source] fun box mul_partial( y: USize val) : USize val ?","title":"mul_partial"},{"location":"builtin-USize/#parameters_11","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_24","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#div_partial","text":"[Source] fun box div_partial( y: USize val) : USize val ?","title":"div_partial"},{"location":"builtin-USize/#parameters_12","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_25","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#rem_partial","text":"[Source] fun box rem_partial( y: USize val) : USize val ?","title":"rem_partial"},{"location":"builtin-USize/#parameters_13","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_26","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#divrem_partial","text":"[Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ?","title":"divrem_partial"},{"location":"builtin-USize/#parameters_14","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_27","text":"( USize val , USize val) ?","title":"Returns"},{"location":"builtin-USize/#shl","text":"fun box shl( y: USize val) : USize val","title":"shl"},{"location":"builtin-USize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_28","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr","text":"fun box shr( y: USize val) : USize val","title":"shr"},{"location":"builtin-USize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fld","text":"fun box fld( y: USize val) : USize val","title":"fld"},{"location":"builtin-USize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_30","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fldc","text":"fun box fldc( y: USize val) : (USize val , Bool val)","title":"fldc"},{"location":"builtin-USize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_31","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#fld_partial","text":"fun box fld_partial( y: USize val) : USize val ?","title":"fld_partial"},{"location":"builtin-USize/#parameters_19","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_32","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#fld_unsafe","text":"fun box fld_unsafe( y: USize val) : USize val","title":"fld_unsafe"},{"location":"builtin-USize/#parameters_20","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mod","text":"fun box mod( y: USize val) : USize val","title":"mod"},{"location":"builtin-USize/#parameters_21","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_34","text":"USize val","title":"Returns"},{"location":"builtin-USize/#modc","text":"fun box modc( y: USize val) : (USize val , Bool val)","title":"modc"},{"location":"builtin-USize/#parameters_22","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_35","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mod_partial","text":"fun box mod_partial( y: USize val) : USize val ?","title":"mod_partial"},{"location":"builtin-USize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_36","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mod_unsafe","text":"fun box mod_unsafe( y: USize val) : USize val","title":"mod_unsafe"},{"location":"builtin-USize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : USize val","title":"shl_unsafe"},{"location":"builtin-USize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_38","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : USize val","title":"shr_unsafe"},{"location":"builtin-USize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_39","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotl","text":"fun box rotl( y: USize val) : USize val","title":"rotl"},{"location":"builtin-USize/#parameters_27","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_40","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotr","text":"fun box rotr( y: USize val) : USize val","title":"rotr"},{"location":"builtin-USize/#parameters_28","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_41","text":"USize val","title":"Returns"},{"location":"builtin-USize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-USize/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-USize/#add_unsafe","text":"fun box add_unsafe( y: USize val) : USize val","title":"add_unsafe"},{"location":"builtin-USize/#parameters_29","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub_unsafe","text":"fun box sub_unsafe( y: USize val) : USize val","title":"sub_unsafe"},{"location":"builtin-USize/#parameters_30","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_44","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul_unsafe","text":"fun box mul_unsafe( y: USize val) : USize val","title":"mul_unsafe"},{"location":"builtin-USize/#parameters_31","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_45","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div_unsafe","text":"fun box div_unsafe( y: USize val) : USize val","title":"div_unsafe"},{"location":"builtin-USize/#parameters_32","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_46","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem_unsafe","text":"fun box divrem_unsafe( y: USize val) : (USize val , USize val)","title":"divrem_unsafe"},{"location":"builtin-USize/#parameters_33","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_47","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem_unsafe","text":"fun box rem_unsafe( y: USize val) : USize val","title":"rem_unsafe"},{"location":"builtin-USize/#parameters_34","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_48","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg_unsafe","text":"fun box neg_unsafe() : USize val","title":"neg_unsafe"},{"location":"builtin-USize/#returns_49","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_and","text":"fun box op_and( y: USize val) : USize val","title":"op_and"},{"location":"builtin-USize/#parameters_35","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_50","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_or","text":"fun box op_or( y: USize val) : USize val","title":"op_or"},{"location":"builtin-USize/#parameters_36","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_xor","text":"fun box op_xor( y: USize val) : USize val","title":"op_xor"},{"location":"builtin-USize/#parameters_37","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_52","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_not","text":"fun box op_not() : USize val","title":"op_not"},{"location":"builtin-USize/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-USize/#add","text":"fun box add( y: USize val) : USize val","title":"add"},{"location":"builtin-USize/#parameters_38","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_54","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub","text":"fun box sub( y: USize val) : USize val","title":"sub"},{"location":"builtin-USize/#parameters_39","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul","text":"fun box mul( y: USize val) : USize val","title":"mul"},{"location":"builtin-USize/#parameters_40","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div","text":"fun box div( y: USize val) : USize val","title":"div"},{"location":"builtin-USize/#parameters_41","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_57","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem","text":"fun box divrem( y: USize val) : (USize val , USize val)","title":"divrem"},{"location":"builtin-USize/#parameters_42","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_58","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem","text":"fun box rem( y: USize val) : USize val","title":"rem"},{"location":"builtin-USize/#parameters_43","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg","text":"fun box neg() : USize val","title":"neg"},{"location":"builtin-USize/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-USize/#eq","text":"fun box eq( y: USize val) : Bool val","title":"eq"},{"location":"builtin-USize/#parameters_44","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ne","text":"fun box ne( y: USize val) : Bool val","title":"ne"},{"location":"builtin-USize/#parameters_45","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#lt","text":"fun box lt( y: USize val) : Bool val","title":"lt"},{"location":"builtin-USize/#parameters_46","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#le","text":"fun box le( y: USize val) : Bool val","title":"le"},{"location":"builtin-USize/#parameters_47","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ge","text":"fun box ge( y: USize val) : Bool val","title":"ge"},{"location":"builtin-USize/#parameters_48","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#gt","text":"fun box gt( y: USize val) : Bool val","title":"gt"},{"location":"builtin-USize/#parameters_49","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-USize/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-USize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-USize/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-USize/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-USize/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-USize/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-USize/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-USize/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-USize/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-USize/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-USize/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-USize/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-USize/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-USize/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-USize/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-USize/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_1","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-USize/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-USize/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-USize/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-USize/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-USize/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-USize/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-USize/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-USize/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-USize/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-USize/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-USize/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-USize/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-USize/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-USize/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-USize/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-USize/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-USize/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-USize/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-USize/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#compare","text":"fun box compare( that: USize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-USize/#parameters_50","text":"that: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Unsigned/","text":"Unsigned \u00b6 [Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Unsigned"},{"location":"builtin-Unsigned/#unsigned","text":"[Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Unsigned"},{"location":"builtin-Unsigned/#type-alias-for","text":"( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-UnsignedInteger/","text":"UnsignedInteger[A: UnsignedInteger [A] val] \u00b6 [Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A shl \u00b6 [Source] fun box shl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotl \u00b6 [Source] fun box rotl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotr \u00b6 [Source] fun box rotr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : A Returns \u00b6 A clz \u00b6 [Source] fun box clz() : A Returns \u00b6 A ctz \u00b6 [Source] fun box ctz() : A Returns \u00b6 A clz_unsafe \u00b6 [Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A Returns \u00b6 A ctz_unsafe \u00b6 [Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A Returns \u00b6 A bitwidth \u00b6 [Source] fun box bitwidth() : A Returns \u00b6 A bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val)","title":"trait UnsignedInteger"},{"location":"builtin-UnsignedInteger/#unsignedintegera-unsignedintegera-val","text":"[Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val","title":"UnsignedInteger[A: UnsignedInteger[A] val]"},{"location":"builtin-UnsignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-UnsignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-UnsignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-UnsignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-UnsignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-UnsignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-UnsignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-UnsignedInteger/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-UnsignedInteger/#returns_4","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl","text":"[Source] fun box shl( y: A) : A","title":"shl"},{"location":"builtin-UnsignedInteger/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr","text":"[Source] fun box shr( y: A) : A","title":"shr"},{"location":"builtin-UnsignedInteger/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-UnsignedInteger/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-UnsignedInteger/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_8","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-UnsignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_9","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_10","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-UnsignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_11","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-UnsignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_12","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-UnsignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_14","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A","title":"shl_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_15","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A","title":"shr_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_16","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotl","text":"[Source] fun box rotl( y: A) : A","title":"rotl"},{"location":"builtin-UnsignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotr","text":"[Source] fun box rotr( y: A) : A","title":"rotr"},{"location":"builtin-UnsignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#popcount","text":"[Source] fun box popcount() : A","title":"popcount"},{"location":"builtin-UnsignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz","text":"[Source] fun box clz() : A","title":"clz"},{"location":"builtin-UnsignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz","text":"[Source] fun box ctz() : A","title":"ctz"},{"location":"builtin-UnsignedInteger/#returns_21","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz_unsafe","text":"[Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A","title":"clz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","text":"[Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A","title":"ctz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : A","title":"bitwidth"},{"location":"builtin-UnsignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-UnsignedInteger/#returns_25","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-UnsignedInteger/#returns_26","text":"String iso^","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_27","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_28","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_29","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_30","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_31","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_32","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-UnsignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_33","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-UnsignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_34","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-UnsignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_35","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-UnsignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_36","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-UnsignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_37","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-UnsignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_38","text":"(A , A) ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-UnsignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-UnsignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-UnsignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_41","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-UnsignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_42","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-UnsignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_43","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-UnsignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_44","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-UnsignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-UnsignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-UnsignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-UnsignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-UnsignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-UnsignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-UnsignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_51","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-UnsignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-UnsignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-UnsignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-UnsignedInteger/#parameters_40","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_55","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-UnsignedInteger/#parameters_41","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_56","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-UnsignedInteger/#returns_57","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-UnsignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-UnsignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-UnsignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-UnsignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-UnsignedInteger/#parameters_46","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-UnsignedInteger/#parameters_47","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-UnsignedInteger/#parameters_48","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_64","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-UnsignedInteger/#parameters_49","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_65","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-UnsignedInteger/#returns_66","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-UnsignedInteger/#returns_67","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-UnsignedInteger/#returns_68","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-UnsignedInteger/#returns_69","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-UnsignedInteger/#returns_70","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-UnsignedInteger/#returns_71","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-UnsignedInteger/#returns_72","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-UnsignedInteger/#returns_73","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-UnsignedInteger/#returns_74","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-UnsignedInteger/#returns_75","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-UnsignedInteger/#returns_76","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-UnsignedInteger/#returns_77","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-UnsignedInteger/#returns_78","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-UnsignedInteger/#returns_79","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-UnsignedInteger/#returns_80","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-UnsignedInteger/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-UnsignedInteger/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-UnsignedInteger/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_98","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_99","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-UnsignedInteger/#parameters_50","text":"that: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_100","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections--index/","text":"No package doc string provided for collections. Public Types \u00b6 primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues type MinHeap type MaxHeap class BinaryHeap type BinaryHeapPriority primitive MinHeapPriority primitive MaxHeapPriority interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags","title":"Package"},{"location":"collections--index/#public-types","text":"primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues type MinHeap type MaxHeap class BinaryHeap type BinaryHeapPriority primitive MinHeapPriority primitive MaxHeapPriority interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags","title":"Public Types"},{"location":"collections-BinaryHeap/","text":"BinaryHeap[A: Comparable [A] #read, P: (_BinaryHeapPriority[A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))] \u00b6 [Source] A priority queue implemented as a binary heap. The BinaryHeapPriority type parameter determines whether this is max-heap or a min-heap. class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))] Constructors \u00b6 create \u00b6 [Source] Create an empty heap with space for len elements. new ref create( len: USize val) : BinaryHeap[A, P] ref^ Parameters \u00b6 len: USize val Returns \u00b6 BinaryHeap [A, P] ref^ Public Functions \u00b6 clear \u00b6 [Source] Remove all elements from the heap. fun ref clear() : None val Returns \u00b6 None val size \u00b6 [Source] Return the number of elements in the heap. fun box size() : USize val Returns \u00b6 USize val peek \u00b6 [Source] Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. fun box peek() : this->A ? Returns \u00b6 this->A ? push \u00b6 [Source] Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref pop() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val values \u00b6 [Source] Return an iterator for the elements in the heap. The order of elements is arbitrary. fun box values() : ArrayValues[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayValues [A, this-> Array [A] ref] ref^","title":"class BinaryHeap"},{"location":"collections-BinaryHeap/#binaryheapa-comparablea-read-p-_binaryheapprioritya-val-minheapprioritya-val-maxheapprioritya-val","text":"[Source] A priority queue implemented as a binary heap. The BinaryHeapPriority type parameter determines whether this is max-heap or a min-heap. class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))]","title":"BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]"},{"location":"collections-BinaryHeap/#constructors","text":"","title":"Constructors"},{"location":"collections-BinaryHeap/#create","text":"[Source] Create an empty heap with space for len elements. new ref create( len: USize val) : BinaryHeap[A, P] ref^","title":"create"},{"location":"collections-BinaryHeap/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-BinaryHeap/#returns","text":"BinaryHeap [A, P] ref^","title":"Returns"},{"location":"collections-BinaryHeap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-BinaryHeap/#clear","text":"[Source] Remove all elements from the heap. fun ref clear() : None val","title":"clear"},{"location":"collections-BinaryHeap/#returns_1","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#size","text":"[Source] Return the number of elements in the heap. fun box size() : USize val","title":"size"},{"location":"collections-BinaryHeap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-BinaryHeap/#peek","text":"[Source] Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. fun box peek() : this->A ?","title":"peek"},{"location":"collections-BinaryHeap/#returns_3","text":"this->A ?","title":"Returns"},{"location":"collections-BinaryHeap/#push","text":"[Source] Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref push( value: A) : None val","title":"push"},{"location":"collections-BinaryHeap/#parameters_1","text":"value: A","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_4","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#pop","text":"[Source] Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-BinaryHeap/#returns_5","text":"A^ ?","title":"Returns"},{"location":"collections-BinaryHeap/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"collections-BinaryHeap/#parameters_2","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_6","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#concat","text":"[Source] Add len iterated elements, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"collections-BinaryHeap/#parameters_3","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_7","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#values","text":"[Source] Return an iterator for the elements in the heap. The order of elements is arbitrary. fun box values() : ArrayValues[A, this->Array[A] ref] ref^","title":"values"},{"location":"collections-BinaryHeap/#returns_8","text":"ArrayValues [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"collections-BinaryHeapPriority/","text":"BinaryHeapPriority[A: Comparable [A] #read] \u00b6 [Source] type BinaryHeapPriority[A: Comparable[A] #read] is (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val)) Type Alias For \u00b6 (_BinaryHeapPriority[A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))","title":"type BinaryHeapPriority"},{"location":"collections-BinaryHeapPriority/#binaryheapprioritya-comparablea-read","text":"[Source] type BinaryHeapPriority[A: Comparable[A] #read] is (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))","title":"BinaryHeapPriority[A: Comparable[A] #read]"},{"location":"collections-BinaryHeapPriority/#type-alias-for","text":"(_BinaryHeapPriority[A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))","title":"Type Alias For"},{"location":"collections-Flag/","text":"Flag[A: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)] Public Functions \u00b6 value \u00b6 [Source] fun box value() : A Returns \u00b6 A","title":"interface Flag"},{"location":"collections-Flag/#flaga-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","text":"[Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"collections-Flag/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flag/#value","text":"[Source] fun box value() : A","title":"value"},{"location":"collections-Flag/#returns","text":"A","title":"Returns"},{"location":"collections-Flags/","text":"Flags[A: Flag [B] val, optional B: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [B] val)] \u00b6 [Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[B] val)] is Comparable[Flags[A, B] box] ref Implements \u00b6 Comparable [ Flags [A, B] box] ref Constructors \u00b6 create \u00b6 [Source] new iso create() : Flags[A, B] iso^ Returns \u00b6 Flags [A, B] iso^ Public Functions \u00b6 value \u00b6 [Source] Returns the bit encoding of the set flags. fun box value() : B Returns \u00b6 B apply \u00b6 [Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val Parameters \u00b6 flag: A Returns \u00b6 Bool val all \u00b6 [Source] Sets all bits, including undefined flags. fun ref all() : None val Returns \u00b6 None val clear \u00b6 [Source] Unsets all flags. fun ref clear() : None val Returns \u00b6 None val set \u00b6 [Source] Sets the flag. fun ref set( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val unset \u00b6 [Source] Unsets the flag. fun ref unset( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val flip \u00b6 [Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val union \u00b6 [Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val intersect \u00b6 [Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val difference \u00b6 [Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val remove \u00b6 [Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val add \u00b6 [Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^ Parameters \u00b6 flag: A Returns \u00b6 Flags [A, B] iso^ sub \u00b6 [Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^ Parameters \u00b6 flag: A Returns \u00b6 Flags [A, B] iso^ op_or \u00b6 [Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ op_and \u00b6 [Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ op_xor \u00b6 [Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ without \u00b6 [Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ clone \u00b6 [Source] Create a clone. fun box clone() : Flags[A, B] iso^ Returns \u00b6 Flags [A, B] iso^ eq \u00b6 [Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val gt \u00b6 [Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val ge \u00b6 [Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val compare \u00b6 [Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 ( Less val | Equal val | Greater val) ne \u00b6 [Source] fun box ne( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val","title":"class Flags"},{"location":"collections-Flags/#flagsa-flagb-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integerb-val","text":"[Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[B] val)] is Comparable[Flags[A, B] box] ref","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"},{"location":"collections-Flags/#implements","text":"Comparable [ Flags [A, B] box] ref","title":"Implements"},{"location":"collections-Flags/#constructors","text":"","title":"Constructors"},{"location":"collections-Flags/#create","text":"[Source] new iso create() : Flags[A, B] iso^","title":"create"},{"location":"collections-Flags/#returns","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flags/#value","text":"[Source] Returns the bit encoding of the set flags. fun box value() : B","title":"value"},{"location":"collections-Flags/#returns_1","text":"B","title":"Returns"},{"location":"collections-Flags/#apply","text":"[Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val","title":"apply"},{"location":"collections-Flags/#parameters","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#all","text":"[Source] Sets all bits, including undefined flags. fun ref all() : None val","title":"all"},{"location":"collections-Flags/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Flags/#clear","text":"[Source] Unsets all flags. fun ref clear() : None val","title":"clear"},{"location":"collections-Flags/#returns_4","text":"None val","title":"Returns"},{"location":"collections-Flags/#set","text":"[Source] Sets the flag. fun ref set( flag: A) : None val","title":"set"},{"location":"collections-Flags/#parameters_1","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_5","text":"None val","title":"Returns"},{"location":"collections-Flags/#unset","text":"[Source] Unsets the flag. fun ref unset( flag: A) : None val","title":"unset"},{"location":"collections-Flags/#parameters_2","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Flags/#flip","text":"[Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val","title":"flip"},{"location":"collections-Flags/#parameters_3","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_7","text":"None val","title":"Returns"},{"location":"collections-Flags/#union","text":"[Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val","title":"union"},{"location":"collections-Flags/#parameters_4","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_8","text":"None val","title":"Returns"},{"location":"collections-Flags/#intersect","text":"[Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val","title":"intersect"},{"location":"collections-Flags/#parameters_5","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_9","text":"None val","title":"Returns"},{"location":"collections-Flags/#difference","text":"[Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val","title":"difference"},{"location":"collections-Flags/#parameters_6","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_10","text":"None val","title":"Returns"},{"location":"collections-Flags/#remove","text":"[Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val","title":"remove"},{"location":"collections-Flags/#parameters_7","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_11","text":"None val","title":"Returns"},{"location":"collections-Flags/#add","text":"[Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^","title":"add"},{"location":"collections-Flags/#parameters_8","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_12","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#sub","text":"[Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^","title":"sub"},{"location":"collections-Flags/#parameters_9","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_13","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_or","text":"[Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_or"},{"location":"collections-Flags/#parameters_10","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_14","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_and","text":"[Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_and"},{"location":"collections-Flags/#parameters_11","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_15","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_xor","text":"[Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_xor"},{"location":"collections-Flags/#parameters_12","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_16","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#without","text":"[Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^","title":"without"},{"location":"collections-Flags/#parameters_13","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_17","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#clone","text":"[Source] Create a clone. fun box clone() : Flags[A, B] iso^","title":"clone"},{"location":"collections-Flags/#returns_18","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#eq","text":"[Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val","title":"eq"},{"location":"collections-Flags/#parameters_14","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_19","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#lt","text":"[Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val","title":"lt"},{"location":"collections-Flags/#parameters_15","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#le","text":"[Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val","title":"le"},{"location":"collections-Flags/#parameters_16","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#gt","text":"[Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val","title":"gt"},{"location":"collections-Flags/#parameters_17","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#ge","text":"[Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val","title":"ge"},{"location":"collections-Flags/#parameters_18","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#compare","text":"[Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-Flags/#parameters_19","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_24","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Flags/#ne","text":"[Source] fun box ne( that: Flags[A, B] box) : Bool val","title":"ne"},{"location":"collections-Flags/#parameters_20","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/","text":"HashByteSeq \u00b6 [Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val Implements \u00b6 HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashByteSeq val^ Returns \u00b6 HashByteSeq val^ Public Functions \u00b6 hash \u00b6 [Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val Parameters \u00b6 x: ( String box | Array [ U8 val] box) Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val Parameters \u00b6 x: ( String box | Array [ U8 val] box) Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val Parameters \u00b6 x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashByteSeq val) : Bool val Parameters \u00b6 that: HashByteSeq val Returns \u00b6 Bool val","title":"primitive HashByteSeq"},{"location":"collections-HashByteSeq/#hashbyteseq","text":"[Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val","title":"HashByteSeq"},{"location":"collections-HashByteSeq/#implements","text":"HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val","title":"Implements"},{"location":"collections-HashByteSeq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashByteSeq/#create","text":"[Source] new val create() : HashByteSeq val^","title":"create"},{"location":"collections-HashByteSeq/#returns","text":"HashByteSeq val^","title":"Returns"},{"location":"collections-HashByteSeq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashByteSeq/#hash","text":"[Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val","title":"hash"},{"location":"collections-HashByteSeq/#parameters","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashByteSeq/#hash64","text":"[Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val","title":"hash64"},{"location":"collections-HashByteSeq/#parameters_1","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashByteSeq/#eq","text":"[Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val","title":"eq"},{"location":"collections-HashByteSeq/#parameters_2","text":"x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/#ne","text":"[Source] fun box ne( that: HashByteSeq val) : Bool val","title":"ne"},{"location":"collections-HashByteSeq/#parameters_3","text":"that: HashByteSeq val","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/","text":"HashEq[A: ( Hashable #read & Equatable [A] #read)] \u00b6 [Source] primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] val Implements \u00b6 HashFunction [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashEq[A] val^ Returns \u00b6 HashEq [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Use the hash function from the type parameter. fun box hash( x: box->A) : USize val Parameters \u00b6 x: box->A Returns \u00b6 USize val eq \u00b6 [Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val Parameters \u00b6 x: box->A y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashEq[A] val) : Bool val Parameters \u00b6 that: HashEq [A] val Returns \u00b6 Bool val","title":"primitive HashEq"},{"location":"collections-HashEq/#hasheqa-hashable-read-equatablea-read","text":"[Source] primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] val","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq/#implements","text":"HashFunction [A] val","title":"Implements"},{"location":"collections-HashEq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq/#create","text":"[Source] new val create() : HashEq[A] val^","title":"create"},{"location":"collections-HashEq/#returns","text":"HashEq [A] val^","title":"Returns"},{"location":"collections-HashEq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq/#hash","text":"[Source] Use the hash function from the type parameter. fun box hash( x: box->A) : USize val","title":"hash"},{"location":"collections-HashEq/#parameters","text":"x: box->A","title":"Parameters"},{"location":"collections-HashEq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashEq/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val","title":"eq"},{"location":"collections-HashEq/#parameters_1","text":"x: box->A y: box->A","title":"Parameters"},{"location":"collections-HashEq/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/#ne","text":"[Source] fun box ne( that: HashEq[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq/#parameters_2","text":"that: HashEq [A] val","title":"Parameters"},{"location":"collections-HashEq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/","text":"HashEq64[A: ( Hashable64 #read & Equatable [A] #read)] \u00b6 [Source] primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] val Implements \u00b6 HashFunction64 [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashEq64[A] val^ Returns \u00b6 HashEq64 [A] val^ Public Functions \u00b6 hash64 \u00b6 [Source] Use the hash function from the type parameter. fun box hash64( x: box->A) : U64 val Parameters \u00b6 x: box->A Returns \u00b6 U64 val eq \u00b6 [Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val Parameters \u00b6 x: box->A y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashEq64[A] val) : Bool val Parameters \u00b6 that: HashEq64 [A] val Returns \u00b6 Bool val","title":"primitive HashEq64"},{"location":"collections-HashEq64/#hasheq64a-hashable64-read-equatablea-read","text":"[Source] primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] val","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq64/#implements","text":"HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashEq64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq64/#create","text":"[Source] new val create() : HashEq64[A] val^","title":"create"},{"location":"collections-HashEq64/#returns","text":"HashEq64 [A] val^","title":"Returns"},{"location":"collections-HashEq64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq64/#hash64","text":"[Source] Use the hash function from the type parameter. fun box hash64( x: box->A) : U64 val","title":"hash64"},{"location":"collections-HashEq64/#parameters","text":"x: box->A","title":"Parameters"},{"location":"collections-HashEq64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashEq64/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val","title":"eq"},{"location":"collections-HashEq64/#parameters_1","text":"x: box->A y: box->A","title":"Parameters"},{"location":"collections-HashEq64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/#ne","text":"[Source] fun box ne( that: HashEq64[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq64/#parameters_2","text":"that: HashEq64 [A] val","title":"Parameters"},{"location":"collections-HashEq64/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction/","text":"HashFunction[A: A] \u00b6 [Source] A pluggable hash function. interface val HashFunction[A: A] Constructors \u00b6 create \u00b6 [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^ Returns \u00b6 HashFunction [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box->A!) : USize val Parameters \u00b6 x: box->A! Returns \u00b6 USize val eq \u00b6 [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val","title":"interface HashFunction"},{"location":"collections-HashFunction/#hashfunctiona-a","text":"[Source] A pluggable hash function. interface val HashFunction[A: A]","title":"HashFunction[A: A]"},{"location":"collections-HashFunction/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^","title":"create"},{"location":"collections-HashFunction/#returns","text":"HashFunction [A] val^","title":"Returns"},{"location":"collections-HashFunction/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction/#hash","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box->A!) : USize val","title":"hash"},{"location":"collections-HashFunction/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashFunction/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashFunction/#parameters_1","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction64/","text":"HashFunction64[A: A] \u00b6 [Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A] Constructors \u00b6 create \u00b6 [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^ Returns \u00b6 HashFunction64 [A] val^ Public Functions \u00b6 hash64 \u00b6 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box->A!) : U64 val Parameters \u00b6 x: box->A! Returns \u00b6 U64 val eq \u00b6 [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val","title":"interface HashFunction64"},{"location":"collections-HashFunction64/#hashfunction64a-a","text":"[Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A]","title":"HashFunction64[A: A]"},{"location":"collections-HashFunction64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction64/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^","title":"create"},{"location":"collections-HashFunction64/#returns","text":"HashFunction64 [A] val^","title":"Returns"},{"location":"collections-HashFunction64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction64/#hash64","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box->A!) : U64 val","title":"hash64"},{"location":"collections-HashFunction64/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashFunction64/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashFunction64/#parameters_1","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/","text":"HashIs[A: A] \u00b6 [Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val Implements \u00b6 HashFunction [A] val HashFunction64 [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashIs[A] val^ Returns \u00b6 HashIs [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Hash the identity rather than the contents. fun box hash( x: box->A!) : USize val Parameters \u00b6 x: box->A! Returns \u00b6 USize val hash64 \u00b6 [Source] Hash the identity rather than the contents. fun box hash64( x: box->A!) : U64 val Parameters \u00b6 x: box->A! Returns \u00b6 U64 val eq \u00b6 [Source] Determine equality by identity rather than structurally. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashIs[A] val) : Bool val Parameters \u00b6 that: HashIs [A] val Returns \u00b6 Bool val","title":"primitive HashIs"},{"location":"collections-HashIs/#hashisa-a","text":"[Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val","title":"HashIs[A: A]"},{"location":"collections-HashIs/#implements","text":"HashFunction [A] val HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashIs/#constructors","text":"","title":"Constructors"},{"location":"collections-HashIs/#create","text":"[Source] new val create() : HashIs[A] val^","title":"create"},{"location":"collections-HashIs/#returns","text":"HashIs [A] val^","title":"Returns"},{"location":"collections-HashIs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashIs/#hash","text":"[Source] Hash the identity rather than the contents. fun box hash( x: box->A!) : USize val","title":"hash"},{"location":"collections-HashIs/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashIs/#hash64","text":"[Source] Hash the identity rather than the contents. fun box hash64( x: box->A!) : U64 val","title":"hash64"},{"location":"collections-HashIs/#parameters_1","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashIs/#eq","text":"[Source] Determine equality by identity rather than structurally. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashIs/#parameters_2","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/#ne","text":"[Source] fun box ne( that: HashIs[A] val) : Bool val","title":"ne"},{"location":"collections-HashIs/#parameters_3","text":"that: HashIs [A] val","title":"Parameters"},{"location":"collections-HashIs/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/","text":"HashMap[K: K, V: V, H: HashFunction [K] val] \u00b6 [Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : HashMap[K, V, H] ref^ Parameters \u00b6 prealloc: USize val = 6 Returns \u00b6 HashMap [K, V, H] ref^ Public Functions \u00b6 size \u00b6 [Source] The number of items in the map. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the map. Resize will happen when size / space >= 0.75. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box->K!) : this->V ? Parameters \u00b6 key: box->K! Returns \u00b6 this->V ? update \u00b6 [Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val) Parameters \u00b6 key: K value: V Returns \u00b6 (V^ | None val) upsert \u00b6 [Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V! Parameters \u00b6 key: K value: V f: {(V, V): V^}[K, V, H] box Returns \u00b6 V! insert \u00b6 [Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V! Parameters \u00b6 key: K value: V Returns \u00b6 V! insert_if_absent \u00b6 [Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V! Parameters \u00b6 key: K value: V Returns \u00b6 V! remove \u00b6 [Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box->K!) : (K^ , V^) ? Parameters \u00b6 key: box->K! Returns \u00b6 (K^ , V^) ? get_or_else \u00b6 [Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box->K!, alt: this->V) : this->V Parameters \u00b6 key: box->K! alt: this->V Returns \u00b6 this->V contains \u00b6 [Source] Checks whether the map contains the key k fun box contains( k: box->K!) : Bool val Parameters \u00b6 k: box->K! Returns \u00b6 Bool val concat \u00b6 [Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val Parameters \u00b6 iter: Iterator [(K^ , V^)] ref Returns \u00b6 None val add[optional H2: HashFunction [this->K!] val] \u00b6 [Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this->K!] val]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2] ref^ Parameters \u00b6 key: this->K! value: this->V! Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ sub[optional H2: HashFunction [this->K!] val] \u00b6 [Source] This without the given key. fun box sub[optional H2: HashFunction[this->K!] val]( key: this->K!) : HashMap[this->K!, this->V!, H2] ref^ Parameters \u00b6 key: this->K! Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ next_index \u00b6 [Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ? Parameters \u00b6 prev: USize val = call Returns \u00b6 USize val ? index \u00b6 [Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this->K , this->V) ? Parameters \u00b6 i: USize val Returns \u00b6 (this->K , this->V) ? compact \u00b6 [Source] Minimise the memory used for the map. fun ref compact() : None val Returns \u00b6 None val clone[optional H2: HashFunction [this->K!] val] \u00b6 [Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this->K!] val]() : HashMap[this->K!, this->V!, H2] ref^ Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ clear \u00b6 [Source] Remove all entries. fun ref clear() : None val Returns \u00b6 None val keys \u00b6 [Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^ values \u00b6 [Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^ pairs \u00b6 [Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"class HashMap"},{"location":"collections-HashMap/#hashmapk-k-v-v-h-hashfunctionk-val","text":"[Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val]","title":"HashMap[K: K, V: V, H: HashFunction[K] val]"},{"location":"collections-HashMap/#constructors","text":"","title":"Constructors"},{"location":"collections-HashMap/#create","text":"[Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : HashMap[K, V, H] ref^","title":"create"},{"location":"collections-HashMap/#parameters","text":"prealloc: USize val = 6","title":"Parameters"},{"location":"collections-HashMap/#returns","text":"HashMap [K, V, H] ref^","title":"Returns"},{"location":"collections-HashMap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashMap/#size","text":"[Source] The number of items in the map. fun box size() : USize val","title":"size"},{"location":"collections-HashMap/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#space","text":"[Source] The available space in the map. Resize will happen when size / space >= 0.75. fun box space() : USize val","title":"space"},{"location":"collections-HashMap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#apply","text":"[Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box->K!) : this->V ?","title":"apply"},{"location":"collections-HashMap/#parameters_1","text":"key: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_3","text":"this->V ?","title":"Returns"},{"location":"collections-HashMap/#update","text":"[Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val)","title":"update"},{"location":"collections-HashMap/#parameters_2","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_4","text":"(V^ | None val)","title":"Returns"},{"location":"collections-HashMap/#upsert","text":"[Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V!","title":"upsert"},{"location":"collections-HashMap/#parameters_3","text":"key: K value: V f: {(V, V): V^}[K, V, H] box","title":"Parameters"},{"location":"collections-HashMap/#returns_5","text":"V!","title":"Returns"},{"location":"collections-HashMap/#insert","text":"[Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V!","title":"insert"},{"location":"collections-HashMap/#parameters_4","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_6","text":"V!","title":"Returns"},{"location":"collections-HashMap/#insert_if_absent","text":"[Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V!","title":"insert_if_absent"},{"location":"collections-HashMap/#parameters_5","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_7","text":"V!","title":"Returns"},{"location":"collections-HashMap/#remove","text":"[Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box->K!) : (K^ , V^) ?","title":"remove"},{"location":"collections-HashMap/#parameters_6","text":"key: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_8","text":"(K^ , V^) ?","title":"Returns"},{"location":"collections-HashMap/#get_or_else","text":"[Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box->K!, alt: this->V) : this->V","title":"get_or_else"},{"location":"collections-HashMap/#parameters_7","text":"key: box->K! alt: this->V","title":"Parameters"},{"location":"collections-HashMap/#returns_9","text":"this->V","title":"Returns"},{"location":"collections-HashMap/#contains","text":"[Source] Checks whether the map contains the key k fun box contains( k: box->K!) : Bool val","title":"contains"},{"location":"collections-HashMap/#parameters_8","text":"k: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_10","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/#concat","text":"[Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val","title":"concat"},{"location":"collections-HashMap/#parameters_9","text":"iter: Iterator [(K^ , V^)] ref","title":"Parameters"},{"location":"collections-HashMap/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashMap/#addoptional-h2-hashfunctionthis-k-val","text":"[Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this->K!] val]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2] ref^","title":"add[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_10","text":"key: this->K! value: this->V!","title":"Parameters"},{"location":"collections-HashMap/#returns_12","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#suboptional-h2-hashfunctionthis-k-val","text":"[Source] This without the given key. fun box sub[optional H2: HashFunction[this->K!] val]( key: this->K!) : HashMap[this->K!, this->V!, H2] ref^","title":"sub[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_11","text":"key: this->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_13","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#next_index","text":"[Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ?","title":"next_index"},{"location":"collections-HashMap/#parameters_12","text":"prev: USize val = call","title":"Parameters"},{"location":"collections-HashMap/#returns_14","text":"USize val ?","title":"Returns"},{"location":"collections-HashMap/#index","text":"[Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this->K , this->V) ?","title":"index"},{"location":"collections-HashMap/#parameters_13","text":"i: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_15","text":"(this->K , this->V) ?","title":"Returns"},{"location":"collections-HashMap/#compact","text":"[Source] Minimise the memory used for the map. fun ref compact() : None val","title":"compact"},{"location":"collections-HashMap/#returns_16","text":"None val","title":"Returns"},{"location":"collections-HashMap/#cloneoptional-h2-hashfunctionthis-k-val","text":"[Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this->K!] val]() : HashMap[this->K!, this->V!, H2] ref^","title":"clone[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#returns_17","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#clear","text":"[Source] Remove all entries. fun ref clear() : None val","title":"clear"},{"location":"collections-HashMap/#returns_18","text":"None val","title":"Returns"},{"location":"collections-HashMap/#keys","text":"[Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"keys"},{"location":"collections-HashMap/#returns_19","text":"MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#values","text":"[Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"values"},{"location":"collections-HashMap/#returns_20","text":"MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#pairs","text":"[Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"pairs"},{"location":"collections-HashMap/#returns_21","text":"MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashSet/","text":"HashSet[A: A, H: HashFunction [A!] val] \u00b6 [Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref Implements \u00b6 Comparable [ HashSet [A, H] box] ref Constructors \u00b6 create \u00b6 [Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = 8) : HashSet[A, H] ref^ Parameters \u00b6 prealloc: USize val = 8 Returns \u00b6 HashSet [A, H] ref^ Public Functions \u00b6 size \u00b6 [Source] The number of items in the set. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the set. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box->A!) : this->A ? Parameters \u00b6 value: box->A! Returns \u00b6 this->A ? contains \u00b6 [Source] Checks whether the set contains the value. fun box contains( value: box->A!) : Bool val Parameters \u00b6 value: box->A! Returns \u00b6 Bool val clear \u00b6 [Source] Remove all elements from the set. fun ref clear() : None val Returns \u00b6 None val set \u00b6 [Source] Add a value to the set. fun ref set( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val unset \u00b6 [Source] Remove a value from the set. fun ref unset( value: box->A!) : None val Parameters \u00b6 value: box->A! Returns \u00b6 None val extract \u00b6 [Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box->A!) : A^ ? Parameters \u00b6 value: box->A! Returns \u00b6 A^ ? union \u00b6 [Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val Parameters \u00b6 that: Iterator [A^] ref Returns \u00b6 None val intersect[optional K: HashFunction [box->A!] val] \u00b6 [Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box->A!] val]( that: HashSet[box->A!, K] ref) : None val Parameters \u00b6 that: HashSet [box->A!, K] ref Returns \u00b6 None val difference \u00b6 [Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val Parameters \u00b6 that: Iterator [A^] ref Returns \u00b6 None val remove \u00b6 [Source] Remove everything that is in that. fun ref remove( that: Iterator[box->A!] ref) : None val Parameters \u00b6 that: Iterator [box->A!] ref Returns \u00b6 None val add[optional K: HashFunction [this->A!] val] \u00b6 [Source] Add a value to the set. fun box add[optional K: HashFunction[this->A!] val]( value: this->A!) : HashSet[this->A!, K] ref^ Parameters \u00b6 value: this->A! Returns \u00b6 HashSet [this->A!, K] ref^ sub[optional K: HashFunction [this->A!] val] \u00b6 [Source] Remove a value from the set. fun box sub[optional K: HashFunction[this->A!] val]( value: box->this->A!) : HashSet[this->A!, K] ref^ Parameters \u00b6 value: box->this->A! Returns \u00b6 HashSet [this->A!, K] ref^ op_or[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ op_and[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ op_xor[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ without[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ clone[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this->A!] val]() : HashSet[this->A!, K] ref^ Returns \u00b6 HashSet [this->A!, K] ref^ eq \u00b6 [Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val ne \u00b6 [Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val gt \u00b6 [Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val ge \u00b6 [Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val next_index \u00b6 [Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ? Parameters \u00b6 prev: USize val = call Returns \u00b6 USize val ? index \u00b6 [Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? values \u00b6 [Source] Return an iterator over the values. fun box values() : SetValues[A, H, this->HashSet[A, H] ref] ref^ Returns \u00b6 SetValues [A, H, this-> HashSet [A, H] ref] ref^ compare \u00b6 [Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 ( Less val | Equal val | Greater val)","title":"class HashSet"},{"location":"collections-HashSet/#hashseta-a-h-hashfunctiona-val","text":"[Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref","title":"HashSet[A: A, H: HashFunction[A!] val]"},{"location":"collections-HashSet/#implements","text":"Comparable [ HashSet [A, H] box] ref","title":"Implements"},{"location":"collections-HashSet/#constructors","text":"","title":"Constructors"},{"location":"collections-HashSet/#create","text":"[Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = 8) : HashSet[A, H] ref^","title":"create"},{"location":"collections-HashSet/#parameters","text":"prealloc: USize val = 8","title":"Parameters"},{"location":"collections-HashSet/#returns","text":"HashSet [A, H] ref^","title":"Returns"},{"location":"collections-HashSet/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashSet/#size","text":"[Source] The number of items in the set. fun box size() : USize val","title":"size"},{"location":"collections-HashSet/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#space","text":"[Source] The available space in the set. fun box space() : USize val","title":"space"},{"location":"collections-HashSet/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#apply","text":"[Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box->A!) : this->A ?","title":"apply"},{"location":"collections-HashSet/#parameters_1","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_3","text":"this->A ?","title":"Returns"},{"location":"collections-HashSet/#contains","text":"[Source] Checks whether the set contains the value. fun box contains( value: box->A!) : Bool val","title":"contains"},{"location":"collections-HashSet/#parameters_2","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#clear","text":"[Source] Remove all elements from the set. fun ref clear() : None val","title":"clear"},{"location":"collections-HashSet/#returns_5","text":"None val","title":"Returns"},{"location":"collections-HashSet/#set","text":"[Source] Add a value to the set. fun ref set( value: A) : None val","title":"set"},{"location":"collections-HashSet/#parameters_3","text":"value: A","title":"Parameters"},{"location":"collections-HashSet/#returns_6","text":"None val","title":"Returns"},{"location":"collections-HashSet/#unset","text":"[Source] Remove a value from the set. fun ref unset( value: box->A!) : None val","title":"unset"},{"location":"collections-HashSet/#parameters_4","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_7","text":"None val","title":"Returns"},{"location":"collections-HashSet/#extract","text":"[Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box->A!) : A^ ?","title":"extract"},{"location":"collections-HashSet/#parameters_5","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_8","text":"A^ ?","title":"Returns"},{"location":"collections-HashSet/#union","text":"[Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val","title":"union"},{"location":"collections-HashSet/#parameters_6","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_9","text":"None val","title":"Returns"},{"location":"collections-HashSet/#intersectoptional-k-hashfunctionbox-a-val","text":"[Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box->A!] val]( that: HashSet[box->A!, K] ref) : None val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_7","text":"that: HashSet [box->A!, K] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_10","text":"None val","title":"Returns"},{"location":"collections-HashSet/#difference","text":"[Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val","title":"difference"},{"location":"collections-HashSet/#parameters_8","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashSet/#remove","text":"[Source] Remove everything that is in that. fun ref remove( that: Iterator[box->A!] ref) : None val","title":"remove"},{"location":"collections-HashSet/#parameters_9","text":"that: Iterator [box->A!] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_12","text":"None val","title":"Returns"},{"location":"collections-HashSet/#addoptional-k-hashfunctionthis-a-val","text":"[Source] Add a value to the set. fun box add[optional K: HashFunction[this->A!] val]( value: this->A!) : HashSet[this->A!, K] ref^","title":"add[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_10","text":"value: this->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_13","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#suboptional-k-hashfunctionthis-a-val","text":"[Source] Remove a value from the set. fun box sub[optional K: HashFunction[this->A!] val]( value: box->this->A!) : HashSet[this->A!, K] ref^","title":"sub[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_11","text":"value: box->this->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_14","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_oroptional-k-hashfunctionthis-a-val","text":"[Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_or[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_12","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_15","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_andoptional-k-hashfunctionthis-a-val","text":"[Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_and[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_13","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_16","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_xoroptional-k-hashfunctionthis-a-val","text":"[Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_14","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_17","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#withoutoptional-k-hashfunctionthis-a-val","text":"[Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"without[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_15","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_18","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#cloneoptional-k-hashfunctionthis-a-val","text":"[Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this->A!] val]() : HashSet[this->A!, K] ref^","title":"clone[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#returns_19","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#eq","text":"[Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val","title":"eq"},{"location":"collections-HashSet/#parameters_16","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ne","text":"[Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val","title":"ne"},{"location":"collections-HashSet/#parameters_17","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#lt","text":"[Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val","title":"lt"},{"location":"collections-HashSet/#parameters_18","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#le","text":"[Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val","title":"le"},{"location":"collections-HashSet/#parameters_19","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#gt","text":"[Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val","title":"gt"},{"location":"collections-HashSet/#parameters_20","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_24","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ge","text":"[Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val","title":"ge"},{"location":"collections-HashSet/#parameters_21","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#next_index","text":"[Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ?","title":"next_index"},{"location":"collections-HashSet/#parameters_22","text":"prev: USize val = call","title":"Parameters"},{"location":"collections-HashSet/#returns_26","text":"USize val ?","title":"Returns"},{"location":"collections-HashSet/#index","text":"[Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this->A ?","title":"index"},{"location":"collections-HashSet/#parameters_23","text":"i: USize val","title":"Parameters"},{"location":"collections-HashSet/#returns_27","text":"this->A ?","title":"Returns"},{"location":"collections-HashSet/#values","text":"[Source] Return an iterator over the values. fun box values() : SetValues[A, H, this->HashSet[A, H] ref] ref^","title":"values"},{"location":"collections-HashSet/#returns_28","text":"SetValues [A, H, this-> HashSet [A, H] ref] ref^","title":"Returns"},{"location":"collections-HashSet/#compare","text":"[Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-HashSet/#parameters_24","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_29","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Hashable/","text":"Hashable \u00b6 [Source] Anything with a hash method is hashable. interface ref Hashable Public Functions \u00b6 hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val","title":"interface Hashable"},{"location":"collections-Hashable/#hashable","text":"[Source] Anything with a hash method is hashable. interface ref Hashable","title":"Hashable"},{"location":"collections-Hashable/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"collections-Hashable/#returns","text":"USize val","title":"Returns"},{"location":"collections-Hashable64/","text":"Hashable64 \u00b6 [Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64 Public Functions \u00b6 hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val","title":"interface Hashable64"},{"location":"collections-Hashable64/#hashable64","text":"[Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64","title":"Hashable64"},{"location":"collections-Hashable64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"collections-Hashable64/#returns","text":"U64 val","title":"Returns"},{"location":"collections-List/","text":"List[A: A] \u00b6 [Source] A doubly linked list. (The following is paraphrased from Wikipedia .) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc. Example program \u00b6 There are a lot of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end class ref List[A: A] is Seq[A] ref Implements \u00b6 Seq [A] ref Constructors \u00b6 create \u00b6 [Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = 0) : List[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 List [A] ref^ unit \u00b6 [Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^ Parameters \u00b6 a: A Returns \u00b6 List [A] ref^ from \u00b6 [Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^ Parameters \u00b6 seq: Array [A^] ref Returns \u00b6 List [A] ref^ Public Functions \u00b6 reserve \u00b6 [Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val size \u00b6 [Source] Returns the number of items in the list. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = 0) : this->A ? Parameters \u00b6 i: USize val = 0 Returns \u00b6 this->A ? update \u00b6 [Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? index \u00b6 [Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this->ListNode[A] ref ? Parameters \u00b6 i: USize val Returns \u00b6 this-> ListNode [A] ref ? remove \u00b6 [Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ? Parameters \u00b6 i: USize val Returns \u00b6 ListNode [A] ref ? clear \u00b6 [Source] Empties the list. fun ref clear() : None val Returns \u00b6 None val head \u00b6 [Source] Get the head of the list. fun box head() : this->ListNode[A] ref ? Returns \u00b6 this-> ListNode [A] ref ? tail \u00b6 [Source] Get the tail of the list. fun box tail() : this->ListNode[A] ref ? Returns \u00b6 this-> ListNode [A] ref ? prepend_node \u00b6 [Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val Parameters \u00b6 node: ListNode [A] ref Returns \u00b6 None val append_node \u00b6 [Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val Parameters \u00b6 node: ListNode [A] ref Returns \u00b6 None val append_list \u00b6 [Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val Parameters \u00b6 that: List [A] ref Returns \u00b6 None val prepend_list \u00b6 [Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val Parameters \u00b6 that: List [A] ref Returns \u00b6 None val push \u00b6 [Source] Adds a value to the tail of the list. fun ref push( a: A) : None val Parameters \u00b6 a: A Returns \u00b6 None val pop \u00b6 [Source] Removes a value from the tail of the list. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val Parameters \u00b6 a: A Returns \u00b6 None val shift \u00b6 [Source] Removes a value from the head of the list. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val truncate \u00b6 [Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val clone \u00b6 [Source] Clone the list. fun box clone() : List[this->A!] ref^ Returns \u00b6 List [this->A!] ref^ map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this->A!): B^}[A, B] box) : List[B] ref^ Parameters \u00b6 f: {(this->A!): B^}[A, B] box Returns \u00b6 List [B] ref^ flat_map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this->A!): List[B]}[A, B] box) : List[B] ref^ Parameters \u00b6 f: {(this->A!): List[B]}[A, B] box Returns \u00b6 List [B] ref^ filter \u00b6 [Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^ Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 List [this->A!] ref^ fold[B: B] \u00b6 [Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this->A!): B^}[A, B] box, acc: B) : B Parameters \u00b6 f: {(B!, this->A!): B^}[A, B] box acc: B Returns \u00b6 B every \u00b6 [Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val exists \u00b6 [Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val partition \u00b6 [Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this->A!): Bool}[A] box) : (List[this->A!] ref^ , List[this->A!] ref^) Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 ( List [this->A!] ref^ , List [this->A!] ref^) drop \u00b6 [Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this->A!] ref^ Parameters \u00b6 n: USize val Returns \u00b6 List [this->A!] ref^ take \u00b6 [Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this->A!] ref Parameters \u00b6 n: USize val Returns \u00b6 List [this->A!] ref take_while \u00b6 [Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^ Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 List [this->A!] ref^ reverse \u00b6 [Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this->A!] ref^ Returns \u00b6 List [this->A!] ref^ contains[optional B: (A & HasEq [A!] #read)] \u00b6 [Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A & HasEq[A!] #read)]( a: box->B) : Bool val Parameters \u00b6 a: box->B Returns \u00b6 Bool val nodes \u00b6 [Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListNodes [A, this-> ListNode [A] ref] ref^ rnodes \u00b6 [Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListNodes [A, this-> ListNode [A] ref] ref^ values \u00b6 [Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListValues [A, this-> ListNode [A] ref] ref^ rvalues \u00b6 [Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListValues [A, this-> ListNode [A] ref] ref^","title":"class List"},{"location":"collections-List/#lista-a","text":"[Source] A doubly linked list. (The following is paraphrased from Wikipedia .) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc.","title":"List[A: A]"},{"location":"collections-List/#example-program","text":"There are a lot of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end class ref List[A: A] is Seq[A] ref","title":"Example program"},{"location":"collections-List/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"collections-List/#constructors","text":"","title":"Constructors"},{"location":"collections-List/#create","text":"[Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = 0) : List[A] ref^","title":"create"},{"location":"collections-List/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"collections-List/#returns","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#unit","text":"[Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^","title":"unit"},{"location":"collections-List/#parameters_1","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_1","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#from","text":"[Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^","title":"from"},{"location":"collections-List/#parameters_2","text":"seq: Array [A^] ref","title":"Parameters"},{"location":"collections-List/#returns_2","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#public-functions","text":"","title":"Public Functions"},{"location":"collections-List/#reserve","text":"[Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"collections-List/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_3","text":"None val","title":"Returns"},{"location":"collections-List/#size","text":"[Source] Returns the number of items in the list. fun box size() : USize val","title":"size"},{"location":"collections-List/#returns_4","text":"USize val","title":"Returns"},{"location":"collections-List/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = 0) : this->A ?","title":"apply"},{"location":"collections-List/#parameters_4","text":"i: USize val = 0","title":"Parameters"},{"location":"collections-List/#returns_5","text":"this->A ?","title":"Returns"},{"location":"collections-List/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"collections-List/#parameters_5","text":"i: USize val value: A","title":"Parameters"},{"location":"collections-List/#returns_6","text":"A^ ?","title":"Returns"},{"location":"collections-List/#index","text":"[Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this->ListNode[A] ref ?","title":"index"},{"location":"collections-List/#parameters_6","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_7","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#remove","text":"[Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ?","title":"remove"},{"location":"collections-List/#parameters_7","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_8","text":"ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#clear","text":"[Source] Empties the list. fun ref clear() : None val","title":"clear"},{"location":"collections-List/#returns_9","text":"None val","title":"Returns"},{"location":"collections-List/#head","text":"[Source] Get the head of the list. fun box head() : this->ListNode[A] ref ?","title":"head"},{"location":"collections-List/#returns_10","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#tail","text":"[Source] Get the tail of the list. fun box tail() : this->ListNode[A] ref ?","title":"tail"},{"location":"collections-List/#returns_11","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#prepend_node","text":"[Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val","title":"prepend_node"},{"location":"collections-List/#parameters_8","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_12","text":"None val","title":"Returns"},{"location":"collections-List/#append_node","text":"[Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val","title":"append_node"},{"location":"collections-List/#parameters_9","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_13","text":"None val","title":"Returns"},{"location":"collections-List/#append_list","text":"[Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val","title":"append_list"},{"location":"collections-List/#parameters_10","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_14","text":"None val","title":"Returns"},{"location":"collections-List/#prepend_list","text":"[Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val","title":"prepend_list"},{"location":"collections-List/#parameters_11","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_15","text":"None val","title":"Returns"},{"location":"collections-List/#push","text":"[Source] Adds a value to the tail of the list. fun ref push( a: A) : None val","title":"push"},{"location":"collections-List/#parameters_12","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_16","text":"None val","title":"Returns"},{"location":"collections-List/#pop","text":"[Source] Removes a value from the tail of the list. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-List/#returns_17","text":"A^ ?","title":"Returns"},{"location":"collections-List/#unshift","text":"[Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val","title":"unshift"},{"location":"collections-List/#parameters_13","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_18","text":"None val","title":"Returns"},{"location":"collections-List/#shift","text":"[Source] Removes a value from the head of the list. fun ref shift() : A^ ?","title":"shift"},{"location":"collections-List/#returns_19","text":"A^ ?","title":"Returns"},{"location":"collections-List/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"collections-List/#parameters_14","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-List/#returns_20","text":"None val","title":"Returns"},{"location":"collections-List/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"collections-List/#parameters_15","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-List/#returns_21","text":"None val","title":"Returns"},{"location":"collections-List/#truncate","text":"[Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"collections-List/#parameters_16","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_22","text":"None val","title":"Returns"},{"location":"collections-List/#clone","text":"[Source] Clone the list. fun box clone() : List[this->A!] ref^","title":"clone"},{"location":"collections-List/#returns_23","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#mapb-b","text":"[Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this->A!): B^}[A, B] box) : List[B] ref^","title":"map[B: B]"},{"location":"collections-List/#parameters_17","text":"f: {(this->A!): B^}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_24","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#flat_mapb-b","text":"[Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this->A!): List[B]}[A, B] box) : List[B] ref^","title":"flat_map[B: B]"},{"location":"collections-List/#parameters_18","text":"f: {(this->A!): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_25","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#filter","text":"[Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^","title":"filter"},{"location":"collections-List/#parameters_19","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_26","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#foldb-b","text":"[Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this->A!): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-List/#parameters_20","text":"f: {(B!, this->A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_27","text":"B","title":"Returns"},{"location":"collections-List/#every","text":"[Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this->A!): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-List/#parameters_21","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_28","text":"Bool val","title":"Returns"},{"location":"collections-List/#exists","text":"[Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this->A!): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-List/#parameters_22","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_29","text":"Bool val","title":"Returns"},{"location":"collections-List/#partition","text":"[Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this->A!): Bool}[A] box) : (List[this->A!] ref^ , List[this->A!] ref^)","title":"partition"},{"location":"collections-List/#parameters_23","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_30","text":"( List [this->A!] ref^ , List [this->A!] ref^)","title":"Returns"},{"location":"collections-List/#drop","text":"[Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this->A!] ref^","title":"drop"},{"location":"collections-List/#parameters_24","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_31","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#take","text":"[Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this->A!] ref","title":"take"},{"location":"collections-List/#parameters_25","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_32","text":"List [this->A!] ref","title":"Returns"},{"location":"collections-List/#take_while","text":"[Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^","title":"take_while"},{"location":"collections-List/#parameters_26","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_33","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#reverse","text":"[Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this->A!] ref^","title":"reverse"},{"location":"collections-List/#returns_34","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#containsoptional-b-a-haseqa-read","text":"[Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A & HasEq[A!] #read)]( a: box->B) : Bool val","title":"contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_27","text":"a: box->B","title":"Parameters"},{"location":"collections-List/#returns_35","text":"Bool val","title":"Returns"},{"location":"collections-List/#nodes","text":"[Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this->ListNode[A] ref] ref^","title":"nodes"},{"location":"collections-List/#returns_36","text":"ListNodes [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rnodes","text":"[Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this->ListNode[A] ref] ref^","title":"rnodes"},{"location":"collections-List/#returns_37","text":"ListNodes [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#values","text":"[Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this->ListNode[A] ref] ref^","title":"values"},{"location":"collections-List/#returns_38","text":"ListValues [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rvalues","text":"[Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this->ListNode[A] ref] ref^","title":"rvalues"},{"location":"collections-List/#returns_39","text":"ListValues [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-ListNode/","text":"ListNode[A: A] \u00b6 [Source] A node in a doubly linked list. (See Ponylang collections.List class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes. Example program \u00b6 The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... ```pony class ref ListNode[A: A] Constructors \u00b6 create \u00b6 [Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = reference) : ListNode[A] ref^ Parameters \u00b6 item: (A | None val) = reference Returns \u00b6 ListNode [A] ref^ Public Functions \u00b6 apply \u00b6 [Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this->A ? Returns \u00b6 this->A ? update \u00b6 [Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ? Parameters \u00b6 value: (A | None val) Returns \u00b6 A^ ? pop \u00b6 [Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ? Returns \u00b6 A^ ? prepend \u00b6 [Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. If the ListNode is not contained within a List the prepend will fail. fun ref prepend( that: ListNode[A] ref) : Bool val Parameters \u00b6 that: ListNode [A] ref Returns \u00b6 Bool val append \u00b6 [Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. If the ListNode is not contained within a List the append will fail. fun ref append( that: ListNode[A] ref) : Bool val Parameters \u00b6 that: ListNode [A] ref Returns \u00b6 Bool val remove \u00b6 [Source] Remove a node from a list. The ListNode must be contained within a List for this to succeed. fun ref remove() : None val Returns \u00b6 None val has_prev \u00b6 [Source] Return true if there is a previous node. fun box has_prev() : Bool val Returns \u00b6 Bool val has_next \u00b6 [Source] Return true if there is a next node. fun box has_next() : Bool val Returns \u00b6 Bool val prev \u00b6 [Source] Return the previous node. fun box prev() : (this->ListNode[A] ref | None val) Returns \u00b6 (this-> ListNode [A] ref | None val) next \u00b6 [Source] Return the next node. fun box next() : (this->ListNode[A] ref | None val) Returns \u00b6 (this-> ListNode [A] ref | None val)","title":"class ListNode"},{"location":"collections-ListNode/#listnodea-a","text":"[Source] A node in a doubly linked list. (See Ponylang collections.List class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes.","title":"ListNode[A: A]"},{"location":"collections-ListNode/#example-program","text":"The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... ```pony class ref ListNode[A: A]","title":"Example program"},{"location":"collections-ListNode/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNode/#create","text":"[Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = reference) : ListNode[A] ref^","title":"create"},{"location":"collections-ListNode/#parameters","text":"item: (A | None val) = reference","title":"Parameters"},{"location":"collections-ListNode/#returns","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNode/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNode/#apply","text":"[Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this->A ?","title":"apply"},{"location":"collections-ListNode/#returns_1","text":"this->A ?","title":"Returns"},{"location":"collections-ListNode/#update","text":"[Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ?","title":"update"},{"location":"collections-ListNode/#parameters_1","text":"value: (A | None val)","title":"Parameters"},{"location":"collections-ListNode/#returns_2","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#pop","text":"[Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-ListNode/#returns_3","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#prepend","text":"[Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. If the ListNode is not contained within a List the prepend will fail. fun ref prepend( that: ListNode[A] ref) : Bool val","title":"prepend"},{"location":"collections-ListNode/#parameters_2","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#append","text":"[Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. If the ListNode is not contained within a List the append will fail. fun ref append( that: ListNode[A] ref) : Bool val","title":"append"},{"location":"collections-ListNode/#parameters_3","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#remove","text":"[Source] Remove a node from a list. The ListNode must be contained within a List for this to succeed. fun ref remove() : None val","title":"remove"},{"location":"collections-ListNode/#returns_6","text":"None val","title":"Returns"},{"location":"collections-ListNode/#has_prev","text":"[Source] Return true if there is a previous node. fun box has_prev() : Bool val","title":"has_prev"},{"location":"collections-ListNode/#returns_7","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#has_next","text":"[Source] Return true if there is a next node. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNode/#returns_8","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#prev","text":"[Source] Return the previous node. fun box prev() : (this->ListNode[A] ref | None val)","title":"prev"},{"location":"collections-ListNode/#returns_9","text":"(this-> ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#next","text":"[Source] Return the next node. fun box next() : (this->ListNode[A] ref | None val)","title":"next"},{"location":"collections-ListNode/#returns_10","text":"(this-> ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNodes/","text":"ListNodes[A: A, N: ListNode [A] #read] \u00b6 [Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref Implements \u00b6 Iterator [N] ref Constructors \u00b6 create \u00b6 [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListNodes[A, N] ref^ Parameters \u00b6 head: (N | None val) reverse: Bool val = false Returns \u00b6 ListNodes [A, N] ref^ Public Functions \u00b6 has_next \u00b6 [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Get the list node and replace it with the next one. fun ref next() : N ? Returns \u00b6 N ?","title":"class ListNodes"},{"location":"collections-ListNodes/#listnodesa-a-n-listnodea-read","text":"[Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref","title":"ListNodes[A: A, N: ListNode[A] #read]"},{"location":"collections-ListNodes/#implements","text":"Iterator [N] ref","title":"Implements"},{"location":"collections-ListNodes/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNodes/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListNodes[A, N] ref^","title":"create"},{"location":"collections-ListNodes/#parameters","text":"head: (N | None val) reverse: Bool val = false","title":"Parameters"},{"location":"collections-ListNodes/#returns","text":"ListNodes [A, N] ref^","title":"Returns"},{"location":"collections-ListNodes/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNodes/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNodes/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListNodes/#next","text":"[Source] Get the list node and replace it with the next one. fun ref next() : N ?","title":"next"},{"location":"collections-ListNodes/#returns_2","text":"N ?","title":"Returns"},{"location":"collections-ListValues/","text":"ListValues[A: A, N: ListNode [A] #read] \u00b6 [Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N->A] ref Implements \u00b6 Iterator [N->A] ref Constructors \u00b6 create \u00b6 [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListValues[A, N] ref^ Parameters \u00b6 head: (N | None val) reverse: Bool val = false Returns \u00b6 ListValues [A, N] ref^ Public Functions \u00b6 has_next \u00b6 [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Get the value of the list node and replace it with the next one. fun ref next() : N->A ? Returns \u00b6 N->A ?","title":"class ListValues"},{"location":"collections-ListValues/#listvaluesa-a-n-listnodea-read","text":"[Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N->A] ref","title":"ListValues[A: A, N: ListNode[A] #read]"},{"location":"collections-ListValues/#implements","text":"Iterator [N->A] ref","title":"Implements"},{"location":"collections-ListValues/#constructors","text":"","title":"Constructors"},{"location":"collections-ListValues/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListValues[A, N] ref^","title":"create"},{"location":"collections-ListValues/#parameters","text":"head: (N | None val) reverse: Bool val = false","title":"Parameters"},{"location":"collections-ListValues/#returns","text":"ListValues [A, N] ref^","title":"Returns"},{"location":"collections-ListValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListValues/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListValues/#next","text":"[Source] Get the value of the list node and replace it with the next one. fun ref next() : N->A ?","title":"next"},{"location":"collections-ListValues/#returns_2","text":"N->A ?","title":"Returns"},{"location":"collections-Map/","text":"Map[K: ( Hashable #read & Equatable [K] #read), V: V] \u00b6 [Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read & Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref Type Alias For \u00b6 HashMap [K, V, HashEq [K] val] ref","title":"type Map"},{"location":"collections-Map/#mapk-hashable-read-equatablek-read-v-v","text":"[Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read & Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"},{"location":"collections-Map/#type-alias-for","text":"HashMap [K, V, HashEq [K] val] ref","title":"Type Alias For"},{"location":"collections-MapIs/","text":"MapIs[K: K, V: V] \u00b6 [Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref Type Alias For \u00b6 HashMap [K, V, HashIs [K] val] ref","title":"type MapIs"},{"location":"collections-MapIs/#mapisk-k-v-v","text":"[Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref","title":"MapIs[K: K, V: V]"},{"location":"collections-MapIs/#type-alias-for","text":"HashMap [K, V, HashIs [K] val] ref","title":"Type Alias For"},{"location":"collections-MapKeys/","text":"MapKeys[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] ref Implements \u00b6 Iterator [M->K] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapKeys [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M->K ? Returns \u00b6 M->K ?","title":"class MapKeys"},{"location":"collections-MapKeys/#mapkeysk-k-v-v-h-hashfunctionk-val-m-hashmapk-v-h-read","text":"[Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] ref","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapKeys/#implements","text":"Iterator [M->K] ref","title":"Implements"},{"location":"collections-MapKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-MapKeys/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^","title":"create"},{"location":"collections-MapKeys/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapKeys/#returns","text":"MapKeys [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapKeys/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapKeys/#next","text":"[Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M->K ?","title":"next"},{"location":"collections-MapKeys/#returns_2","text":"M->K ?","title":"Returns"},{"location":"collections-MapPairs/","text":"MapPairs[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K , M->V)] ref Implements \u00b6 Iterator [(M->K , M->V)] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapPairs [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M->K , M->V) ? Returns \u00b6 (M->K , M->V) ?","title":"class MapPairs"},{"location":"collections-MapPairs/#mappairsk-k-v-v-h-hashfunctionk-val-m-hashmapk-v-h-read","text":"[Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K , M->V)] ref","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapPairs/#implements","text":"Iterator [(M->K , M->V)] ref","title":"Implements"},{"location":"collections-MapPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-MapPairs/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^","title":"create"},{"location":"collections-MapPairs/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapPairs/#returns","text":"MapPairs [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapPairs/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapPairs/#next","text":"[Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M->K , M->V) ?","title":"next"},{"location":"collections-MapPairs/#returns_2","text":"(M->K , M->V) ?","title":"Returns"},{"location":"collections-MapValues/","text":"MapValues[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] ref Implements \u00b6 Iterator [M->V] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapValues [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M->V ? Returns \u00b6 M->V ?","title":"class MapValues"},{"location":"collections-MapValues/#mapvaluesk-k-v-v-h-hashfunctionk-val-m-hashmapk-v-h-read","text":"[Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] ref","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapValues/#implements","text":"Iterator [M->V] ref","title":"Implements"},{"location":"collections-MapValues/#constructors","text":"","title":"Constructors"},{"location":"collections-MapValues/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^","title":"create"},{"location":"collections-MapValues/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapValues/#returns","text":"MapValues [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M->V ?","title":"next"},{"location":"collections-MapValues/#returns_2","text":"M->V ?","title":"Returns"},{"location":"collections-MaxHeap/","text":"MaxHeap[A: Comparable [A] #read] \u00b6 [Source] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A] val] ref Type Alias For \u00b6 BinaryHeap [A, MaxHeapPriority [A] val] ref","title":"type MaxHeap"},{"location":"collections-MaxHeap/#maxheapa-comparablea-read","text":"[Source] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A] val] ref","title":"MaxHeap[A: Comparable[A] #read]"},{"location":"collections-MaxHeap/#type-alias-for","text":"BinaryHeap [A, MaxHeapPriority [A] val] ref","title":"Type Alias For"},{"location":"collections-MaxHeapPriority/","text":"MaxHeapPriority[A: Comparable [A] #read] \u00b6 [Source] primitive val MaxHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val Implements \u00b6 _BinaryHeapPriority[A] val Constructors \u00b6 create \u00b6 [Source] new val create() : MaxHeapPriority[A] val^ Returns \u00b6 MaxHeapPriority [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( x: A, y: A) : Bool val Parameters \u00b6 x: A y: A Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: MaxHeapPriority[A] val) : Bool val Parameters \u00b6 that: MaxHeapPriority [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MaxHeapPriority[A] val) : Bool val Parameters \u00b6 that: MaxHeapPriority [A] val Returns \u00b6 Bool val","title":"primitive MaxHeapPriority"},{"location":"collections-MaxHeapPriority/#maxheapprioritya-comparablea-read","text":"[Source] primitive val MaxHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val","title":"MaxHeapPriority[A: Comparable[A] #read]"},{"location":"collections-MaxHeapPriority/#implements","text":"_BinaryHeapPriority[A] val","title":"Implements"},{"location":"collections-MaxHeapPriority/#constructors","text":"","title":"Constructors"},{"location":"collections-MaxHeapPriority/#create","text":"[Source] new val create() : MaxHeapPriority[A] val^","title":"create"},{"location":"collections-MaxHeapPriority/#returns","text":"MaxHeapPriority [A] val^","title":"Returns"},{"location":"collections-MaxHeapPriority/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MaxHeapPriority/#apply","text":"[Source] fun box apply( x: A, y: A) : Bool val","title":"apply"},{"location":"collections-MaxHeapPriority/#parameters","text":"x: A y: A","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MaxHeapPriority/#eq","text":"[Source] fun box eq( that: MaxHeapPriority[A] val) : Bool val","title":"eq"},{"location":"collections-MaxHeapPriority/#parameters_1","text":"that: MaxHeapPriority [A] val","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-MaxHeapPriority/#ne","text":"[Source] fun box ne( that: MaxHeapPriority[A] val) : Bool val","title":"ne"},{"location":"collections-MaxHeapPriority/#parameters_2","text":"that: MaxHeapPriority [A] val","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-MinHeap/","text":"MinHeap[A: Comparable [A] #read] \u00b6 [Source] type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A] val] ref Type Alias For \u00b6 BinaryHeap [A, MinHeapPriority [A] val] ref","title":"type MinHeap"},{"location":"collections-MinHeap/#minheapa-comparablea-read","text":"[Source] type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A] val] ref","title":"MinHeap[A: Comparable[A] #read]"},{"location":"collections-MinHeap/#type-alias-for","text":"BinaryHeap [A, MinHeapPriority [A] val] ref","title":"Type Alias For"},{"location":"collections-MinHeapPriority/","text":"MinHeapPriority[A: Comparable [A] #read] \u00b6 [Source] primitive val MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val Implements \u00b6 _BinaryHeapPriority[A] val Constructors \u00b6 create \u00b6 [Source] new val create() : MinHeapPriority[A] val^ Returns \u00b6 MinHeapPriority [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( x: A, y: A) : Bool val Parameters \u00b6 x: A y: A Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: MinHeapPriority[A] val) : Bool val Parameters \u00b6 that: MinHeapPriority [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MinHeapPriority[A] val) : Bool val Parameters \u00b6 that: MinHeapPriority [A] val Returns \u00b6 Bool val","title":"primitive MinHeapPriority"},{"location":"collections-MinHeapPriority/#minheapprioritya-comparablea-read","text":"[Source] primitive val MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val","title":"MinHeapPriority[A: Comparable[A] #read]"},{"location":"collections-MinHeapPriority/#implements","text":"_BinaryHeapPriority[A] val","title":"Implements"},{"location":"collections-MinHeapPriority/#constructors","text":"","title":"Constructors"},{"location":"collections-MinHeapPriority/#create","text":"[Source] new val create() : MinHeapPriority[A] val^","title":"create"},{"location":"collections-MinHeapPriority/#returns","text":"MinHeapPriority [A] val^","title":"Returns"},{"location":"collections-MinHeapPriority/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MinHeapPriority/#apply","text":"[Source] fun box apply( x: A, y: A) : Bool val","title":"apply"},{"location":"collections-MinHeapPriority/#parameters","text":"x: A y: A","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MinHeapPriority/#eq","text":"[Source] fun box eq( that: MinHeapPriority[A] val) : Bool val","title":"eq"},{"location":"collections-MinHeapPriority/#parameters_1","text":"that: MinHeapPriority [A] val","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-MinHeapPriority/#ne","text":"[Source] fun box ne( that: MinHeapPriority[A] val) : Bool val","title":"ne"},{"location":"collections-MinHeapPriority/#parameters_2","text":"that: MinHeapPriority [A] val","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-Range/","text":"Range[optional A: ( Real [A] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do try handle_u8(range.next()?) end end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end When using Range with floating point types ( F32 and F64 ) inc steps < 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( min: A, max: A, inc: A = 1) : Range[A] ref^ Parameters \u00b6 min: A max: A inc: A = 1 Returns \u00b6 Range [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A ? Returns \u00b6 A ? rewind \u00b6 [Source] fun ref rewind() : None val Returns \u00b6 None val is_infinite \u00b6 [Source] fun box is_infinite() : Bool val Returns \u00b6 Bool val","title":"class Range"},{"location":"collections-Range/#rangeoptional-a-reala-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","text":"[Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do try handle_u8(range.next()?) end end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end When using Range with floating point types ( F32 and F64 ) inc steps < 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Range/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Range/#constructors","text":"","title":"Constructors"},{"location":"collections-Range/#create","text":"[Source] new ref create( min: A, max: A, inc: A = 1) : Range[A] ref^","title":"create"},{"location":"collections-Range/#parameters","text":"min: A max: A inc: A = 1","title":"Parameters"},{"location":"collections-Range/#returns","text":"Range [A] ref^","title":"Returns"},{"location":"collections-Range/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Range/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Range/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Range/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"collections-Range/#returns_2","text":"A ?","title":"Returns"},{"location":"collections-Range/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Range/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Range/#is_infinite","text":"[Source] fun box is_infinite() : Bool val","title":"is_infinite"},{"location":"collections-Range/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/","text":"Reverse[optional A: ( Real [A] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Produces a decreasing range [max, min] with step dec , for any Number type. (i.e. the reverse of Range ) Example program: use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end Which outputs: 10 8 6 4 2 If dec is 0, produces an infinite series of max . If dec is negative, produces a range with max as the only value. class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( max: A, min: A, dec: A = 1) : Reverse[A] ref^ Parameters \u00b6 max: A min: A dec: A = 1 Returns \u00b6 Reverse [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A Returns \u00b6 A rewind \u00b6 [Source] fun ref rewind() : None val Returns \u00b6 None val","title":"class Reverse"},{"location":"collections-Reverse/#reverseoptional-a-reala-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","text":"[Source] Produces a decreasing range [max, min] with step dec , for any Number type. (i.e. the reverse of Range ) Example program: use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end Which outputs: 10 8 6 4 2 If dec is 0, produces an infinite series of max . If dec is negative, produces a range with max as the only value. class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Reverse/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Reverse/#constructors","text":"","title":"Constructors"},{"location":"collections-Reverse/#create","text":"[Source] new ref create( max: A, min: A, dec: A = 1) : Reverse[A] ref^","title":"create"},{"location":"collections-Reverse/#parameters","text":"max: A min: A dec: A = 1","title":"Parameters"},{"location":"collections-Reverse/#returns","text":"Reverse [A] ref^","title":"Returns"},{"location":"collections-Reverse/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Reverse/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Reverse/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Reverse/#returns_2","text":"A","title":"Returns"},{"location":"collections-Reverse/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Reverse/#returns_3","text":"None val","title":"Returns"},{"location":"collections-RingBuffer/","text":"RingBuffer[A: A] \u00b6 [Source] A ring buffer. class ref RingBuffer[A: A] Constructors \u00b6 create \u00b6 [Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^ Parameters \u00b6 len: USize val Returns \u00b6 RingBuffer [A] ref^ Public Functions \u00b6 head \u00b6 [Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ? Returns \u00b6 USize val ? size \u00b6 [Source] The number of elements that have been added to the ring. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the ring. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? push \u00b6 [Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val Parameters \u00b6 value: A Returns \u00b6 Bool val clear \u00b6 [Source] Clear the queue. fun ref clear() : None val Returns \u00b6 None val","title":"class RingBuffer"},{"location":"collections-RingBuffer/#ringbuffera-a","text":"[Source] A ring buffer. class ref RingBuffer[A: A]","title":"RingBuffer[A: A]"},{"location":"collections-RingBuffer/#constructors","text":"","title":"Constructors"},{"location":"collections-RingBuffer/#create","text":"[Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^","title":"create"},{"location":"collections-RingBuffer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns","text":"RingBuffer [A] ref^","title":"Returns"},{"location":"collections-RingBuffer/#public-functions","text":"","title":"Public Functions"},{"location":"collections-RingBuffer/#head","text":"[Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ?","title":"head"},{"location":"collections-RingBuffer/#returns_1","text":"USize val ?","title":"Returns"},{"location":"collections-RingBuffer/#size","text":"[Source] The number of elements that have been added to the ring. fun box size() : USize val","title":"size"},{"location":"collections-RingBuffer/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#space","text":"[Source] The available space in the ring. fun box space() : USize val","title":"space"},{"location":"collections-RingBuffer/#returns_3","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#apply","text":"[Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"collections-RingBuffer/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns_4","text":"this->A ?","title":"Returns"},{"location":"collections-RingBuffer/#push","text":"[Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val","title":"push"},{"location":"collections-RingBuffer/#parameters_2","text":"value: A","title":"Parameters"},{"location":"collections-RingBuffer/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-RingBuffer/#clear","text":"[Source] Clear the queue. fun ref clear() : None val","title":"clear"},{"location":"collections-RingBuffer/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Set/","text":"Set[A: ( Hashable #read & Equatable [A] #read)] \u00b6 [Source] type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref Type Alias For \u00b6 HashSet [A, HashEq [A] val] ref","title":"type Set"},{"location":"collections-Set/#seta-hashable-read-equatablea-read","text":"[Source] type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-Set/#type-alias-for","text":"HashSet [A, HashEq [A] val] ref","title":"Type Alias For"},{"location":"collections-SetIs/","text":"SetIs[A: A] \u00b6 [Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref Type Alias For \u00b6 HashSet [A, HashIs [A!] val] ref","title":"type SetIs"},{"location":"collections-SetIs/#setisa-a","text":"[Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref","title":"SetIs[A: A]"},{"location":"collections-SetIs/#type-alias-for","text":"HashSet [A, HashIs [A!] val] ref","title":"Type Alias For"},{"location":"collections-SetValues/","text":"SetValues[A: A, H: HashFunction [A!] val, S: HashSet [A, H] #read] \u00b6 [Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] ref Implements \u00b6 Iterator [S->A] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^ Parameters \u00b6 set: S Returns \u00b6 SetValues [A, H, S] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S->A ? Returns \u00b6 S->A ?","title":"class SetValues"},{"location":"collections-SetValues/#setvaluesa-a-h-hashfunctiona-val-s-hashseta-h-read","text":"[Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] ref","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"},{"location":"collections-SetValues/#implements","text":"Iterator [S->A] ref","title":"Implements"},{"location":"collections-SetValues/#constructors","text":"","title":"Constructors"},{"location":"collections-SetValues/#create","text":"[Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^","title":"create"},{"location":"collections-SetValues/#parameters","text":"set: S","title":"Parameters"},{"location":"collections-SetValues/#returns","text":"SetValues [A, H, S] ref^","title":"Returns"},{"location":"collections-SetValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-SetValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-SetValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-SetValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S->A ?","title":"next"},{"location":"collections-SetValues/#returns_2","text":"S->A ?","title":"Returns"},{"location":"collections-Sort/","text":"Sort[A: Seq [B] ref, B: Comparable [B] #read] \u00b6 [Source] Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from Wikipedia .) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches. Example program \u00b6 The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: first second third use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read] Constructors \u00b6 create \u00b6 [Source] new val create() : Sort[A, B] val^ Returns \u00b6 Sort [A, B] val^ Public Functions \u00b6 apply \u00b6 [Source] Sort the given seq. fun box apply( a: A) : A^ Parameters \u00b6 a: A Returns \u00b6 A^ eq \u00b6 [Source] fun box eq( that: Sort[A, B] val) : Bool val Parameters \u00b6 that: Sort [A, B] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Sort[A, B] val) : Bool val Parameters \u00b6 that: Sort [A, B] val Returns \u00b6 Bool val","title":"primitive Sort"},{"location":"collections-Sort/#sorta-seqb-ref-b-comparableb-read","text":"[Source] Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from Wikipedia .) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches.","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]"},{"location":"collections-Sort/#example-program","text":"The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: first second third use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]","title":"Example program"},{"location":"collections-Sort/#constructors","text":"","title":"Constructors"},{"location":"collections-Sort/#create","text":"[Source] new val create() : Sort[A, B] val^","title":"create"},{"location":"collections-Sort/#returns","text":"Sort [A, B] val^","title":"Returns"},{"location":"collections-Sort/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Sort/#apply","text":"[Source] Sort the given seq. fun box apply( a: A) : A^","title":"apply"},{"location":"collections-Sort/#parameters","text":"a: A","title":"Parameters"},{"location":"collections-Sort/#returns_1","text":"A^","title":"Returns"},{"location":"collections-Sort/#eq","text":"[Source] fun box eq( that: Sort[A, B] val) : Bool val","title":"eq"},{"location":"collections-Sort/#parameters_1","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#ne","text":"[Source] fun box ne( that: Sort[A, B] val) : Bool val","title":"ne"},{"location":"collections-Sort/#parameters_2","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_3","text":"Bool val","title":"Returns"},{"location":"debug--index/","text":"Debug package \u00b6 Provides facilities to create output to either STDOUT or STDERR that will only appear when the platform is debug configured. To create a binary with debug configured, pass the -d flag to ponyc when compiling e.g.: ponyc -d Example code \u00b6 actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\") Public Types \u00b6 primitive DebugOut primitive DebugErr type DebugStream primitive Debug","title":"Package"},{"location":"debug--index/#debug-package","text":"Provides facilities to create output to either STDOUT or STDERR that will only appear when the platform is debug configured. To create a binary with debug configured, pass the -d flag to ponyc when compiling e.g.: ponyc -d","title":"Debug package"},{"location":"debug--index/#example-code","text":"actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\")","title":"Example code"},{"location":"debug--index/#public-types","text":"primitive DebugOut primitive DebugErr type DebugStream primitive Debug","title":"Public Types"},{"location":"debug-Debug/","text":"Debug \u00b6 [Source] This is a debug only print utility. primitive val Debug Constructors \u00b6 create \u00b6 [Source] new val create() : Debug val^ Returns \u00b6 Debug val^ Public Functions \u00b6 apply \u00b6 [Source] If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. fun box apply( msg: (Stringable box | ReadSeq[Stringable box] box), sep: String val = \", \", stream: (DebugOut val | DebugErr val) = reference) : None val Parameters \u00b6 msg: ( Stringable box | ReadSeq [ Stringable box] box) sep: String val = \", \" stream: ( DebugOut val | DebugErr val) = reference Returns \u00b6 None val out \u00b6 [Source] If platform is debug configured, print message to standard output fun box out( msg: Stringable box = \"\") : None val Parameters \u00b6 msg: Stringable box = \"\" Returns \u00b6 None val err \u00b6 [Source] If platform is debug configured, print message to standard error fun box err( msg: Stringable box = \"\") : None val Parameters \u00b6 msg: Stringable box = \"\" Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: Debug val) : Bool val Parameters \u00b6 that: Debug val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Debug val) : Bool val Parameters \u00b6 that: Debug val Returns \u00b6 Bool val","title":"primitive Debug"},{"location":"debug-Debug/#debug","text":"[Source] This is a debug only print utility. primitive val Debug","title":"Debug"},{"location":"debug-Debug/#constructors","text":"","title":"Constructors"},{"location":"debug-Debug/#create","text":"[Source] new val create() : Debug val^","title":"create"},{"location":"debug-Debug/#returns","text":"Debug val^","title":"Returns"},{"location":"debug-Debug/#public-functions","text":"","title":"Public Functions"},{"location":"debug-Debug/#apply","text":"[Source] If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. fun box apply( msg: (Stringable box | ReadSeq[Stringable box] box), sep: String val = \", \", stream: (DebugOut val | DebugErr val) = reference) : None val","title":"apply"},{"location":"debug-Debug/#parameters","text":"msg: ( Stringable box | ReadSeq [ Stringable box] box) sep: String val = \", \" stream: ( DebugOut val | DebugErr val) = reference","title":"Parameters"},{"location":"debug-Debug/#returns_1","text":"None val","title":"Returns"},{"location":"debug-Debug/#out","text":"[Source] If platform is debug configured, print message to standard output fun box out( msg: Stringable box = \"\") : None val","title":"out"},{"location":"debug-Debug/#parameters_1","text":"msg: Stringable box = \"\"","title":"Parameters"},{"location":"debug-Debug/#returns_2","text":"None val","title":"Returns"},{"location":"debug-Debug/#err","text":"[Source] If platform is debug configured, print message to standard error fun box err( msg: Stringable box = \"\") : None val","title":"err"},{"location":"debug-Debug/#parameters_2","text":"msg: Stringable box = \"\"","title":"Parameters"},{"location":"debug-Debug/#returns_3","text":"None val","title":"Returns"},{"location":"debug-Debug/#eq","text":"[Source] fun box eq( that: Debug val) : Bool val","title":"eq"},{"location":"debug-Debug/#parameters_3","text":"that: Debug val","title":"Parameters"},{"location":"debug-Debug/#returns_4","text":"Bool val","title":"Returns"},{"location":"debug-Debug/#ne","text":"[Source] fun box ne( that: Debug val) : Bool val","title":"ne"},{"location":"debug-Debug/#parameters_4","text":"that: Debug val","title":"Parameters"},{"location":"debug-Debug/#returns_5","text":"Bool val","title":"Returns"},{"location":"debug-DebugErr/","text":"DebugErr \u00b6 [Source] primitive val DebugErr Constructors \u00b6 create \u00b6 [Source] new val create() : DebugErr val^ Returns \u00b6 DebugErr val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DebugErr val) : Bool val Parameters \u00b6 that: DebugErr val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DebugErr val) : Bool val Parameters \u00b6 that: DebugErr val Returns \u00b6 Bool val","title":"primitive DebugErr"},{"location":"debug-DebugErr/#debugerr","text":"[Source] primitive val DebugErr","title":"DebugErr"},{"location":"debug-DebugErr/#constructors","text":"","title":"Constructors"},{"location":"debug-DebugErr/#create","text":"[Source] new val create() : DebugErr val^","title":"create"},{"location":"debug-DebugErr/#returns","text":"DebugErr val^","title":"Returns"},{"location":"debug-DebugErr/#public-functions","text":"","title":"Public Functions"},{"location":"debug-DebugErr/#eq","text":"[Source] fun box eq( that: DebugErr val) : Bool val","title":"eq"},{"location":"debug-DebugErr/#parameters","text":"that: DebugErr val","title":"Parameters"},{"location":"debug-DebugErr/#returns_1","text":"Bool val","title":"Returns"},{"location":"debug-DebugErr/#ne","text":"[Source] fun box ne( that: DebugErr val) : Bool val","title":"ne"},{"location":"debug-DebugErr/#parameters_1","text":"that: DebugErr val","title":"Parameters"},{"location":"debug-DebugErr/#returns_2","text":"Bool val","title":"Returns"},{"location":"debug-DebugOut/","text":"DebugOut \u00b6 [Source] primitive val DebugOut Constructors \u00b6 create \u00b6 [Source] new val create() : DebugOut val^ Returns \u00b6 DebugOut val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DebugOut val) : Bool val Parameters \u00b6 that: DebugOut val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DebugOut val) : Bool val Parameters \u00b6 that: DebugOut val Returns \u00b6 Bool val","title":"primitive DebugOut"},{"location":"debug-DebugOut/#debugout","text":"[Source] primitive val DebugOut","title":"DebugOut"},{"location":"debug-DebugOut/#constructors","text":"","title":"Constructors"},{"location":"debug-DebugOut/#create","text":"[Source] new val create() : DebugOut val^","title":"create"},{"location":"debug-DebugOut/#returns","text":"DebugOut val^","title":"Returns"},{"location":"debug-DebugOut/#public-functions","text":"","title":"Public Functions"},{"location":"debug-DebugOut/#eq","text":"[Source] fun box eq( that: DebugOut val) : Bool val","title":"eq"},{"location":"debug-DebugOut/#parameters","text":"that: DebugOut val","title":"Parameters"},{"location":"debug-DebugOut/#returns_1","text":"Bool val","title":"Returns"},{"location":"debug-DebugOut/#ne","text":"[Source] fun box ne( that: DebugOut val) : Bool val","title":"ne"},{"location":"debug-DebugOut/#parameters_1","text":"that: DebugOut val","title":"Parameters"},{"location":"debug-DebugOut/#returns_2","text":"Bool val","title":"Returns"},{"location":"debug-DebugStream/","text":"DebugStream \u00b6 [Source] type DebugStream is (DebugOut val | DebugErr val) Type Alias For \u00b6 ( DebugOut val | DebugErr val)","title":"type DebugStream"},{"location":"debug-DebugStream/#debugstream","text":"[Source] type DebugStream is (DebugOut val | DebugErr val)","title":"DebugStream"},{"location":"debug-DebugStream/#type-alias-for","text":"( DebugOut val | DebugErr val)","title":"Type Alias For"},{"location":"ponytest--index/","text":"PonyTest package \u00b6 The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. Example program \u00b6 To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. Test names \u00b6 Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option. Aggregation \u00b6 Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. Long tests \u00b6 Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. Exclusion groups \u00b6 By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. Labels \u00b6 Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1) Setting up and tearing down a test environment \u00b6 Set Up \u00b6 Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env . Tear Down \u00b6 Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down. Example \u00b6 The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory Public Types \u00b6 trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest","title":"Package"},{"location":"ponytest--index/#ponytest-package","text":"The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.","title":"PonyTest package"},{"location":"ponytest--index/#example-program","text":"To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.","title":"Example program"},{"location":"ponytest--index/#test-names","text":"Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option.","title":"Test names"},{"location":"ponytest--index/#aggregation","text":"Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.","title":"Aggregation"},{"location":"ponytest--index/#long-tests","text":"Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed.","title":"Long tests"},{"location":"ponytest--index/#exclusion-groups","text":"By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.","title":"Exclusion groups"},{"location":"ponytest--index/#labels","text":"Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1)","title":"Labels"},{"location":"ponytest--index/#setting-up-and-tearing-down-a-test-environment","text":"","title":"Setting up and tearing down a test environment"},{"location":"ponytest--index/#set-up","text":"Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env .","title":"Set Up"},{"location":"ponytest--index/#tear-down","text":"Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.","title":"Tear Down"},{"location":"ponytest--index/#example","text":"The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory","title":"Example"},{"location":"ponytest--index/#public-types","text":"trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest","title":"Public Types"},{"location":"ponytest-ITest/","text":"ITest \u00b6 [Source] interface ref ITest Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : None val ? Returns \u00b6 None val ?","title":"interface ITest"},{"location":"ponytest-ITest/#itest","text":"[Source] interface ref ITest","title":"ITest"},{"location":"ponytest-ITest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-ITest/#apply","text":"[Source] fun box apply() : None val ?","title":"apply"},{"location":"ponytest-ITest/#returns","text":"None val ?","title":"Returns"},{"location":"ponytest-PonyTest/","text":"PonyTest \u00b6 [Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest Constructors \u00b6 create \u00b6 [Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^ Parameters \u00b6 env: Env val list: TestList tag Returns \u00b6 PonyTest tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso) Parameters \u00b6 test: UnitTest iso","title":"actor PonyTest"},{"location":"ponytest-PonyTest/#ponytest","text":"[Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest","title":"PonyTest"},{"location":"ponytest-PonyTest/#constructors","text":"","title":"Constructors"},{"location":"ponytest-PonyTest/#create","text":"[Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^","title":"create"},{"location":"ponytest-PonyTest/#parameters","text":"env: Env val list: TestList tag","title":"Parameters"},{"location":"ponytest-PonyTest/#returns","text":"PonyTest tag^","title":"Returns"},{"location":"ponytest-PonyTest/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-PonyTest/#apply","text":"[Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso)","title":"apply"},{"location":"ponytest-PonyTest/#parameters_1","text":"test: UnitTest iso","title":"Parameters"},{"location":"ponytest-TestHelper/","text":"TestHelper \u00b6 [Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper Public fields \u00b6 let env: Env val \u00b6 [Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests. Public Functions \u00b6 log \u00b6 [Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val Parameters \u00b6 msg: String val verbose: Bool val = false Returns \u00b6 None val fail \u00b6 [Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val Parameters \u00b6 msg: String val = \"Test failed\" Returns \u00b6 None val assert_true \u00b6 [Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_false \u00b6 [Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_error \u00b6 [Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_no_error \u00b6 [Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_is[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_isnt[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_ne[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq_unordered[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val long_test \u00b6 [Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val Parameters \u00b6 timeout: U64 val Returns \u00b6 None val complete \u00b6 [Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val Parameters \u00b6 success: Bool val Returns \u00b6 None val expect_action \u00b6 [Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val complete_action \u00b6 [Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val fail_action \u00b6 [Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val dispose_when_done \u00b6 [Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val Parameters \u00b6 disposable: DisposableActor tag Returns \u00b6 None val","title":"class TestHelper"},{"location":"ponytest-TestHelper/#testhelper","text":"[Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper","title":"TestHelper"},{"location":"ponytest-TestHelper/#public-fields","text":"","title":"Public fields"},{"location":"ponytest-TestHelper/#let-env-env-val","text":"[Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests.","title":"let env: Env val"},{"location":"ponytest-TestHelper/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestHelper/#log","text":"[Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val","title":"log"},{"location":"ponytest-TestHelper/#parameters","text":"msg: String val verbose: Bool val = false","title":"Parameters"},{"location":"ponytest-TestHelper/#returns","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail","text":"[Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val","title":"fail"},{"location":"ponytest-TestHelper/#parameters_1","text":"msg: String val = \"Test failed\"","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_1","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_true","text":"[Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_true"},{"location":"ponytest-TestHelper/#parameters_2","text":"actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_false","text":"[Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_false"},{"location":"ponytest-TestHelper/#parameters_3","text":"actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_error","text":"[Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_error"},{"location":"ponytest-TestHelper/#parameters_4","text":"test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_no_error","text":"[Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_no_error"},{"location":"ponytest-TestHelper/#parameters_5","text":"test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_isa-a","text":"[Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_6","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_eqa-equatablea-read-stringable-read","text":"[Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_7","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_7","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_isnta-a","text":"[Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_8","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_8","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_nea-equatablea-read-stringable-read","text":"[Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_9","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_9","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eqa-equatablea-read-stringable-read","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_10","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_10","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq_unordereda-equatablea-read-stringable-read","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_11","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_11","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#long_test","text":"[Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val","title":"long_test"},{"location":"ponytest-TestHelper/#parameters_12","text":"timeout: U64 val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_12","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete","text":"[Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponytest-TestHelper/#parameters_13","text":"success: Bool val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_13","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#expect_action","text":"[Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val","title":"expect_action"},{"location":"ponytest-TestHelper/#parameters_14","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_14","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete_action","text":"[Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val","title":"complete_action"},{"location":"ponytest-TestHelper/#parameters_15","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_15","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail_action","text":"[Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val","title":"fail_action"},{"location":"ponytest-TestHelper/#parameters_16","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_16","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#dispose_when_done","text":"[Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val","title":"dispose_when_done"},{"location":"ponytest-TestHelper/#parameters_17","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_17","text":"None val","title":"Returns"},{"location":"ponytest-TestList/","text":"TestList \u00b6 [Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList Public Functions \u00b6 tests \u00b6 [Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val Parameters \u00b6 test: PonyTest tag Returns \u00b6 None val","title":"trait TestList"},{"location":"ponytest-TestList/#testlist","text":"[Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList","title":"TestList"},{"location":"ponytest-TestList/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestList/#tests","text":"[Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val","title":"tests"},{"location":"ponytest-TestList/#parameters","text":"test: PonyTest tag","title":"Parameters"},{"location":"ponytest-TestList/#returns","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/","text":"UnitTest \u00b6 [Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest Public Functions \u00b6 name \u00b6 [Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val Returns \u00b6 String val exclusion_group \u00b6 [Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val Returns \u00b6 String val apply \u00b6 [Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ? Parameters \u00b6 h: TestHelper val Returns \u00b6 None val ? timed_out \u00b6 [Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val Parameters \u00b6 h: TestHelper val Returns \u00b6 None val set_up \u00b6 [Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ? Parameters \u00b6 h: TestHelper val Returns \u00b6 None val ? tear_down \u00b6 [Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val Parameters \u00b6 h: TestHelper val Returns \u00b6 None val label \u00b6 [Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val Returns \u00b6 String val","title":"trait UnitTest"},{"location":"ponytest-UnitTest/#unittest","text":"[Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest","title":"UnitTest"},{"location":"ponytest-UnitTest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-UnitTest/#name","text":"[Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val","title":"name"},{"location":"ponytest-UnitTest/#returns","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#exclusion_group","text":"[Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val","title":"exclusion_group"},{"location":"ponytest-UnitTest/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#apply","text":"[Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ?","title":"apply"},{"location":"ponytest-UnitTest/#parameters","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#timed_out","text":"[Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val","title":"timed_out"},{"location":"ponytest-UnitTest/#parameters_1","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#set_up","text":"[Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ?","title":"set_up"},{"location":"ponytest-UnitTest/#parameters_2","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#tear_down","text":"[Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val","title":"tear_down"},{"location":"ponytest-UnitTest/#parameters_3","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_5","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#label","text":"[Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val","title":"label"},{"location":"ponytest-UnitTest/#returns_6","text":"String val","title":"Returns"},{"location":"ponyzip--index/","text":"No package doc string provided for ponyzip. Public Types \u00b6 struct Zipsourceargsseek struct Ziperror struct Zipstat struct Zipbufferfragment struct Zipfileattributes struct Zip struct Zipfile struct Zipsource class PonyZip struct IOFILE primitive ABLibZIP type ZipFlags primitive ZipCreate primitive ZipExcl primitive ZipCheckcons primitive ZipTruncate primitive ZipRDOnly type ZipFLFlags primitive ZipFLNocase primitive ZipFLNodir primitive ZipFLCompressed primitive ZipFLUnchanged primitive ZipFLRecompress primitive ZipFLEncrypted primitive ZipFLEncGuess primitive ZipFLEncRaw primitive ZipFLEncStrict primitive ZipFLLocal primitive ZipFLCentral primitive ZipFLEncUtf8 primitive ZipFLEncCp437 primitive ZipFLOverwrite type ZipAflFlags primitive ZipAFLRDOnly type ZipER primitive ZipEROK primitive ZipERMultidisk primitive ZipERRename primitive ZipERClose primitive ZipERSeek primitive ZipERRead primitive ZipERWrite primitive ZipERCRC primitive ZipERZipclosed primitive ZipERNoent primitive ZipERExists primitive ZipEROpen primitive ZipERTmpopen primitive ZipERZlib primitive ZipERMemory primitive ZipERChanged primitive ZipERCompnotsupp primitive ZipEREof primitive ZipERInval primitive ZipERNozip primitive ZipERInternal primitive ZipERIncons primitive ZipERRemove primitive ZipERDeleted primitive ZipEREncrnotsupp primitive ZipERRDOnly primitive ZipERNopasswd primitive ZipERWrongpasswd primitive ZipEROpnotsupp primitive ZipERInuse primitive ZipERTell primitive ZipERCompresseddata primitive ZipERCancelled primitive ZipETNone primitive ZipETSys primitive ZipETZlib primitive ZipCMDefault primitive ZipCMStore primitive ZipCMShrink primitive ZipCMReduce1 primitive ZipCMReduce2 primitive ZipCMReduce3 primitive ZipCMReduce4 primitive ZipCMImplode primitive ZipCMDeflate primitive ZipCMDeflate64 primitive ZipCMPkwareimplode primitive ZipCMBzip2 primitive ZipCMLzma primitive ZipCMTerse primitive ZipCMLz77 primitive ZipCMLzma2 primitive ZipCMxz primitive ZipCMJpeg primitive ZipCMWavpack primitive ZipCMPpmd type ZipEMType primitive ZipEMNone primitive ZipEMTradpkware primitive ZipEMDes primitive ZipEMRc2old primitive ZipEM3des168 primitive ZipEM3des112 primitive ZipEMPkzipaes128 primitive ZipEMPkzipaes192 primitive ZipEMPkzipaes256 primitive ZipEMRc2 primitive ZipEMRc4 primitive ZipEMAes128 primitive ZipEMAes192 primitive ZipEMAes256 primitive ZipEMUnknown primitive ZipOPSYSDos primitive ZipOPSYSAmiga primitive ZipOPSYSOpenvms primitive ZipOPSYSUnix primitive ZipOPSYSVmcms primitive ZipOPSYSAtarist primitive ZipOPSYSOs2 primitive ZipOPSYSMacintosh primitive ZipOPSYSZsystem primitive ZipOPSYSCpm primitive ZipOPSYSWindowsntfs primitive ZipOPSYSMvs primitive ZipOPSYSVse primitive ZipOPSYSAcornrisc primitive ZipOPSYSVfat primitive ZipOPSYSAlternatemvs primitive ZipOPSYSBeos primitive ZipOPSYSTandem primitive ZipOPSYSOs400 primitive ZipOPSYSOsx type ZipOPSYSDefault type ZipSOURCESupportsReadable primitive ZipSOURCEOpen primitive ZipSOURCERead primitive ZipSOURCEClose primitive ZipSOURCEStat primitive ZipSOURCEError primitive ZipSOURCEFree type ZipSOURCESupportsSeekable primitive ZipSOURCESeek primitive ZipSOURCETell primitive ZipSOURCESupports type ZipSOURCESupportsWritable primitive ZipSOURCEBeginWrite primitive ZipSOURCECommitWrite primitive ZipSOURCERollbackWrite primitive ZipSOURCEWrite primitive ZipSOURCESeekWrite primitive ZipSOURCETellWrite primitive ZipSOURCERemove primitive ZipSOURCEReserved1 primitive ZipSOURCEBeginWriteCloning primitive ZipSOURCEAcceptEmpty primitive ZipSOURCEGetFileAttributes type ZipStatFlags primitive ZipSTATName primitive ZipSTATIndex primitive ZipSTATSize primitive ZipSTATCompSize primitive ZipSTATMtime primitive ZipSTATCrc primitive ZipSTATCompMethod primitive ZipSTATEncryptionMethod primitive ZipSTATFlag type ZipFileAttributesFlags primitive ZipFileAttributesHostSystem primitive ZipFileAttributesAscii primitive ZipFileAttributesVersionNeeded primitive ZipFileAttributesExternalFileAttributes primitive ZipFileAttributesGeneralPurposeBitFlags actor Main","title":"Package"},{"location":"ponyzip--index/#public-types","text":"struct Zipsourceargsseek struct Ziperror struct Zipstat struct Zipbufferfragment struct Zipfileattributes struct Zip struct Zipfile struct Zipsource class PonyZip struct IOFILE primitive ABLibZIP type ZipFlags primitive ZipCreate primitive ZipExcl primitive ZipCheckcons primitive ZipTruncate primitive ZipRDOnly type ZipFLFlags primitive ZipFLNocase primitive ZipFLNodir primitive ZipFLCompressed primitive ZipFLUnchanged primitive ZipFLRecompress primitive ZipFLEncrypted primitive ZipFLEncGuess primitive ZipFLEncRaw primitive ZipFLEncStrict primitive ZipFLLocal primitive ZipFLCentral primitive ZipFLEncUtf8 primitive ZipFLEncCp437 primitive ZipFLOverwrite type ZipAflFlags primitive ZipAFLRDOnly type ZipER primitive ZipEROK primitive ZipERMultidisk primitive ZipERRename primitive ZipERClose primitive ZipERSeek primitive ZipERRead primitive ZipERWrite primitive ZipERCRC primitive ZipERZipclosed primitive ZipERNoent primitive ZipERExists primitive ZipEROpen primitive ZipERTmpopen primitive ZipERZlib primitive ZipERMemory primitive ZipERChanged primitive ZipERCompnotsupp primitive ZipEREof primitive ZipERInval primitive ZipERNozip primitive ZipERInternal primitive ZipERIncons primitive ZipERRemove primitive ZipERDeleted primitive ZipEREncrnotsupp primitive ZipERRDOnly primitive ZipERNopasswd primitive ZipERWrongpasswd primitive ZipEROpnotsupp primitive ZipERInuse primitive ZipERTell primitive ZipERCompresseddata primitive ZipERCancelled primitive ZipETNone primitive ZipETSys primitive ZipETZlib primitive ZipCMDefault primitive ZipCMStore primitive ZipCMShrink primitive ZipCMReduce1 primitive ZipCMReduce2 primitive ZipCMReduce3 primitive ZipCMReduce4 primitive ZipCMImplode primitive ZipCMDeflate primitive ZipCMDeflate64 primitive ZipCMPkwareimplode primitive ZipCMBzip2 primitive ZipCMLzma primitive ZipCMTerse primitive ZipCMLz77 primitive ZipCMLzma2 primitive ZipCMxz primitive ZipCMJpeg primitive ZipCMWavpack primitive ZipCMPpmd type ZipEMType primitive ZipEMNone primitive ZipEMTradpkware primitive ZipEMDes primitive ZipEMRc2old primitive ZipEM3des168 primitive ZipEM3des112 primitive ZipEMPkzipaes128 primitive ZipEMPkzipaes192 primitive ZipEMPkzipaes256 primitive ZipEMRc2 primitive ZipEMRc4 primitive ZipEMAes128 primitive ZipEMAes192 primitive ZipEMAes256 primitive ZipEMUnknown primitive ZipOPSYSDos primitive ZipOPSYSAmiga primitive ZipOPSYSOpenvms primitive ZipOPSYSUnix primitive ZipOPSYSVmcms primitive ZipOPSYSAtarist primitive ZipOPSYSOs2 primitive ZipOPSYSMacintosh primitive ZipOPSYSZsystem primitive ZipOPSYSCpm primitive ZipOPSYSWindowsntfs primitive ZipOPSYSMvs primitive ZipOPSYSVse primitive ZipOPSYSAcornrisc primitive ZipOPSYSVfat primitive ZipOPSYSAlternatemvs primitive ZipOPSYSBeos primitive ZipOPSYSTandem primitive ZipOPSYSOs400 primitive ZipOPSYSOsx type ZipOPSYSDefault type ZipSOURCESupportsReadable primitive ZipSOURCEOpen primitive ZipSOURCERead primitive ZipSOURCEClose primitive ZipSOURCEStat primitive ZipSOURCEError primitive ZipSOURCEFree type ZipSOURCESupportsSeekable primitive ZipSOURCESeek primitive ZipSOURCETell primitive ZipSOURCESupports type ZipSOURCESupportsWritable primitive ZipSOURCEBeginWrite primitive ZipSOURCECommitWrite primitive ZipSOURCERollbackWrite primitive ZipSOURCEWrite primitive ZipSOURCESeekWrite primitive ZipSOURCETellWrite primitive ZipSOURCERemove primitive ZipSOURCEReserved1 primitive ZipSOURCEBeginWriteCloning primitive ZipSOURCEAcceptEmpty primitive ZipSOURCEGetFileAttributes type ZipStatFlags primitive ZipSTATName primitive ZipSTATIndex primitive ZipSTATSize primitive ZipSTATCompSize primitive ZipSTATMtime primitive ZipSTATCrc primitive ZipSTATCompMethod primitive ZipSTATEncryptionMethod primitive ZipSTATFlag type ZipFileAttributesFlags primitive ZipFileAttributesHostSystem primitive ZipFileAttributesAscii primitive ZipFileAttributesVersionNeeded primitive ZipFileAttributesExternalFileAttributes primitive ZipFileAttributesGeneralPurposeBitFlags actor Main","title":"Public Types"},{"location":"ponyzip-ABLibZIP/","text":"ABLibZIP \u00b6 [Source] primitive val ABLibZIP Constructors \u00b6 create \u00b6 [Source] new val create() : ABLibZIP val^ Returns \u00b6 ABLibZIP val^ Public Functions \u00b6 pzipadd \u00b6 [Source] fun box pzipadd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: NullablePointer[Zipsource ref] tag) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: NullablePointer [ Zipsource ref] tag Returns \u00b6 I64 val pzipadddir \u00b6 [Source] fun box pzipadddir( pparg0: NullablePointer[Zip ref] tag, pparg1: String val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val Returns \u00b6 I64 val pzipgetfilecomment \u00b6 [Source] fun box pzipgetfilecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: Pointer[I32 val] tag, pparg3: I32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: Pointer [ I32 val] tag pparg3: I32 val Returns \u00b6 String val pzipgetnumfiles \u00b6 [Source] fun box pzipgetnumfiles( pparg0: NullablePointer[Zip ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 I32 val pziprename \u00b6 [Source] fun box pziprename( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val Returns \u00b6 I32 val pzipreplace \u00b6 [Source] fun box pzipreplace( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsetfilecomment \u00b6 [Source] fun box pzipsetfilecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: I32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: I32 val Returns \u00b6 I32 val pziperrorgetsystype \u00b6 [Source] fun box pziperrorgetsystype( pparg0: I32 val) : I32 val Parameters \u00b6 pparg0: I32 val Returns \u00b6 I32 val pziperrorget \u00b6 [Source] fun box pziperrorget( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[I32 val] tag, pparg2: Pointer[I32 val] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ I32 val] tag pparg2: Pointer [ I32 val] tag Returns \u00b6 None val pziperrortostr \u00b6 [Source] fun box pziperrortostr( pparg0: String val, pparg1: U64 val, pparg2: I32 val, pparg3: I32 val) : I32 val Parameters \u00b6 pparg0: String val pparg1: U64 val pparg2: I32 val pparg3: I32 val Returns \u00b6 I32 val pzipfileerrorget \u00b6 [Source] fun box pzipfileerrorget( pparg0: NullablePointer[Zipfile ref] tag, pparg1: Pointer[I32 val] tag, pparg2: Pointer[I32 val] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag pparg1: Pointer [ I32 val] tag pparg2: Pointer [ I32 val] tag Returns \u00b6 None val pzipclose \u00b6 [Source] fun box pzipclose( pparg0: NullablePointer[Zip ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 I32 val pzipdelete \u00b6 [Source] fun box pzipdelete( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val Returns \u00b6 I32 val pzipdiradd \u00b6 [Source] fun box pzipdiradd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val Returns \u00b6 I64 val pzipdiscard \u00b6 [Source] fun box pzipdiscard( pparg0: NullablePointer[Zip ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 None val pzipgeterror \u00b6 [Source] fun box pzipgeterror( pparg0: NullablePointer[Zip ref] tag) : NullablePointer[Ziperror ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 NullablePointer [ Ziperror ref] ref pziperrorclear \u00b6 [Source] fun box pziperrorclear( pparg0: NullablePointer[Zip ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 None val pziperrorcodezip \u00b6 [Source] fun box pziperrorcodezip( pparg0: NullablePointer[Ziperror ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 I32 val pziperrorcodesystem \u00b6 [Source] fun box pziperrorcodesystem( pparg0: NullablePointer[Ziperror ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 I32 val pziperrorfini \u00b6 [Source] fun box pziperrorfini( pparg0: NullablePointer[Ziperror ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 None val pziperrorinit \u00b6 [Source] fun box pziperrorinit( pparg0: NullablePointer[Ziperror ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 None val pziperrorinitwithcode \u00b6 [Source] fun box pziperrorinitwithcode( pparg0: NullablePointer[Ziperror ref] tag, pparg1: I32 val) : None val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag pparg1: I32 val Returns \u00b6 None val pziperrorset \u00b6 [Source] fun box pziperrorset( pparg0: NullablePointer[Ziperror ref] tag, pparg1: I32 val, pparg2: I32 val) : None val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag pparg1: I32 val pparg2: I32 val Returns \u00b6 None val pziperrorstrerror \u00b6 [Source] fun box pziperrorstrerror( pparg0: NullablePointer[Ziperror ref] tag) : String val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 String val pziperrorsystemtype \u00b6 [Source] fun box pziperrorsystemtype( pparg0: NullablePointer[Ziperror ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag Returns \u00b6 I32 val pziperrortodata \u00b6 [Source] fun box pziperrortodata( pparg0: NullablePointer[Ziperror ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Ziperror ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val Returns \u00b6 I64 val pzipfclose \u00b6 [Source] fun box pzipfclose( pparg0: NullablePointer[Zipfile ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag Returns \u00b6 I32 val pzipfdopen \u00b6 [Source] fun box pzipfdopen( pparg0: I32 val, pparg1: I32 val, pparg2: Pointer[I32 val] tag) : NullablePointer[Zip ref] ref Parameters \u00b6 pparg0: I32 val pparg1: I32 val pparg2: Pointer [ I32 val] tag Returns \u00b6 NullablePointer [ Zip ref] ref pzipfileadd \u00b6 [Source] fun box pzipfileadd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: NullablePointer[Zipsource ref] tag, pparg3: U32 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: NullablePointer [ Zipsource ref] tag pparg3: U32 val Returns \u00b6 I64 val pzipfileattributesinit \u00b6 [Source] fun box pzipfileattributesinit( pparg0: NullablePointer[Zipfileattributes ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipfileattributes ref] tag Returns \u00b6 None val pzipfileerrorclear \u00b6 [Source] fun box pzipfileerrorclear( pparg0: NullablePointer[Zipfile ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag Returns \u00b6 None val pzipfileextrafielddelete \u00b6 [Source] fun box pzipfileextrafielddelete( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U32 val Returns \u00b6 I32 val pzipfileextrafielddeletebyid \u00b6 [Source] fun box pzipfileextrafielddeletebyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: U32 val Returns \u00b6 I32 val pzipfileextrafieldset \u00b6 [Source] fun box pzipfileextrafieldset( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: String val, pparg5: U16 val, pparg6: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: String val pparg5: U16 val pparg6: U32 val Returns \u00b6 I32 val pzipfileextrafieldscount \u00b6 [Source] fun box pzipfileextrafieldscount( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : I16 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val Returns \u00b6 I16 val pzipfileextrafieldscountbyid \u00b6 [Source] fun box pzipfileextrafieldscountbyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U32 val) : I16 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U32 val Returns \u00b6 I16 val pzipfileextrafieldget \u00b6 [Source] fun box pzipfileextrafieldget( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: Pointer[U16 val] tag, pparg4: Pointer[U16 val] tag, pparg5: U32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: Pointer [ U16 val] tag pparg4: Pointer [ U16 val] tag pparg5: U32 val Returns \u00b6 String val pzipfileextrafieldgetbyid \u00b6 [Source] fun box pzipfileextrafieldgetbyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: Pointer[U16 val] tag, pparg5: U32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: Pointer [ U16 val] tag pparg5: U32 val Returns \u00b6 String val pzipfilegetcomment \u00b6 [Source] fun box pzipfilegetcomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: Pointer[U32 val] tag, pparg3: U32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: Pointer [ U32 val] tag pparg3: U32 val Returns \u00b6 String val pzipfilegeterror \u00b6 [Source] fun box pzipfilegeterror( pparg0: NullablePointer[Zipfile ref] tag) : NullablePointer[Ziperror ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag Returns \u00b6 NullablePointer [ Ziperror ref] ref pzipfilegetexternalattributes \u00b6 [Source] fun box pzipfilegetexternalattributes( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: String val, pparg4: Pointer[U32 val] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: String val pparg4: Pointer [ U32 val] tag Returns \u00b6 I32 val pzipfilerename \u00b6 [Source] fun box pzipfilerename( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: U32 val Returns \u00b6 I32 val pzipfilereplace \u00b6 [Source] fun box pzipfilereplace( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: NullablePointer[Zipsource ref] tag, pparg3: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: NullablePointer [ Zipsource ref] tag pparg3: U32 val Returns \u00b6 I32 val pzipfilesetcomment \u00b6 [Source] fun box pzipfilesetcomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: U16 val, pparg4: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: U16 val pparg4: U32 val Returns \u00b6 I32 val pzipfilesetdostime \u00b6 [Source] fun box pzipfilesetdostime( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: U32 val Returns \u00b6 I32 val pzipfilesetencryption \u00b6 [Source] fun box pzipfilesetencryption( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: String val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: String val Returns \u00b6 I32 val pzipfilesetexternalattributes \u00b6 [Source] fun box pzipfilesetexternalattributes( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: U8 val, pparg4: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: U8 val pparg4: U32 val Returns \u00b6 I32 val pzipfilesetmtime \u00b6 [Source] fun box pzipfilesetmtime( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: I64 val, pparg3: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: I64 val pparg3: U32 val Returns \u00b6 I32 val pzipfilestrerror \u00b6 [Source] fun box pzipfilestrerror( pparg0: NullablePointer[Zipfile ref] tag) : String val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag Returns \u00b6 String val pzipfopen \u00b6 [Source] fun box pzipfopen( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : NullablePointer[Zipfile ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val Returns \u00b6 NullablePointer [ Zipfile ref] ref pzipfopenencrypted \u00b6 [Source] fun box pzipfopenencrypted( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val, pparg3: String val) : NullablePointer[Zipfile ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val pparg3: String val Returns \u00b6 NullablePointer [ Zipfile ref] ref pzipfopenindex \u00b6 [Source] fun box pzipfopenindex( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : NullablePointer[Zipfile ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val Returns \u00b6 NullablePointer [ Zipfile ref] ref pzipfopenindexencrypted \u00b6 [Source] fun box pzipfopenindexencrypted( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: String val) : NullablePointer[Zipfile ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: String val Returns \u00b6 NullablePointer [ Zipfile ref] ref pzipfread \u00b6 [Source] fun box pzipfread( pparg0: NullablePointer[Zipfile ref] tag, pparg1: Pointer[U8 val] tag, pparg2: U64 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag pparg1: Pointer [ U8 val] tag pparg2: U64 val Returns \u00b6 I64 val pzipfseek \u00b6 [Source] fun box pzipfseek( pparg0: NullablePointer[Zipfile ref] tag, pparg1: I64 val, pparg2: I32 val) : I8 val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag pparg1: I64 val pparg2: I32 val Returns \u00b6 I8 val pzipftell \u00b6 [Source] fun box pzipftell( pparg0: NullablePointer[Zipfile ref] tag) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipfile ref] tag Returns \u00b6 I64 val pzipgetarchivecomment \u00b6 [Source] fun box pzipgetarchivecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[I32 val] tag, pparg2: U32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ I32 val] tag pparg2: U32 val Returns \u00b6 String val pzipgetarchiveflag \u00b6 [Source] fun box pzipgetarchiveflag( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val, pparg2: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val pparg2: U32 val Returns \u00b6 I32 val pzipgetname \u00b6 [Source] fun box pzipgetname( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val Returns \u00b6 String val pzipgetnumentries \u00b6 [Source] fun box pzipgetnumentries( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val Returns \u00b6 I64 val pziplibzipversion \u00b6 [Source] fun box pziplibzipversion() : String val Returns \u00b6 String val pzipnamelocate \u00b6 [Source] fun box pzipnamelocate( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val Returns \u00b6 I64 val pzipopen \u00b6 [Source] fun box pzipopen( pparg0: String val, pparg1: I32 val, pparg2: Pointer[I32 val] tag) : NullablePointer[Zip ref] ref Parameters \u00b6 pparg0: String val pparg1: I32 val pparg2: Pointer [ I32 val] tag Returns \u00b6 NullablePointer [ Zip ref] ref pzipopenfromsource \u00b6 [Source] fun box pzipopenfromsource( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I32 val, pparg2: NullablePointer[Ziperror ref] tag) : NullablePointer[Zip ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: I32 val pparg2: NullablePointer [ Ziperror ref] tag Returns \u00b6 NullablePointer [ Zip ref] ref pzipsetarchivecomment \u00b6 [Source] fun box pzipsetarchivecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U16 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U16 val Returns \u00b6 I32 val pzipsetarchiveflag \u00b6 [Source] fun box pzipsetarchiveflag( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val, pparg2: I32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val pparg2: I32 val Returns \u00b6 I32 val pzipsetdefaultpassword \u00b6 [Source] fun box pzipsetdefaultpassword( pparg0: NullablePointer[Zip ref] tag, pparg1: String val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val Returns \u00b6 I32 val pzipsetfilecompression \u00b6 [Source] fun box pzipsetfilecompression( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: I32 val, pparg3: U32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: I32 val pparg3: U32 val Returns \u00b6 I32 val pzipsourcebeginwrite \u00b6 [Source] fun box pzipsourcebeginwrite( pparg0: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsourcebeginwritecloning \u00b6 [Source] fun box pzipsourcebeginwritecloning( pparg0: NullablePointer[Zipsource ref] tag, pparg1: U64 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: U64 val Returns \u00b6 I32 val pzipsourcebuffer \u00b6 [Source] fun box pzipsourcebuffer( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val, pparg3: I32 val) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val pparg3: I32 val Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcebuffercreate \u00b6 [Source] fun box pzipsourcebuffercreate( pparg0: Pointer[U8 val] tag, pparg1: U64 val, pparg2: I32 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: Pointer [ U8 val] tag pparg1: U64 val pparg2: I32 val pparg3: NullablePointer [ Ziperror ref] tag Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcebufferfragment \u00b6 [Source] fun box pzipsourcebufferfragment( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[Zipbufferfragment ref] tag, pparg2: U64 val, pparg3: I32 val) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ Zipbufferfragment ref] tag pparg2: U64 val pparg3: I32 val Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcebufferfragmentcreate \u00b6 [Source] fun box pzipsourcebufferfragmentcreate( pparg0: NullablePointer[Zipbufferfragment ref] tag, pparg1: U64 val, pparg2: I32 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zipbufferfragment ref] tag pparg1: U64 val pparg2: I32 val pparg3: NullablePointer [ Ziperror ref] tag Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourceclose \u00b6 [Source] fun box pzipsourceclose( pparg0: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsourcecommitwrite \u00b6 [Source] fun box pzipsourcecommitwrite( pparg0: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsourceerror \u00b6 [Source] fun box pzipsourceerror( pparg0: NullablePointer[Zipsource ref] tag) : NullablePointer[Ziperror ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 NullablePointer [ Ziperror ref] ref pzipsourcefile \u00b6 [Source] fun box pzipsourcefile( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U64 val, pparg3: I64 val) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U64 val pparg3: I64 val Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcefilecreate \u00b6 [Source] fun box pzipsourcefilecreate( pparg0: String val, pparg1: U64 val, pparg2: I64 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: String val pparg1: U64 val pparg2: I64 val pparg3: NullablePointer [ Ziperror ref] tag Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcefilep \u00b6 [Source] fun box pzipsourcefilep( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[IOFILE ref] tag, pparg2: U64 val, pparg3: I64 val) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ IOFILE ref] tag pparg2: U64 val pparg3: I64 val Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcefilepcreate \u00b6 [Source] fun box pzipsourcefilepcreate( pparg0: NullablePointer[IOFILE ref] tag, pparg1: U64 val, pparg2: I64 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ IOFILE ref] tag pparg1: U64 val pparg2: I64 val pparg3: NullablePointer [ Ziperror ref] tag Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipsourcefree \u00b6 [Source] fun box pzipsourcefree( pparg0: NullablePointer[Zipsource ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 None val pzipsourcegetfileattributes \u00b6 [Source] fun box pzipsourcegetfileattributes( pparg0: NullablePointer[Zipsource ref] tag, pparg1: NullablePointer[Zipfileattributes ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: NullablePointer [ Zipfileattributes ref] tag Returns \u00b6 I32 val pzipsourceisdeleted \u00b6 [Source] fun box pzipsourceisdeleted( pparg0: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsourcekeep \u00b6 [Source] fun box pzipsourcekeep( pparg0: NullablePointer[Zipsource ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 None val pzipsourceopen \u00b6 [Source] fun box pzipsourceopen( pparg0: NullablePointer[Zipsource ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I32 val pzipsourceread \u00b6 [Source] fun box pzipsourceread( pparg0: NullablePointer[Zipsource ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val Returns \u00b6 I64 val pzipsourcerollbackwrite \u00b6 [Source] fun box pzipsourcerollbackwrite( pparg0: NullablePointer[Zipsource ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 None val pzipsourceseek \u00b6 [Source] fun box pzipsourceseek( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I64 val, pparg2: I32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: I64 val pparg2: I32 val Returns \u00b6 I32 val pzipsourceseekcomputeoffset \u00b6 [Source] fun box pzipsourceseekcomputeoffset( pparg0: U64 val, pparg1: U64 val, pparg2: Pointer[None val] tag, pparg3: U64 val, pparg4: NullablePointer[Ziperror ref] tag) : I64 val Parameters \u00b6 pparg0: U64 val pparg1: U64 val pparg2: Pointer [ None val] tag pparg3: U64 val pparg4: NullablePointer [ Ziperror ref] tag Returns \u00b6 I64 val pzipsourceseekwrite \u00b6 [Source] fun box pzipsourceseekwrite( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I64 val, pparg2: I32 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: I64 val pparg2: I32 val Returns \u00b6 I32 val pzipsourcestat \u00b6 [Source] fun box pzipsourcestat( pparg0: NullablePointer[Zipsource ref] tag, pparg1: NullablePointer[Zipstat ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: NullablePointer [ Zipstat ref] tag Returns \u00b6 I32 val pzipsourcetell \u00b6 [Source] fun box pzipsourcetell( pparg0: NullablePointer[Zipsource ref] tag) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I64 val pzipsourcetellwrite \u00b6 [Source] fun box pzipsourcetellwrite( pparg0: NullablePointer[Zipsource ref] tag) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag Returns \u00b6 I64 val pzipsourcewrite \u00b6 [Source] fun box pzipsourcewrite( pparg0: NullablePointer[Zipsource ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val Parameters \u00b6 pparg0: NullablePointer [ Zipsource ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val Returns \u00b6 I64 val pzipsourcezip \u00b6 [Source] fun box pzipsourcezip( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[Zip ref] tag, pparg2: U64 val, pparg3: U32 val, pparg4: U64 val, pparg5: I64 val) : NullablePointer[Zipsource ref] ref Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ Zip ref] tag pparg2: U64 val pparg3: U32 val pparg4: U64 val pparg5: I64 val Returns \u00b6 NullablePointer [ Zipsource ref] ref pzipstat \u00b6 [Source] fun box pzipstat( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val, pparg3: NullablePointer[Zipstat ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val pparg3: NullablePointer [ Zipstat ref] tag Returns \u00b6 I32 val pzipstatindex \u00b6 [Source] fun box pzipstatindex( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: NullablePointer[Zipstat ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: NullablePointer [ Zipstat ref] tag Returns \u00b6 I32 val pzipstatinit \u00b6 [Source] fun box pzipstatinit( pparg0: NullablePointer[Zipstat ref] tag) : None val Parameters \u00b6 pparg0: NullablePointer [ Zipstat ref] tag Returns \u00b6 None val pzipstrerror \u00b6 [Source] fun box pzipstrerror( pparg0: NullablePointer[Zip ref] tag) : String val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 String val pzipunchange \u00b6 [Source] fun box pzipunchange( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val Returns \u00b6 I32 val pzipunchangeall \u00b6 [Source] fun box pzipunchangeall( pparg0: NullablePointer[Zip ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 I32 val pzipunchangearchive \u00b6 [Source] fun box pzipunchangearchive( pparg0: NullablePointer[Zip ref] tag) : I32 val Parameters \u00b6 pparg0: NullablePointer [ Zip ref] tag Returns \u00b6 I32 val pzipcompressionmethodsupported \u00b6 [Source] fun box pzipcompressionmethodsupported( pmethod: I32 val, pcompress: I32 val) : I32 val Parameters \u00b6 pmethod: I32 val pcompress: I32 val Returns \u00b6 I32 val pzipencryptionmethodsupported \u00b6 [Source] fun box pzipencryptionmethodsupported( pmethod: U16 val, pencode: I32 val) : I32 val Parameters \u00b6 pmethod: U16 val pencode: I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ABLibZIP val) : Bool val Parameters \u00b6 that: ABLibZIP val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ABLibZIP val) : Bool val Parameters \u00b6 that: ABLibZIP val Returns \u00b6 Bool val","title":"primitive ABLibZIP"},{"location":"ponyzip-ABLibZIP/#ablibzip","text":"[Source] primitive val ABLibZIP","title":"ABLibZIP"},{"location":"ponyzip-ABLibZIP/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ABLibZIP/#create","text":"[Source] new val create() : ABLibZIP val^","title":"create"},{"location":"ponyzip-ABLibZIP/#returns","text":"ABLibZIP val^","title":"Returns"},{"location":"ponyzip-ABLibZIP/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ABLibZIP/#pzipadd","text":"[Source] fun box pzipadd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: NullablePointer[Zipsource ref] tag) : I64 val","title":"pzipadd"},{"location":"ponyzip-ABLibZIP/#parameters","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_1","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipadddir","text":"[Source] fun box pzipadddir( pparg0: NullablePointer[Zip ref] tag, pparg1: String val) : I64 val","title":"pzipadddir"},{"location":"ponyzip-ABLibZIP/#parameters_1","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_2","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetfilecomment","text":"[Source] fun box pzipgetfilecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: Pointer[I32 val] tag, pparg3: I32 val) : String val","title":"pzipgetfilecomment"},{"location":"ponyzip-ABLibZIP/#parameters_2","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: Pointer [ I32 val] tag pparg3: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_3","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetnumfiles","text":"[Source] fun box pzipgetnumfiles( pparg0: NullablePointer[Zip ref] tag) : I32 val","title":"pzipgetnumfiles"},{"location":"ponyzip-ABLibZIP/#parameters_3","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_4","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziprename","text":"[Source] fun box pziprename( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val) : I32 val","title":"pziprename"},{"location":"ponyzip-ABLibZIP/#parameters_4","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_5","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipreplace","text":"[Source] fun box pzipreplace( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipreplace"},{"location":"ponyzip-ABLibZIP/#parameters_5","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_6","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsetfilecomment","text":"[Source] fun box pzipsetfilecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: I32 val) : I32 val","title":"pzipsetfilecomment"},{"location":"ponyzip-ABLibZIP/#parameters_6","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_7","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorgetsystype","text":"[Source] fun box pziperrorgetsystype( pparg0: I32 val) : I32 val","title":"pziperrorgetsystype"},{"location":"ponyzip-ABLibZIP/#parameters_7","text":"pparg0: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_8","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorget","text":"[Source] fun box pziperrorget( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[I32 val] tag, pparg2: Pointer[I32 val] tag) : None val","title":"pziperrorget"},{"location":"ponyzip-ABLibZIP/#parameters_8","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ I32 val] tag pparg2: Pointer [ I32 val] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_9","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrortostr","text":"[Source] fun box pziperrortostr( pparg0: String val, pparg1: U64 val, pparg2: I32 val, pparg3: I32 val) : I32 val","title":"pziperrortostr"},{"location":"ponyzip-ABLibZIP/#parameters_9","text":"pparg0: String val pparg1: U64 val pparg2: I32 val pparg3: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_10","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileerrorget","text":"[Source] fun box pzipfileerrorget( pparg0: NullablePointer[Zipfile ref] tag, pparg1: Pointer[I32 val] tag, pparg2: Pointer[I32 val] tag) : None val","title":"pzipfileerrorget"},{"location":"ponyzip-ABLibZIP/#parameters_10","text":"pparg0: NullablePointer [ Zipfile ref] tag pparg1: Pointer [ I32 val] tag pparg2: Pointer [ I32 val] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_11","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipclose","text":"[Source] fun box pzipclose( pparg0: NullablePointer[Zip ref] tag) : I32 val","title":"pzipclose"},{"location":"ponyzip-ABLibZIP/#parameters_11","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_12","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipdelete","text":"[Source] fun box pzipdelete( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val) : I32 val","title":"pzipdelete"},{"location":"ponyzip-ABLibZIP/#parameters_12","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_13","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipdiradd","text":"[Source] fun box pzipdiradd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : I64 val","title":"pzipdiradd"},{"location":"ponyzip-ABLibZIP/#parameters_13","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_14","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipdiscard","text":"[Source] fun box pzipdiscard( pparg0: NullablePointer[Zip ref] tag) : None val","title":"pzipdiscard"},{"location":"ponyzip-ABLibZIP/#parameters_14","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_15","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgeterror","text":"[Source] fun box pzipgeterror( pparg0: NullablePointer[Zip ref] tag) : NullablePointer[Ziperror ref] ref","title":"pzipgeterror"},{"location":"ponyzip-ABLibZIP/#parameters_15","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_16","text":"NullablePointer [ Ziperror ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorclear","text":"[Source] fun box pziperrorclear( pparg0: NullablePointer[Zip ref] tag) : None val","title":"pziperrorclear"},{"location":"ponyzip-ABLibZIP/#parameters_16","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_17","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorcodezip","text":"[Source] fun box pziperrorcodezip( pparg0: NullablePointer[Ziperror ref] tag) : I32 val","title":"pziperrorcodezip"},{"location":"ponyzip-ABLibZIP/#parameters_17","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_18","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorcodesystem","text":"[Source] fun box pziperrorcodesystem( pparg0: NullablePointer[Ziperror ref] tag) : I32 val","title":"pziperrorcodesystem"},{"location":"ponyzip-ABLibZIP/#parameters_18","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_19","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorfini","text":"[Source] fun box pziperrorfini( pparg0: NullablePointer[Ziperror ref] tag) : None val","title":"pziperrorfini"},{"location":"ponyzip-ABLibZIP/#parameters_19","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_20","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorinit","text":"[Source] fun box pziperrorinit( pparg0: NullablePointer[Ziperror ref] tag) : None val","title":"pziperrorinit"},{"location":"ponyzip-ABLibZIP/#parameters_20","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_21","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorinitwithcode","text":"[Source] fun box pziperrorinitwithcode( pparg0: NullablePointer[Ziperror ref] tag, pparg1: I32 val) : None val","title":"pziperrorinitwithcode"},{"location":"ponyzip-ABLibZIP/#parameters_21","text":"pparg0: NullablePointer [ Ziperror ref] tag pparg1: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_22","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorset","text":"[Source] fun box pziperrorset( pparg0: NullablePointer[Ziperror ref] tag, pparg1: I32 val, pparg2: I32 val) : None val","title":"pziperrorset"},{"location":"ponyzip-ABLibZIP/#parameters_22","text":"pparg0: NullablePointer [ Ziperror ref] tag pparg1: I32 val pparg2: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_23","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorstrerror","text":"[Source] fun box pziperrorstrerror( pparg0: NullablePointer[Ziperror ref] tag) : String val","title":"pziperrorstrerror"},{"location":"ponyzip-ABLibZIP/#parameters_23","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_24","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrorsystemtype","text":"[Source] fun box pziperrorsystemtype( pparg0: NullablePointer[Ziperror ref] tag) : I32 val","title":"pziperrorsystemtype"},{"location":"ponyzip-ABLibZIP/#parameters_24","text":"pparg0: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_25","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziperrortodata","text":"[Source] fun box pziperrortodata( pparg0: NullablePointer[Ziperror ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val","title":"pziperrortodata"},{"location":"ponyzip-ABLibZIP/#parameters_25","text":"pparg0: NullablePointer [ Ziperror ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_26","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfclose","text":"[Source] fun box pzipfclose( pparg0: NullablePointer[Zipfile ref] tag) : I32 val","title":"pzipfclose"},{"location":"ponyzip-ABLibZIP/#parameters_26","text":"pparg0: NullablePointer [ Zipfile ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_27","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfdopen","text":"[Source] fun box pzipfdopen( pparg0: I32 val, pparg1: I32 val, pparg2: Pointer[I32 val] tag) : NullablePointer[Zip ref] ref","title":"pzipfdopen"},{"location":"ponyzip-ABLibZIP/#parameters_27","text":"pparg0: I32 val pparg1: I32 val pparg2: Pointer [ I32 val] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_28","text":"NullablePointer [ Zip ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileadd","text":"[Source] fun box pzipfileadd( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: NullablePointer[Zipsource ref] tag, pparg3: U32 val) : I64 val","title":"pzipfileadd"},{"location":"ponyzip-ABLibZIP/#parameters_28","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: NullablePointer [ Zipsource ref] tag pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_29","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileattributesinit","text":"[Source] fun box pzipfileattributesinit( pparg0: NullablePointer[Zipfileattributes ref] tag) : None val","title":"pzipfileattributesinit"},{"location":"ponyzip-ABLibZIP/#parameters_29","text":"pparg0: NullablePointer [ Zipfileattributes ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_30","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileerrorclear","text":"[Source] fun box pzipfileerrorclear( pparg0: NullablePointer[Zipfile ref] tag) : None val","title":"pzipfileerrorclear"},{"location":"ponyzip-ABLibZIP/#parameters_30","text":"pparg0: NullablePointer [ Zipfile ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_31","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafielddelete","text":"[Source] fun box pzipfileextrafielddelete( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U32 val) : I32 val","title":"pzipfileextrafielddelete"},{"location":"ponyzip-ABLibZIP/#parameters_31","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_32","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafielddeletebyid","text":"[Source] fun box pzipfileextrafielddeletebyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: U32 val) : I32 val","title":"pzipfileextrafielddeletebyid"},{"location":"ponyzip-ABLibZIP/#parameters_32","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_33","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafieldset","text":"[Source] fun box pzipfileextrafieldset( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: String val, pparg5: U16 val, pparg6: U32 val) : I32 val","title":"pzipfileextrafieldset"},{"location":"ponyzip-ABLibZIP/#parameters_33","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: String val pparg5: U16 val pparg6: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_34","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafieldscount","text":"[Source] fun box pzipfileextrafieldscount( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : I16 val","title":"pzipfileextrafieldscount"},{"location":"ponyzip-ABLibZIP/#parameters_34","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_35","text":"I16 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafieldscountbyid","text":"[Source] fun box pzipfileextrafieldscountbyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U32 val) : I16 val","title":"pzipfileextrafieldscountbyid"},{"location":"ponyzip-ABLibZIP/#parameters_35","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_36","text":"I16 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafieldget","text":"[Source] fun box pzipfileextrafieldget( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: Pointer[U16 val] tag, pparg4: Pointer[U16 val] tag, pparg5: U32 val) : String val","title":"pzipfileextrafieldget"},{"location":"ponyzip-ABLibZIP/#parameters_36","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: Pointer [ U16 val] tag pparg4: Pointer [ U16 val] tag pparg5: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_37","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfileextrafieldgetbyid","text":"[Source] fun box pzipfileextrafieldgetbyid( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: Pointer[U16 val] tag, pparg5: U32 val) : String val","title":"pzipfileextrafieldgetbyid"},{"location":"ponyzip-ABLibZIP/#parameters_37","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: Pointer [ U16 val] tag pparg5: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_38","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilegetcomment","text":"[Source] fun box pzipfilegetcomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: Pointer[U32 val] tag, pparg3: U32 val) : String val","title":"pzipfilegetcomment"},{"location":"ponyzip-ABLibZIP/#parameters_38","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: Pointer [ U32 val] tag pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_39","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilegeterror","text":"[Source] fun box pzipfilegeterror( pparg0: NullablePointer[Zipfile ref] tag) : NullablePointer[Ziperror ref] ref","title":"pzipfilegeterror"},{"location":"ponyzip-ABLibZIP/#parameters_39","text":"pparg0: NullablePointer [ Zipfile ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_40","text":"NullablePointer [ Ziperror ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilegetexternalattributes","text":"[Source] fun box pzipfilegetexternalattributes( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: String val, pparg4: Pointer[U32 val] tag) : I32 val","title":"pzipfilegetexternalattributes"},{"location":"ponyzip-ABLibZIP/#parameters_40","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: String val pparg4: Pointer [ U32 val] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_41","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilerename","text":"[Source] fun box pzipfilerename( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: U32 val) : I32 val","title":"pzipfilerename"},{"location":"ponyzip-ABLibZIP/#parameters_41","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_42","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilereplace","text":"[Source] fun box pzipfilereplace( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: NullablePointer[Zipsource ref] tag, pparg3: U32 val) : I32 val","title":"pzipfilereplace"},{"location":"ponyzip-ABLibZIP/#parameters_42","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: NullablePointer [ Zipsource ref] tag pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_43","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilesetcomment","text":"[Source] fun box pzipfilesetcomment( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: String val, pparg3: U16 val, pparg4: U32 val) : I32 val","title":"pzipfilesetcomment"},{"location":"ponyzip-ABLibZIP/#parameters_43","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: String val pparg3: U16 val pparg4: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_44","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilesetdostime","text":"[Source] fun box pzipfilesetdostime( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: U16 val, pparg4: U32 val) : I32 val","title":"pzipfilesetdostime"},{"location":"ponyzip-ABLibZIP/#parameters_44","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: U16 val pparg4: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_45","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilesetencryption","text":"[Source] fun box pzipfilesetencryption( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U16 val, pparg3: String val) : I32 val","title":"pzipfilesetencryption"},{"location":"ponyzip-ABLibZIP/#parameters_45","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U16 val pparg3: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_46","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilesetexternalattributes","text":"[Source] fun box pzipfilesetexternalattributes( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: U8 val, pparg4: U32 val) : I32 val","title":"pzipfilesetexternalattributes"},{"location":"ponyzip-ABLibZIP/#parameters_46","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: U8 val pparg4: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_47","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilesetmtime","text":"[Source] fun box pzipfilesetmtime( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: I64 val, pparg3: U32 val) : I32 val","title":"pzipfilesetmtime"},{"location":"ponyzip-ABLibZIP/#parameters_47","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: I64 val pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_48","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfilestrerror","text":"[Source] fun box pzipfilestrerror( pparg0: NullablePointer[Zipfile ref] tag) : String val","title":"pzipfilestrerror"},{"location":"ponyzip-ABLibZIP/#parameters_48","text":"pparg0: NullablePointer [ Zipfile ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_49","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfopen","text":"[Source] fun box pzipfopen( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : NullablePointer[Zipfile ref] ref","title":"pzipfopen"},{"location":"ponyzip-ABLibZIP/#parameters_49","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_50","text":"NullablePointer [ Zipfile ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfopenencrypted","text":"[Source] fun box pzipfopenencrypted( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val, pparg3: String val) : NullablePointer[Zipfile ref] ref","title":"pzipfopenencrypted"},{"location":"ponyzip-ABLibZIP/#parameters_50","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val pparg3: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_51","text":"NullablePointer [ Zipfile ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfopenindex","text":"[Source] fun box pzipfopenindex( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : NullablePointer[Zipfile ref] ref","title":"pzipfopenindex"},{"location":"ponyzip-ABLibZIP/#parameters_51","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_52","text":"NullablePointer [ Zipfile ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfopenindexencrypted","text":"[Source] fun box pzipfopenindexencrypted( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: String val) : NullablePointer[Zipfile ref] ref","title":"pzipfopenindexencrypted"},{"location":"ponyzip-ABLibZIP/#parameters_52","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_53","text":"NullablePointer [ Zipfile ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfread","text":"[Source] fun box pzipfread( pparg0: NullablePointer[Zipfile ref] tag, pparg1: Pointer[U8 val] tag, pparg2: U64 val) : I64 val","title":"pzipfread"},{"location":"ponyzip-ABLibZIP/#parameters_53","text":"pparg0: NullablePointer [ Zipfile ref] tag pparg1: Pointer [ U8 val] tag pparg2: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_54","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipfseek","text":"[Source] fun box pzipfseek( pparg0: NullablePointer[Zipfile ref] tag, pparg1: I64 val, pparg2: I32 val) : I8 val","title":"pzipfseek"},{"location":"ponyzip-ABLibZIP/#parameters_54","text":"pparg0: NullablePointer [ Zipfile ref] tag pparg1: I64 val pparg2: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_55","text":"I8 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipftell","text":"[Source] fun box pzipftell( pparg0: NullablePointer[Zipfile ref] tag) : I64 val","title":"pzipftell"},{"location":"ponyzip-ABLibZIP/#parameters_55","text":"pparg0: NullablePointer [ Zipfile ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_56","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetarchivecomment","text":"[Source] fun box pzipgetarchivecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[I32 val] tag, pparg2: U32 val) : String val","title":"pzipgetarchivecomment"},{"location":"ponyzip-ABLibZIP/#parameters_56","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ I32 val] tag pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_57","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetarchiveflag","text":"[Source] fun box pzipgetarchiveflag( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val, pparg2: U32 val) : I32 val","title":"pzipgetarchiveflag"},{"location":"ponyzip-ABLibZIP/#parameters_57","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_58","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetname","text":"[Source] fun box pzipgetname( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val) : String val","title":"pzipgetname"},{"location":"ponyzip-ABLibZIP/#parameters_58","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_59","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipgetnumentries","text":"[Source] fun box pzipgetnumentries( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val) : I64 val","title":"pzipgetnumentries"},{"location":"ponyzip-ABLibZIP/#parameters_59","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_60","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pziplibzipversion","text":"[Source] fun box pziplibzipversion() : String val","title":"pziplibzipversion"},{"location":"ponyzip-ABLibZIP/#returns_61","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipnamelocate","text":"[Source] fun box pzipnamelocate( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val) : I64 val","title":"pzipnamelocate"},{"location":"ponyzip-ABLibZIP/#parameters_60","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_62","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipopen","text":"[Source] fun box pzipopen( pparg0: String val, pparg1: I32 val, pparg2: Pointer[I32 val] tag) : NullablePointer[Zip ref] ref","title":"pzipopen"},{"location":"ponyzip-ABLibZIP/#parameters_61","text":"pparg0: String val pparg1: I32 val pparg2: Pointer [ I32 val] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_63","text":"NullablePointer [ Zip ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipopenfromsource","text":"[Source] fun box pzipopenfromsource( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I32 val, pparg2: NullablePointer[Ziperror ref] tag) : NullablePointer[Zip ref] ref","title":"pzipopenfromsource"},{"location":"ponyzip-ABLibZIP/#parameters_62","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: I32 val pparg2: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_64","text":"NullablePointer [ Zip ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsetarchivecomment","text":"[Source] fun box pzipsetarchivecomment( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U16 val) : I32 val","title":"pzipsetarchivecomment"},{"location":"ponyzip-ABLibZIP/#parameters_63","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U16 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_65","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsetarchiveflag","text":"[Source] fun box pzipsetarchiveflag( pparg0: NullablePointer[Zip ref] tag, pparg1: U32 val, pparg2: I32 val) : I32 val","title":"pzipsetarchiveflag"},{"location":"ponyzip-ABLibZIP/#parameters_64","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U32 val pparg2: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_66","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsetdefaultpassword","text":"[Source] fun box pzipsetdefaultpassword( pparg0: NullablePointer[Zip ref] tag, pparg1: String val) : I32 val","title":"pzipsetdefaultpassword"},{"location":"ponyzip-ABLibZIP/#parameters_65","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_67","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsetfilecompression","text":"[Source] fun box pzipsetfilecompression( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: I32 val, pparg3: U32 val) : I32 val","title":"pzipsetfilecompression"},{"location":"ponyzip-ABLibZIP/#parameters_66","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: I32 val pparg3: U32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_68","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebeginwrite","text":"[Source] fun box pzipsourcebeginwrite( pparg0: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipsourcebeginwrite"},{"location":"ponyzip-ABLibZIP/#parameters_67","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_69","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebeginwritecloning","text":"[Source] fun box pzipsourcebeginwritecloning( pparg0: NullablePointer[Zipsource ref] tag, pparg1: U64 val) : I32 val","title":"pzipsourcebeginwritecloning"},{"location":"ponyzip-ABLibZIP/#parameters_68","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_70","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebuffer","text":"[Source] fun box pzipsourcebuffer( pparg0: NullablePointer[Zip ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val, pparg3: I32 val) : NullablePointer[Zipsource ref] ref","title":"pzipsourcebuffer"},{"location":"ponyzip-ABLibZIP/#parameters_69","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val pparg3: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_71","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebuffercreate","text":"[Source] fun box pzipsourcebuffercreate( pparg0: Pointer[U8 val] tag, pparg1: U64 val, pparg2: I32 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref","title":"pzipsourcebuffercreate"},{"location":"ponyzip-ABLibZIP/#parameters_70","text":"pparg0: Pointer [ U8 val] tag pparg1: U64 val pparg2: I32 val pparg3: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_72","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebufferfragment","text":"[Source] fun box pzipsourcebufferfragment( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[Zipbufferfragment ref] tag, pparg2: U64 val, pparg3: I32 val) : NullablePointer[Zipsource ref] ref","title":"pzipsourcebufferfragment"},{"location":"ponyzip-ABLibZIP/#parameters_71","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ Zipbufferfragment ref] tag pparg2: U64 val pparg3: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_73","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcebufferfragmentcreate","text":"[Source] fun box pzipsourcebufferfragmentcreate( pparg0: NullablePointer[Zipbufferfragment ref] tag, pparg1: U64 val, pparg2: I32 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref","title":"pzipsourcebufferfragmentcreate"},{"location":"ponyzip-ABLibZIP/#parameters_72","text":"pparg0: NullablePointer [ Zipbufferfragment ref] tag pparg1: U64 val pparg2: I32 val pparg3: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_74","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceclose","text":"[Source] fun box pzipsourceclose( pparg0: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipsourceclose"},{"location":"ponyzip-ABLibZIP/#parameters_73","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_75","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcecommitwrite","text":"[Source] fun box pzipsourcecommitwrite( pparg0: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipsourcecommitwrite"},{"location":"ponyzip-ABLibZIP/#parameters_74","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_76","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceerror","text":"[Source] fun box pzipsourceerror( pparg0: NullablePointer[Zipsource ref] tag) : NullablePointer[Ziperror ref] ref","title":"pzipsourceerror"},{"location":"ponyzip-ABLibZIP/#parameters_75","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_77","text":"NullablePointer [ Ziperror ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcefile","text":"[Source] fun box pzipsourcefile( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U64 val, pparg3: I64 val) : NullablePointer[Zipsource ref] ref","title":"pzipsourcefile"},{"location":"ponyzip-ABLibZIP/#parameters_76","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U64 val pparg3: I64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_78","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcefilecreate","text":"[Source] fun box pzipsourcefilecreate( pparg0: String val, pparg1: U64 val, pparg2: I64 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref","title":"pzipsourcefilecreate"},{"location":"ponyzip-ABLibZIP/#parameters_77","text":"pparg0: String val pparg1: U64 val pparg2: I64 val pparg3: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_79","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcefilep","text":"[Source] fun box pzipsourcefilep( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[IOFILE ref] tag, pparg2: U64 val, pparg3: I64 val) : NullablePointer[Zipsource ref] ref","title":"pzipsourcefilep"},{"location":"ponyzip-ABLibZIP/#parameters_78","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ IOFILE ref] tag pparg2: U64 val pparg3: I64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_80","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcefilepcreate","text":"[Source] fun box pzipsourcefilepcreate( pparg0: NullablePointer[IOFILE ref] tag, pparg1: U64 val, pparg2: I64 val, pparg3: NullablePointer[Ziperror ref] tag) : NullablePointer[Zipsource ref] ref","title":"pzipsourcefilepcreate"},{"location":"ponyzip-ABLibZIP/#parameters_79","text":"pparg0: NullablePointer [ IOFILE ref] tag pparg1: U64 val pparg2: I64 val pparg3: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_81","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcefree","text":"[Source] fun box pzipsourcefree( pparg0: NullablePointer[Zipsource ref] tag) : None val","title":"pzipsourcefree"},{"location":"ponyzip-ABLibZIP/#parameters_80","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_82","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcegetfileattributes","text":"[Source] fun box pzipsourcegetfileattributes( pparg0: NullablePointer[Zipsource ref] tag, pparg1: NullablePointer[Zipfileattributes ref] tag) : I32 val","title":"pzipsourcegetfileattributes"},{"location":"ponyzip-ABLibZIP/#parameters_81","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: NullablePointer [ Zipfileattributes ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_83","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceisdeleted","text":"[Source] fun box pzipsourceisdeleted( pparg0: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipsourceisdeleted"},{"location":"ponyzip-ABLibZIP/#parameters_82","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_84","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcekeep","text":"[Source] fun box pzipsourcekeep( pparg0: NullablePointer[Zipsource ref] tag) : None val","title":"pzipsourcekeep"},{"location":"ponyzip-ABLibZIP/#parameters_83","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_85","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceopen","text":"[Source] fun box pzipsourceopen( pparg0: NullablePointer[Zipsource ref] tag) : I32 val","title":"pzipsourceopen"},{"location":"ponyzip-ABLibZIP/#parameters_84","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_86","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceread","text":"[Source] fun box pzipsourceread( pparg0: NullablePointer[Zipsource ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val","title":"pzipsourceread"},{"location":"ponyzip-ABLibZIP/#parameters_85","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_87","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcerollbackwrite","text":"[Source] fun box pzipsourcerollbackwrite( pparg0: NullablePointer[Zipsource ref] tag) : None val","title":"pzipsourcerollbackwrite"},{"location":"ponyzip-ABLibZIP/#parameters_86","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_88","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceseek","text":"[Source] fun box pzipsourceseek( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I64 val, pparg2: I32 val) : I32 val","title":"pzipsourceseek"},{"location":"ponyzip-ABLibZIP/#parameters_87","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: I64 val pparg2: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_89","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceseekcomputeoffset","text":"[Source] fun box pzipsourceseekcomputeoffset( pparg0: U64 val, pparg1: U64 val, pparg2: Pointer[None val] tag, pparg3: U64 val, pparg4: NullablePointer[Ziperror ref] tag) : I64 val","title":"pzipsourceseekcomputeoffset"},{"location":"ponyzip-ABLibZIP/#parameters_88","text":"pparg0: U64 val pparg1: U64 val pparg2: Pointer [ None val] tag pparg3: U64 val pparg4: NullablePointer [ Ziperror ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_90","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourceseekwrite","text":"[Source] fun box pzipsourceseekwrite( pparg0: NullablePointer[Zipsource ref] tag, pparg1: I64 val, pparg2: I32 val) : I32 val","title":"pzipsourceseekwrite"},{"location":"ponyzip-ABLibZIP/#parameters_89","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: I64 val pparg2: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_91","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcestat","text":"[Source] fun box pzipsourcestat( pparg0: NullablePointer[Zipsource ref] tag, pparg1: NullablePointer[Zipstat ref] tag) : I32 val","title":"pzipsourcestat"},{"location":"ponyzip-ABLibZIP/#parameters_90","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: NullablePointer [ Zipstat ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_92","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcetell","text":"[Source] fun box pzipsourcetell( pparg0: NullablePointer[Zipsource ref] tag) : I64 val","title":"pzipsourcetell"},{"location":"ponyzip-ABLibZIP/#parameters_91","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_93","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcetellwrite","text":"[Source] fun box pzipsourcetellwrite( pparg0: NullablePointer[Zipsource ref] tag) : I64 val","title":"pzipsourcetellwrite"},{"location":"ponyzip-ABLibZIP/#parameters_92","text":"pparg0: NullablePointer [ Zipsource ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_94","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcewrite","text":"[Source] fun box pzipsourcewrite( pparg0: NullablePointer[Zipsource ref] tag, pparg1: Pointer[None val] tag, pparg2: U64 val) : I64 val","title":"pzipsourcewrite"},{"location":"ponyzip-ABLibZIP/#parameters_93","text":"pparg0: NullablePointer [ Zipsource ref] tag pparg1: Pointer [ None val] tag pparg2: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_95","text":"I64 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipsourcezip","text":"[Source] fun box pzipsourcezip( pparg0: NullablePointer[Zip ref] tag, pparg1: NullablePointer[Zip ref] tag, pparg2: U64 val, pparg3: U32 val, pparg4: U64 val, pparg5: I64 val) : NullablePointer[Zipsource ref] ref","title":"pzipsourcezip"},{"location":"ponyzip-ABLibZIP/#parameters_94","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: NullablePointer [ Zip ref] tag pparg2: U64 val pparg3: U32 val pparg4: U64 val pparg5: I64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_96","text":"NullablePointer [ Zipsource ref] ref","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipstat","text":"[Source] fun box pzipstat( pparg0: NullablePointer[Zip ref] tag, pparg1: String val, pparg2: U32 val, pparg3: NullablePointer[Zipstat ref] tag) : I32 val","title":"pzipstat"},{"location":"ponyzip-ABLibZIP/#parameters_95","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: String val pparg2: U32 val pparg3: NullablePointer [ Zipstat ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_97","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipstatindex","text":"[Source] fun box pzipstatindex( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val, pparg2: U32 val, pparg3: NullablePointer[Zipstat ref] tag) : I32 val","title":"pzipstatindex"},{"location":"ponyzip-ABLibZIP/#parameters_96","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val pparg2: U32 val pparg3: NullablePointer [ Zipstat ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_98","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipstatinit","text":"[Source] fun box pzipstatinit( pparg0: NullablePointer[Zipstat ref] tag) : None val","title":"pzipstatinit"},{"location":"ponyzip-ABLibZIP/#parameters_97","text":"pparg0: NullablePointer [ Zipstat ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_99","text":"None val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipstrerror","text":"[Source] fun box pzipstrerror( pparg0: NullablePointer[Zip ref] tag) : String val","title":"pzipstrerror"},{"location":"ponyzip-ABLibZIP/#parameters_98","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_100","text":"String val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipunchange","text":"[Source] fun box pzipunchange( pparg0: NullablePointer[Zip ref] tag, pparg1: U64 val) : I32 val","title":"pzipunchange"},{"location":"ponyzip-ABLibZIP/#parameters_99","text":"pparg0: NullablePointer [ Zip ref] tag pparg1: U64 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_101","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipunchangeall","text":"[Source] fun box pzipunchangeall( pparg0: NullablePointer[Zip ref] tag) : I32 val","title":"pzipunchangeall"},{"location":"ponyzip-ABLibZIP/#parameters_100","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_102","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipunchangearchive","text":"[Source] fun box pzipunchangearchive( pparg0: NullablePointer[Zip ref] tag) : I32 val","title":"pzipunchangearchive"},{"location":"ponyzip-ABLibZIP/#parameters_101","text":"pparg0: NullablePointer [ Zip ref] tag","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_103","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipcompressionmethodsupported","text":"[Source] fun box pzipcompressionmethodsupported( pmethod: I32 val, pcompress: I32 val) : I32 val","title":"pzipcompressionmethodsupported"},{"location":"ponyzip-ABLibZIP/#parameters_102","text":"pmethod: I32 val pcompress: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_104","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#pzipencryptionmethodsupported","text":"[Source] fun box pzipencryptionmethodsupported( pmethod: U16 val, pencode: I32 val) : I32 val","title":"pzipencryptionmethodsupported"},{"location":"ponyzip-ABLibZIP/#parameters_103","text":"pmethod: U16 val pencode: I32 val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_105","text":"I32 val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#eq","text":"[Source] fun box eq( that: ABLibZIP val) : Bool val","title":"eq"},{"location":"ponyzip-ABLibZIP/#parameters_104","text":"that: ABLibZIP val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_106","text":"Bool val","title":"Returns"},{"location":"ponyzip-ABLibZIP/#ne","text":"[Source] fun box ne( that: ABLibZIP val) : Bool val","title":"ne"},{"location":"ponyzip-ABLibZIP/#parameters_105","text":"that: ABLibZIP val","title":"Parameters"},{"location":"ponyzip-ABLibZIP/#returns_107","text":"Bool val","title":"Returns"},{"location":"ponyzip-IOFILE/","text":"IOFILE \u00b6 [Source] struct ref IOFILE Constructors \u00b6 create \u00b6 [Source] new iso create() : IOFILE iso^ Returns \u00b6 IOFILE iso^","title":"struct IOFILE"},{"location":"ponyzip-IOFILE/#iofile","text":"[Source] struct ref IOFILE","title":"IOFILE"},{"location":"ponyzip-IOFILE/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-IOFILE/#create","text":"[Source] new iso create() : IOFILE iso^","title":"create"},{"location":"ponyzip-IOFILE/#returns","text":"IOFILE iso^","title":"Returns"},{"location":"ponyzip-Main/","text":"Main \u00b6 [Source] actor tag Main Constructors \u00b6 create \u00b6 [Source] new tag create( env: Env val) : Main tag^ Parameters \u00b6 env: Env val Returns \u00b6 Main tag^ Public Functions \u00b6 runtime_override_defaults \u00b6 [Source] fun runtime_override_defaults( rto: RuntimeOptions ref) : None val Parameters \u00b6 rto: RuntimeOptions ref Returns \u00b6 None val","title":"actor Main"},{"location":"ponyzip-Main/#main","text":"[Source] actor tag Main","title":"Main"},{"location":"ponyzip-Main/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Main/#create","text":"[Source] new tag create( env: Env val) : Main tag^","title":"create"},{"location":"ponyzip-Main/#parameters","text":"env: Env val","title":"Parameters"},{"location":"ponyzip-Main/#returns","text":"Main tag^","title":"Returns"},{"location":"ponyzip-Main/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-Main/#runtime_override_defaults","text":"[Source] fun runtime_override_defaults( rto: RuntimeOptions ref) : None val","title":"runtime_override_defaults"},{"location":"ponyzip-Main/#parameters_1","text":"rto: RuntimeOptions ref","title":"Parameters"},{"location":"ponyzip-Main/#returns_1","text":"None val","title":"Returns"},{"location":"ponyzip-PonyZip/","text":"PonyZip \u00b6 [Source] class ref PonyZip Constructors \u00b6 create \u00b6 [Source] new ref create( filename: String val, flags: Array[(ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref) : PonyZip ref^ Parameters \u00b6 filename: String val flags: Array [( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref Returns \u00b6 PonyZip ref^ Public fields \u00b6 var zip: NullablePointer [ Zip ref] ref \u00b6 [Source] var errorno: I32 val \u00b6 [Source] var errorstr: String val \u00b6 [Source] var initflags: I32 val \u00b6 [Source] Public Functions \u00b6 valid \u00b6 [Source] fun box valid() : Bool val Returns \u00b6 Bool val zfflags \u00b6 [Source] fun box zfflags( flags: Array[(ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref) : I32 val Parameters \u00b6 flags: Array [( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref Returns \u00b6 I32 val zfflflags \u00b6 [Source] fun box zfflflags( flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref) : U32 val Parameters \u00b6 flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref Returns \u00b6 U32 val count \u00b6 [Source] fun ref count( flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref = array) : USize val ? Parameters \u00b6 flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref = array Returns \u00b6 USize val ? filesdata \u00b6 [Source] fun ref filesdata() : Array[Zipstat ref] ref ? Returns \u00b6 Array [ Zipstat ref] ref ? zip_stat_index \u00b6 [Source] fun box zip_stat_index( index: USize val) : Zipstat ref ? Parameters \u00b6 index: USize val Returns \u00b6 Zipstat ref ? readfile \u00b6 [Source] fun ref readfile( zipstat: Zipstat ref) : Array[U8 val] iso^ ? Parameters \u00b6 zipstat: Zipstat ref Returns \u00b6 Array [ U8 val] iso^ ? add_file \u00b6 [Source] fun ref add_file( filename: String val, data: Array[U8 val] val, flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref) : USize val ? Parameters \u00b6 filename: String val data: Array [ U8 val] val flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref Returns \u00b6 USize val ? close \u00b6 [Source] fun box close() : None val Returns \u00b6 None val","title":"class PonyZip"},{"location":"ponyzip-PonyZip/#ponyzip","text":"[Source] class ref PonyZip","title":"PonyZip"},{"location":"ponyzip-PonyZip/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-PonyZip/#create","text":"[Source] new ref create( filename: String val, flags: Array[(ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref) : PonyZip ref^","title":"create"},{"location":"ponyzip-PonyZip/#parameters","text":"filename: String val flags: Array [( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns","text":"PonyZip ref^","title":"Returns"},{"location":"ponyzip-PonyZip/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-PonyZip/#var-zip-nullablepointerzip-ref-ref","text":"[Source]","title":"var zip: NullablePointer[Zip ref] ref"},{"location":"ponyzip-PonyZip/#var-errorno-i32-val","text":"[Source]","title":"var errorno: I32 val"},{"location":"ponyzip-PonyZip/#var-errorstr-string-val","text":"[Source]","title":"var errorstr: String val"},{"location":"ponyzip-PonyZip/#var-initflags-i32-val","text":"[Source]","title":"var initflags: I32 val"},{"location":"ponyzip-PonyZip/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-PonyZip/#valid","text":"[Source] fun box valid() : Bool val","title":"valid"},{"location":"ponyzip-PonyZip/#returns_1","text":"Bool val","title":"Returns"},{"location":"ponyzip-PonyZip/#zfflags","text":"[Source] fun box zfflags( flags: Array[(ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref) : I32 val","title":"zfflags"},{"location":"ponyzip-PonyZip/#parameters_1","text":"flags: Array [( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)] ref","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_2","text":"I32 val","title":"Returns"},{"location":"ponyzip-PonyZip/#zfflflags","text":"[Source] fun box zfflflags( flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref) : U32 val","title":"zfflflags"},{"location":"ponyzip-PonyZip/#parameters_2","text":"flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_3","text":"U32 val","title":"Returns"},{"location":"ponyzip-PonyZip/#count","text":"[Source] fun ref count( flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref = array) : USize val ?","title":"count"},{"location":"ponyzip-PonyZip/#parameters_3","text":"flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref = array","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_4","text":"USize val ?","title":"Returns"},{"location":"ponyzip-PonyZip/#filesdata","text":"[Source] fun ref filesdata() : Array[Zipstat ref] ref ?","title":"filesdata"},{"location":"ponyzip-PonyZip/#returns_5","text":"Array [ Zipstat ref] ref ?","title":"Returns"},{"location":"ponyzip-PonyZip/#zip_stat_index","text":"[Source] fun box zip_stat_index( index: USize val) : Zipstat ref ?","title":"zip_stat_index"},{"location":"ponyzip-PonyZip/#parameters_4","text":"index: USize val","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_6","text":"Zipstat ref ?","title":"Returns"},{"location":"ponyzip-PonyZip/#readfile","text":"[Source] fun ref readfile( zipstat: Zipstat ref) : Array[U8 val] iso^ ?","title":"readfile"},{"location":"ponyzip-PonyZip/#parameters_5","text":"zipstat: Zipstat ref","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_7","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"ponyzip-PonyZip/#add_file","text":"[Source] fun ref add_file( filename: String val, data: Array[U8 val] val, flags: Array[(ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref) : USize val ?","title":"add_file"},{"location":"ponyzip-PonyZip/#parameters_6","text":"filename: String val data: Array [ U8 val] val flags: Array [( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)] ref","title":"Parameters"},{"location":"ponyzip-PonyZip/#returns_8","text":"USize val ?","title":"Returns"},{"location":"ponyzip-PonyZip/#close","text":"[Source] fun box close() : None val","title":"close"},{"location":"ponyzip-PonyZip/#returns_9","text":"None val","title":"Returns"},{"location":"ponyzip-Zip/","text":"Zip \u00b6 [Source] struct ref Zip Constructors \u00b6 create \u00b6 [Source] new iso create() : Zip iso^ Returns \u00b6 Zip iso^","title":"struct Zip"},{"location":"ponyzip-Zip/#zip","text":"[Source] struct ref Zip","title":"Zip"},{"location":"ponyzip-Zip/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zip/#create","text":"[Source] new iso create() : Zip iso^","title":"create"},{"location":"ponyzip-Zip/#returns","text":"Zip iso^","title":"Returns"},{"location":"ponyzip-ZipAFLRDOnly/","text":"ZipAFLRDOnly \u00b6 [Source] primitive val ZipAFLRDOnly Constructors \u00b6 create \u00b6 [Source] new val create() : ZipAFLRDOnly val^ Returns \u00b6 ZipAFLRDOnly val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipAFLRDOnly val) : Bool val Parameters \u00b6 that: ZipAFLRDOnly val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipAFLRDOnly val) : Bool val Parameters \u00b6 that: ZipAFLRDOnly val Returns \u00b6 Bool val","title":"primitive ZipAFLRDOnly"},{"location":"ponyzip-ZipAFLRDOnly/#zipaflrdonly","text":"[Source] primitive val ZipAFLRDOnly","title":"ZipAFLRDOnly"},{"location":"ponyzip-ZipAFLRDOnly/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipAFLRDOnly/#create","text":"[Source] new val create() : ZipAFLRDOnly val^","title":"create"},{"location":"ponyzip-ZipAFLRDOnly/#returns","text":"ZipAFLRDOnly val^","title":"Returns"},{"location":"ponyzip-ZipAFLRDOnly/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipAFLRDOnly/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipAFLRDOnly/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipAFLRDOnly/#eq","text":"[Source] fun box eq( that: ZipAFLRDOnly val) : Bool val","title":"eq"},{"location":"ponyzip-ZipAFLRDOnly/#parameters","text":"that: ZipAFLRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipAFLRDOnly/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipAFLRDOnly/#ne","text":"[Source] fun box ne( that: ZipAFLRDOnly val) : Bool val","title":"ne"},{"location":"ponyzip-ZipAFLRDOnly/#parameters_1","text":"that: ZipAFLRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipAFLRDOnly/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipAflFlags/","text":"ZipAflFlags \u00b6 [Source] type ZipAflFlags is ZipAFLRDOnly val Type Alias For \u00b6 ZipAFLRDOnly val","title":"type ZipAflFlags"},{"location":"ponyzip-ZipAflFlags/#zipaflflags","text":"[Source] type ZipAflFlags is ZipAFLRDOnly val","title":"ZipAflFlags"},{"location":"ponyzip-ZipAflFlags/#type-alias-for","text":"ZipAFLRDOnly val","title":"Type Alias For"},{"location":"ponyzip-ZipCMBzip2/","text":"ZipCMBzip2 \u00b6 [Source] primitive val ZipCMBzip2 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMBzip2 val^ Returns \u00b6 ZipCMBzip2 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMBzip2 val) : Bool val Parameters \u00b6 that: ZipCMBzip2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMBzip2 val) : Bool val Parameters \u00b6 that: ZipCMBzip2 val Returns \u00b6 Bool val","title":"primitive ZipCMBzip2"},{"location":"ponyzip-ZipCMBzip2/#zipcmbzip2","text":"[Source] primitive val ZipCMBzip2","title":"ZipCMBzip2"},{"location":"ponyzip-ZipCMBzip2/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMBzip2/#create","text":"[Source] new val create() : ZipCMBzip2 val^","title":"create"},{"location":"ponyzip-ZipCMBzip2/#returns","text":"ZipCMBzip2 val^","title":"Returns"},{"location":"ponyzip-ZipCMBzip2/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMBzip2/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMBzip2/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMBzip2/#eq","text":"[Source] fun box eq( that: ZipCMBzip2 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMBzip2/#parameters","text":"that: ZipCMBzip2 val","title":"Parameters"},{"location":"ponyzip-ZipCMBzip2/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMBzip2/#ne","text":"[Source] fun box ne( that: ZipCMBzip2 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMBzip2/#parameters_1","text":"that: ZipCMBzip2 val","title":"Parameters"},{"location":"ponyzip-ZipCMBzip2/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDefault/","text":"ZipCMDefault \u00b6 [Source] primitive val ZipCMDefault Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMDefault val^ Returns \u00b6 ZipCMDefault val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMDefault val) : Bool val Parameters \u00b6 that: ZipCMDefault val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMDefault val) : Bool val Parameters \u00b6 that: ZipCMDefault val Returns \u00b6 Bool val","title":"primitive ZipCMDefault"},{"location":"ponyzip-ZipCMDefault/#zipcmdefault","text":"[Source] primitive val ZipCMDefault","title":"ZipCMDefault"},{"location":"ponyzip-ZipCMDefault/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMDefault/#create","text":"[Source] new val create() : ZipCMDefault val^","title":"create"},{"location":"ponyzip-ZipCMDefault/#returns","text":"ZipCMDefault val^","title":"Returns"},{"location":"ponyzip-ZipCMDefault/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMDefault/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMDefault/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMDefault/#eq","text":"[Source] fun box eq( that: ZipCMDefault val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMDefault/#parameters","text":"that: ZipCMDefault val","title":"Parameters"},{"location":"ponyzip-ZipCMDefault/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDefault/#ne","text":"[Source] fun box ne( that: ZipCMDefault val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMDefault/#parameters_1","text":"that: ZipCMDefault val","title":"Parameters"},{"location":"ponyzip-ZipCMDefault/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate/","text":"ZipCMDeflate \u00b6 [Source] primitive val ZipCMDeflate Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMDeflate val^ Returns \u00b6 ZipCMDeflate val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMDeflate val) : Bool val Parameters \u00b6 that: ZipCMDeflate val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMDeflate val) : Bool val Parameters \u00b6 that: ZipCMDeflate val Returns \u00b6 Bool val","title":"primitive ZipCMDeflate"},{"location":"ponyzip-ZipCMDeflate/#zipcmdeflate","text":"[Source] primitive val ZipCMDeflate","title":"ZipCMDeflate"},{"location":"ponyzip-ZipCMDeflate/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMDeflate/#create","text":"[Source] new val create() : ZipCMDeflate val^","title":"create"},{"location":"ponyzip-ZipCMDeflate/#returns","text":"ZipCMDeflate val^","title":"Returns"},{"location":"ponyzip-ZipCMDeflate/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMDeflate/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMDeflate/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate/#eq","text":"[Source] fun box eq( that: ZipCMDeflate val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMDeflate/#parameters","text":"that: ZipCMDeflate val","title":"Parameters"},{"location":"ponyzip-ZipCMDeflate/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate/#ne","text":"[Source] fun box ne( that: ZipCMDeflate val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMDeflate/#parameters_1","text":"that: ZipCMDeflate val","title":"Parameters"},{"location":"ponyzip-ZipCMDeflate/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate64/","text":"ZipCMDeflate64 \u00b6 [Source] primitive val ZipCMDeflate64 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMDeflate64 val^ Returns \u00b6 ZipCMDeflate64 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMDeflate64 val) : Bool val Parameters \u00b6 that: ZipCMDeflate64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMDeflate64 val) : Bool val Parameters \u00b6 that: ZipCMDeflate64 val Returns \u00b6 Bool val","title":"primitive ZipCMDeflate64"},{"location":"ponyzip-ZipCMDeflate64/#zipcmdeflate64","text":"[Source] primitive val ZipCMDeflate64","title":"ZipCMDeflate64"},{"location":"ponyzip-ZipCMDeflate64/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMDeflate64/#create","text":"[Source] new val create() : ZipCMDeflate64 val^","title":"create"},{"location":"ponyzip-ZipCMDeflate64/#returns","text":"ZipCMDeflate64 val^","title":"Returns"},{"location":"ponyzip-ZipCMDeflate64/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMDeflate64/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMDeflate64/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate64/#eq","text":"[Source] fun box eq( that: ZipCMDeflate64 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMDeflate64/#parameters","text":"that: ZipCMDeflate64 val","title":"Parameters"},{"location":"ponyzip-ZipCMDeflate64/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMDeflate64/#ne","text":"[Source] fun box ne( that: ZipCMDeflate64 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMDeflate64/#parameters_1","text":"that: ZipCMDeflate64 val","title":"Parameters"},{"location":"ponyzip-ZipCMDeflate64/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMImplode/","text":"ZipCMImplode \u00b6 [Source] primitive val ZipCMImplode Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMImplode val^ Returns \u00b6 ZipCMImplode val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMImplode val) : Bool val Parameters \u00b6 that: ZipCMImplode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMImplode val) : Bool val Parameters \u00b6 that: ZipCMImplode val Returns \u00b6 Bool val","title":"primitive ZipCMImplode"},{"location":"ponyzip-ZipCMImplode/#zipcmimplode","text":"[Source] primitive val ZipCMImplode","title":"ZipCMImplode"},{"location":"ponyzip-ZipCMImplode/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMImplode/#create","text":"[Source] new val create() : ZipCMImplode val^","title":"create"},{"location":"ponyzip-ZipCMImplode/#returns","text":"ZipCMImplode val^","title":"Returns"},{"location":"ponyzip-ZipCMImplode/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMImplode/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMImplode/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMImplode/#eq","text":"[Source] fun box eq( that: ZipCMImplode val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMImplode/#parameters","text":"that: ZipCMImplode val","title":"Parameters"},{"location":"ponyzip-ZipCMImplode/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMImplode/#ne","text":"[Source] fun box ne( that: ZipCMImplode val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMImplode/#parameters_1","text":"that: ZipCMImplode val","title":"Parameters"},{"location":"ponyzip-ZipCMImplode/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMJpeg/","text":"ZipCMJpeg \u00b6 [Source] primitive val ZipCMJpeg Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMJpeg val^ Returns \u00b6 ZipCMJpeg val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMJpeg val) : Bool val Parameters \u00b6 that: ZipCMJpeg val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMJpeg val) : Bool val Parameters \u00b6 that: ZipCMJpeg val Returns \u00b6 Bool val","title":"primitive ZipCMJpeg"},{"location":"ponyzip-ZipCMJpeg/#zipcmjpeg","text":"[Source] primitive val ZipCMJpeg","title":"ZipCMJpeg"},{"location":"ponyzip-ZipCMJpeg/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMJpeg/#create","text":"[Source] new val create() : ZipCMJpeg val^","title":"create"},{"location":"ponyzip-ZipCMJpeg/#returns","text":"ZipCMJpeg val^","title":"Returns"},{"location":"ponyzip-ZipCMJpeg/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMJpeg/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMJpeg/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMJpeg/#eq","text":"[Source] fun box eq( that: ZipCMJpeg val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMJpeg/#parameters","text":"that: ZipCMJpeg val","title":"Parameters"},{"location":"ponyzip-ZipCMJpeg/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMJpeg/#ne","text":"[Source] fun box ne( that: ZipCMJpeg val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMJpeg/#parameters_1","text":"that: ZipCMJpeg val","title":"Parameters"},{"location":"ponyzip-ZipCMJpeg/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLz77/","text":"ZipCMLz77 \u00b6 [Source] primitive val ZipCMLz77 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMLz77 val^ Returns \u00b6 ZipCMLz77 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMLz77 val) : Bool val Parameters \u00b6 that: ZipCMLz77 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMLz77 val) : Bool val Parameters \u00b6 that: ZipCMLz77 val Returns \u00b6 Bool val","title":"primitive ZipCMLz77"},{"location":"ponyzip-ZipCMLz77/#zipcmlz77","text":"[Source] primitive val ZipCMLz77","title":"ZipCMLz77"},{"location":"ponyzip-ZipCMLz77/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMLz77/#create","text":"[Source] new val create() : ZipCMLz77 val^","title":"create"},{"location":"ponyzip-ZipCMLz77/#returns","text":"ZipCMLz77 val^","title":"Returns"},{"location":"ponyzip-ZipCMLz77/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMLz77/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMLz77/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMLz77/#eq","text":"[Source] fun box eq( that: ZipCMLz77 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMLz77/#parameters","text":"that: ZipCMLz77 val","title":"Parameters"},{"location":"ponyzip-ZipCMLz77/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLz77/#ne","text":"[Source] fun box ne( that: ZipCMLz77 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMLz77/#parameters_1","text":"that: ZipCMLz77 val","title":"Parameters"},{"location":"ponyzip-ZipCMLz77/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLzma/","text":"ZipCMLzma \u00b6 [Source] primitive val ZipCMLzma Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMLzma val^ Returns \u00b6 ZipCMLzma val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMLzma val) : Bool val Parameters \u00b6 that: ZipCMLzma val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMLzma val) : Bool val Parameters \u00b6 that: ZipCMLzma val Returns \u00b6 Bool val","title":"primitive ZipCMLzma"},{"location":"ponyzip-ZipCMLzma/#zipcmlzma","text":"[Source] primitive val ZipCMLzma","title":"ZipCMLzma"},{"location":"ponyzip-ZipCMLzma/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMLzma/#create","text":"[Source] new val create() : ZipCMLzma val^","title":"create"},{"location":"ponyzip-ZipCMLzma/#returns","text":"ZipCMLzma val^","title":"Returns"},{"location":"ponyzip-ZipCMLzma/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMLzma/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMLzma/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMLzma/#eq","text":"[Source] fun box eq( that: ZipCMLzma val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMLzma/#parameters","text":"that: ZipCMLzma val","title":"Parameters"},{"location":"ponyzip-ZipCMLzma/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLzma/#ne","text":"[Source] fun box ne( that: ZipCMLzma val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMLzma/#parameters_1","text":"that: ZipCMLzma val","title":"Parameters"},{"location":"ponyzip-ZipCMLzma/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLzma2/","text":"ZipCMLzma2 \u00b6 [Source] primitive val ZipCMLzma2 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMLzma2 val^ Returns \u00b6 ZipCMLzma2 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMLzma2 val) : Bool val Parameters \u00b6 that: ZipCMLzma2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMLzma2 val) : Bool val Parameters \u00b6 that: ZipCMLzma2 val Returns \u00b6 Bool val","title":"primitive ZipCMLzma2"},{"location":"ponyzip-ZipCMLzma2/#zipcmlzma2","text":"[Source] primitive val ZipCMLzma2","title":"ZipCMLzma2"},{"location":"ponyzip-ZipCMLzma2/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMLzma2/#create","text":"[Source] new val create() : ZipCMLzma2 val^","title":"create"},{"location":"ponyzip-ZipCMLzma2/#returns","text":"ZipCMLzma2 val^","title":"Returns"},{"location":"ponyzip-ZipCMLzma2/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMLzma2/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMLzma2/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMLzma2/#eq","text":"[Source] fun box eq( that: ZipCMLzma2 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMLzma2/#parameters","text":"that: ZipCMLzma2 val","title":"Parameters"},{"location":"ponyzip-ZipCMLzma2/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMLzma2/#ne","text":"[Source] fun box ne( that: ZipCMLzma2 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMLzma2/#parameters_1","text":"that: ZipCMLzma2 val","title":"Parameters"},{"location":"ponyzip-ZipCMLzma2/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMPkwareimplode/","text":"ZipCMPkwareimplode \u00b6 [Source] primitive val ZipCMPkwareimplode Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMPkwareimplode val^ Returns \u00b6 ZipCMPkwareimplode val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMPkwareimplode val) : Bool val Parameters \u00b6 that: ZipCMPkwareimplode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMPkwareimplode val) : Bool val Parameters \u00b6 that: ZipCMPkwareimplode val Returns \u00b6 Bool val","title":"primitive ZipCMPkwareimplode"},{"location":"ponyzip-ZipCMPkwareimplode/#zipcmpkwareimplode","text":"[Source] primitive val ZipCMPkwareimplode","title":"ZipCMPkwareimplode"},{"location":"ponyzip-ZipCMPkwareimplode/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMPkwareimplode/#create","text":"[Source] new val create() : ZipCMPkwareimplode val^","title":"create"},{"location":"ponyzip-ZipCMPkwareimplode/#returns","text":"ZipCMPkwareimplode val^","title":"Returns"},{"location":"ponyzip-ZipCMPkwareimplode/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMPkwareimplode/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMPkwareimplode/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMPkwareimplode/#eq","text":"[Source] fun box eq( that: ZipCMPkwareimplode val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMPkwareimplode/#parameters","text":"that: ZipCMPkwareimplode val","title":"Parameters"},{"location":"ponyzip-ZipCMPkwareimplode/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMPkwareimplode/#ne","text":"[Source] fun box ne( that: ZipCMPkwareimplode val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMPkwareimplode/#parameters_1","text":"that: ZipCMPkwareimplode val","title":"Parameters"},{"location":"ponyzip-ZipCMPkwareimplode/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMPpmd/","text":"ZipCMPpmd \u00b6 [Source] primitive val ZipCMPpmd Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMPpmd val^ Returns \u00b6 ZipCMPpmd val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMPpmd val) : Bool val Parameters \u00b6 that: ZipCMPpmd val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMPpmd val) : Bool val Parameters \u00b6 that: ZipCMPpmd val Returns \u00b6 Bool val","title":"primitive ZipCMPpmd"},{"location":"ponyzip-ZipCMPpmd/#zipcmppmd","text":"[Source] primitive val ZipCMPpmd","title":"ZipCMPpmd"},{"location":"ponyzip-ZipCMPpmd/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMPpmd/#create","text":"[Source] new val create() : ZipCMPpmd val^","title":"create"},{"location":"ponyzip-ZipCMPpmd/#returns","text":"ZipCMPpmd val^","title":"Returns"},{"location":"ponyzip-ZipCMPpmd/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMPpmd/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMPpmd/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMPpmd/#eq","text":"[Source] fun box eq( that: ZipCMPpmd val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMPpmd/#parameters","text":"that: ZipCMPpmd val","title":"Parameters"},{"location":"ponyzip-ZipCMPpmd/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMPpmd/#ne","text":"[Source] fun box ne( that: ZipCMPpmd val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMPpmd/#parameters_1","text":"that: ZipCMPpmd val","title":"Parameters"},{"location":"ponyzip-ZipCMPpmd/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce1/","text":"ZipCMReduce1 \u00b6 [Source] primitive val ZipCMReduce1 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMReduce1 val^ Returns \u00b6 ZipCMReduce1 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMReduce1 val) : Bool val Parameters \u00b6 that: ZipCMReduce1 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMReduce1 val) : Bool val Parameters \u00b6 that: ZipCMReduce1 val Returns \u00b6 Bool val","title":"primitive ZipCMReduce1"},{"location":"ponyzip-ZipCMReduce1/#zipcmreduce1","text":"[Source] primitive val ZipCMReduce1","title":"ZipCMReduce1"},{"location":"ponyzip-ZipCMReduce1/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMReduce1/#create","text":"[Source] new val create() : ZipCMReduce1 val^","title":"create"},{"location":"ponyzip-ZipCMReduce1/#returns","text":"ZipCMReduce1 val^","title":"Returns"},{"location":"ponyzip-ZipCMReduce1/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMReduce1/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMReduce1/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMReduce1/#eq","text":"[Source] fun box eq( that: ZipCMReduce1 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMReduce1/#parameters","text":"that: ZipCMReduce1 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce1/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce1/#ne","text":"[Source] fun box ne( that: ZipCMReduce1 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMReduce1/#parameters_1","text":"that: ZipCMReduce1 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce1/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce2/","text":"ZipCMReduce2 \u00b6 [Source] primitive val ZipCMReduce2 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMReduce2 val^ Returns \u00b6 ZipCMReduce2 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMReduce2 val) : Bool val Parameters \u00b6 that: ZipCMReduce2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMReduce2 val) : Bool val Parameters \u00b6 that: ZipCMReduce2 val Returns \u00b6 Bool val","title":"primitive ZipCMReduce2"},{"location":"ponyzip-ZipCMReduce2/#zipcmreduce2","text":"[Source] primitive val ZipCMReduce2","title":"ZipCMReduce2"},{"location":"ponyzip-ZipCMReduce2/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMReduce2/#create","text":"[Source] new val create() : ZipCMReduce2 val^","title":"create"},{"location":"ponyzip-ZipCMReduce2/#returns","text":"ZipCMReduce2 val^","title":"Returns"},{"location":"ponyzip-ZipCMReduce2/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMReduce2/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMReduce2/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMReduce2/#eq","text":"[Source] fun box eq( that: ZipCMReduce2 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMReduce2/#parameters","text":"that: ZipCMReduce2 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce2/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce2/#ne","text":"[Source] fun box ne( that: ZipCMReduce2 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMReduce2/#parameters_1","text":"that: ZipCMReduce2 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce2/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce3/","text":"ZipCMReduce3 \u00b6 [Source] primitive val ZipCMReduce3 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMReduce3 val^ Returns \u00b6 ZipCMReduce3 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMReduce3 val) : Bool val Parameters \u00b6 that: ZipCMReduce3 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMReduce3 val) : Bool val Parameters \u00b6 that: ZipCMReduce3 val Returns \u00b6 Bool val","title":"primitive ZipCMReduce3"},{"location":"ponyzip-ZipCMReduce3/#zipcmreduce3","text":"[Source] primitive val ZipCMReduce3","title":"ZipCMReduce3"},{"location":"ponyzip-ZipCMReduce3/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMReduce3/#create","text":"[Source] new val create() : ZipCMReduce3 val^","title":"create"},{"location":"ponyzip-ZipCMReduce3/#returns","text":"ZipCMReduce3 val^","title":"Returns"},{"location":"ponyzip-ZipCMReduce3/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMReduce3/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMReduce3/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMReduce3/#eq","text":"[Source] fun box eq( that: ZipCMReduce3 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMReduce3/#parameters","text":"that: ZipCMReduce3 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce3/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce3/#ne","text":"[Source] fun box ne( that: ZipCMReduce3 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMReduce3/#parameters_1","text":"that: ZipCMReduce3 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce3/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce4/","text":"ZipCMReduce4 \u00b6 [Source] primitive val ZipCMReduce4 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMReduce4 val^ Returns \u00b6 ZipCMReduce4 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMReduce4 val) : Bool val Parameters \u00b6 that: ZipCMReduce4 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMReduce4 val) : Bool val Parameters \u00b6 that: ZipCMReduce4 val Returns \u00b6 Bool val","title":"primitive ZipCMReduce4"},{"location":"ponyzip-ZipCMReduce4/#zipcmreduce4","text":"[Source] primitive val ZipCMReduce4","title":"ZipCMReduce4"},{"location":"ponyzip-ZipCMReduce4/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMReduce4/#create","text":"[Source] new val create() : ZipCMReduce4 val^","title":"create"},{"location":"ponyzip-ZipCMReduce4/#returns","text":"ZipCMReduce4 val^","title":"Returns"},{"location":"ponyzip-ZipCMReduce4/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMReduce4/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMReduce4/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMReduce4/#eq","text":"[Source] fun box eq( that: ZipCMReduce4 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMReduce4/#parameters","text":"that: ZipCMReduce4 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce4/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMReduce4/#ne","text":"[Source] fun box ne( that: ZipCMReduce4 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMReduce4/#parameters_1","text":"that: ZipCMReduce4 val","title":"Parameters"},{"location":"ponyzip-ZipCMReduce4/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMShrink/","text":"ZipCMShrink \u00b6 [Source] primitive val ZipCMShrink Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMShrink val^ Returns \u00b6 ZipCMShrink val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMShrink val) : Bool val Parameters \u00b6 that: ZipCMShrink val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMShrink val) : Bool val Parameters \u00b6 that: ZipCMShrink val Returns \u00b6 Bool val","title":"primitive ZipCMShrink"},{"location":"ponyzip-ZipCMShrink/#zipcmshrink","text":"[Source] primitive val ZipCMShrink","title":"ZipCMShrink"},{"location":"ponyzip-ZipCMShrink/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMShrink/#create","text":"[Source] new val create() : ZipCMShrink val^","title":"create"},{"location":"ponyzip-ZipCMShrink/#returns","text":"ZipCMShrink val^","title":"Returns"},{"location":"ponyzip-ZipCMShrink/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMShrink/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMShrink/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMShrink/#eq","text":"[Source] fun box eq( that: ZipCMShrink val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMShrink/#parameters","text":"that: ZipCMShrink val","title":"Parameters"},{"location":"ponyzip-ZipCMShrink/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMShrink/#ne","text":"[Source] fun box ne( that: ZipCMShrink val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMShrink/#parameters_1","text":"that: ZipCMShrink val","title":"Parameters"},{"location":"ponyzip-ZipCMShrink/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMStore/","text":"ZipCMStore \u00b6 [Source] primitive val ZipCMStore Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMStore val^ Returns \u00b6 ZipCMStore val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMStore val) : Bool val Parameters \u00b6 that: ZipCMStore val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMStore val) : Bool val Parameters \u00b6 that: ZipCMStore val Returns \u00b6 Bool val","title":"primitive ZipCMStore"},{"location":"ponyzip-ZipCMStore/#zipcmstore","text":"[Source] primitive val ZipCMStore","title":"ZipCMStore"},{"location":"ponyzip-ZipCMStore/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMStore/#create","text":"[Source] new val create() : ZipCMStore val^","title":"create"},{"location":"ponyzip-ZipCMStore/#returns","text":"ZipCMStore val^","title":"Returns"},{"location":"ponyzip-ZipCMStore/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMStore/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMStore/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMStore/#eq","text":"[Source] fun box eq( that: ZipCMStore val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMStore/#parameters","text":"that: ZipCMStore val","title":"Parameters"},{"location":"ponyzip-ZipCMStore/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMStore/#ne","text":"[Source] fun box ne( that: ZipCMStore val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMStore/#parameters_1","text":"that: ZipCMStore val","title":"Parameters"},{"location":"ponyzip-ZipCMStore/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMTerse/","text":"ZipCMTerse \u00b6 [Source] primitive val ZipCMTerse Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMTerse val^ Returns \u00b6 ZipCMTerse val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMTerse val) : Bool val Parameters \u00b6 that: ZipCMTerse val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMTerse val) : Bool val Parameters \u00b6 that: ZipCMTerse val Returns \u00b6 Bool val","title":"primitive ZipCMTerse"},{"location":"ponyzip-ZipCMTerse/#zipcmterse","text":"[Source] primitive val ZipCMTerse","title":"ZipCMTerse"},{"location":"ponyzip-ZipCMTerse/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMTerse/#create","text":"[Source] new val create() : ZipCMTerse val^","title":"create"},{"location":"ponyzip-ZipCMTerse/#returns","text":"ZipCMTerse val^","title":"Returns"},{"location":"ponyzip-ZipCMTerse/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMTerse/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMTerse/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMTerse/#eq","text":"[Source] fun box eq( that: ZipCMTerse val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMTerse/#parameters","text":"that: ZipCMTerse val","title":"Parameters"},{"location":"ponyzip-ZipCMTerse/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMTerse/#ne","text":"[Source] fun box ne( that: ZipCMTerse val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMTerse/#parameters_1","text":"that: ZipCMTerse val","title":"Parameters"},{"location":"ponyzip-ZipCMTerse/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMWavpack/","text":"ZipCMWavpack \u00b6 [Source] primitive val ZipCMWavpack Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMWavpack val^ Returns \u00b6 ZipCMWavpack val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMWavpack val) : Bool val Parameters \u00b6 that: ZipCMWavpack val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMWavpack val) : Bool val Parameters \u00b6 that: ZipCMWavpack val Returns \u00b6 Bool val","title":"primitive ZipCMWavpack"},{"location":"ponyzip-ZipCMWavpack/#zipcmwavpack","text":"[Source] primitive val ZipCMWavpack","title":"ZipCMWavpack"},{"location":"ponyzip-ZipCMWavpack/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMWavpack/#create","text":"[Source] new val create() : ZipCMWavpack val^","title":"create"},{"location":"ponyzip-ZipCMWavpack/#returns","text":"ZipCMWavpack val^","title":"Returns"},{"location":"ponyzip-ZipCMWavpack/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMWavpack/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMWavpack/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMWavpack/#eq","text":"[Source] fun box eq( that: ZipCMWavpack val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMWavpack/#parameters","text":"that: ZipCMWavpack val","title":"Parameters"},{"location":"ponyzip-ZipCMWavpack/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMWavpack/#ne","text":"[Source] fun box ne( that: ZipCMWavpack val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMWavpack/#parameters_1","text":"that: ZipCMWavpack val","title":"Parameters"},{"location":"ponyzip-ZipCMWavpack/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMxz/","text":"ZipCMxz \u00b6 [Source] primitive val ZipCMxz Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCMxz val^ Returns \u00b6 ZipCMxz val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCMxz val) : Bool val Parameters \u00b6 that: ZipCMxz val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCMxz val) : Bool val Parameters \u00b6 that: ZipCMxz val Returns \u00b6 Bool val","title":"primitive ZipCMxz"},{"location":"ponyzip-ZipCMxz/#zipcmxz","text":"[Source] primitive val ZipCMxz","title":"ZipCMxz"},{"location":"ponyzip-ZipCMxz/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCMxz/#create","text":"[Source] new val create() : ZipCMxz val^","title":"create"},{"location":"ponyzip-ZipCMxz/#returns","text":"ZipCMxz val^","title":"Returns"},{"location":"ponyzip-ZipCMxz/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCMxz/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCMxz/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCMxz/#eq","text":"[Source] fun box eq( that: ZipCMxz val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCMxz/#parameters","text":"that: ZipCMxz val","title":"Parameters"},{"location":"ponyzip-ZipCMxz/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCMxz/#ne","text":"[Source] fun box ne( that: ZipCMxz val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCMxz/#parameters_1","text":"that: ZipCMxz val","title":"Parameters"},{"location":"ponyzip-ZipCMxz/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCheckcons/","text":"ZipCheckcons \u00b6 [Source] primitive val ZipCheckcons Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCheckcons val^ Returns \u00b6 ZipCheckcons val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCheckcons val) : Bool val Parameters \u00b6 that: ZipCheckcons val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCheckcons val) : Bool val Parameters \u00b6 that: ZipCheckcons val Returns \u00b6 Bool val","title":"primitive ZipCheckcons"},{"location":"ponyzip-ZipCheckcons/#zipcheckcons","text":"[Source] primitive val ZipCheckcons","title":"ZipCheckcons"},{"location":"ponyzip-ZipCheckcons/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCheckcons/#create","text":"[Source] new val create() : ZipCheckcons val^","title":"create"},{"location":"ponyzip-ZipCheckcons/#returns","text":"ZipCheckcons val^","title":"Returns"},{"location":"ponyzip-ZipCheckcons/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCheckcons/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCheckcons/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCheckcons/#eq","text":"[Source] fun box eq( that: ZipCheckcons val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCheckcons/#parameters","text":"that: ZipCheckcons val","title":"Parameters"},{"location":"ponyzip-ZipCheckcons/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCheckcons/#ne","text":"[Source] fun box ne( that: ZipCheckcons val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCheckcons/#parameters_1","text":"that: ZipCheckcons val","title":"Parameters"},{"location":"ponyzip-ZipCheckcons/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCreate/","text":"ZipCreate \u00b6 [Source] primitive val ZipCreate Constructors \u00b6 create \u00b6 [Source] new val create() : ZipCreate val^ Returns \u00b6 ZipCreate val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipCreate val) : Bool val Parameters \u00b6 that: ZipCreate val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipCreate val) : Bool val Parameters \u00b6 that: ZipCreate val Returns \u00b6 Bool val","title":"primitive ZipCreate"},{"location":"ponyzip-ZipCreate/#zipcreate","text":"[Source] primitive val ZipCreate","title":"ZipCreate"},{"location":"ponyzip-ZipCreate/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipCreate/#create","text":"[Source] new val create() : ZipCreate val^","title":"create"},{"location":"ponyzip-ZipCreate/#returns","text":"ZipCreate val^","title":"Returns"},{"location":"ponyzip-ZipCreate/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipCreate/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipCreate/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipCreate/#eq","text":"[Source] fun box eq( that: ZipCreate val) : Bool val","title":"eq"},{"location":"ponyzip-ZipCreate/#parameters","text":"that: ZipCreate val","title":"Parameters"},{"location":"ponyzip-ZipCreate/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipCreate/#ne","text":"[Source] fun box ne( that: ZipCreate val) : Bool val","title":"ne"},{"location":"ponyzip-ZipCreate/#parameters_1","text":"that: ZipCreate val","title":"Parameters"},{"location":"ponyzip-ZipCreate/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEM3des112/","text":"ZipEM3des112 \u00b6 [Source] primitive val ZipEM3des112 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEM3des112 val^ Returns \u00b6 ZipEM3des112 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEM3des112 val) : Bool val Parameters \u00b6 that: ZipEM3des112 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEM3des112 val) : Bool val Parameters \u00b6 that: ZipEM3des112 val Returns \u00b6 Bool val","title":"primitive ZipEM3des112"},{"location":"ponyzip-ZipEM3des112/#zipem3des112","text":"[Source] primitive val ZipEM3des112","title":"ZipEM3des112"},{"location":"ponyzip-ZipEM3des112/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEM3des112/#create","text":"[Source] new val create() : ZipEM3des112 val^","title":"create"},{"location":"ponyzip-ZipEM3des112/#returns","text":"ZipEM3des112 val^","title":"Returns"},{"location":"ponyzip-ZipEM3des112/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEM3des112/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEM3des112/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEM3des112/#eq","text":"[Source] fun box eq( that: ZipEM3des112 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEM3des112/#parameters","text":"that: ZipEM3des112 val","title":"Parameters"},{"location":"ponyzip-ZipEM3des112/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEM3des112/#ne","text":"[Source] fun box ne( that: ZipEM3des112 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEM3des112/#parameters_1","text":"that: ZipEM3des112 val","title":"Parameters"},{"location":"ponyzip-ZipEM3des112/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEM3des168/","text":"ZipEM3des168 \u00b6 [Source] primitive val ZipEM3des168 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEM3des168 val^ Returns \u00b6 ZipEM3des168 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEM3des168 val) : Bool val Parameters \u00b6 that: ZipEM3des168 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEM3des168 val) : Bool val Parameters \u00b6 that: ZipEM3des168 val Returns \u00b6 Bool val","title":"primitive ZipEM3des168"},{"location":"ponyzip-ZipEM3des168/#zipem3des168","text":"[Source] primitive val ZipEM3des168","title":"ZipEM3des168"},{"location":"ponyzip-ZipEM3des168/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEM3des168/#create","text":"[Source] new val create() : ZipEM3des168 val^","title":"create"},{"location":"ponyzip-ZipEM3des168/#returns","text":"ZipEM3des168 val^","title":"Returns"},{"location":"ponyzip-ZipEM3des168/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEM3des168/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEM3des168/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEM3des168/#eq","text":"[Source] fun box eq( that: ZipEM3des168 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEM3des168/#parameters","text":"that: ZipEM3des168 val","title":"Parameters"},{"location":"ponyzip-ZipEM3des168/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEM3des168/#ne","text":"[Source] fun box ne( that: ZipEM3des168 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEM3des168/#parameters_1","text":"that: ZipEM3des168 val","title":"Parameters"},{"location":"ponyzip-ZipEM3des168/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes128/","text":"ZipEMAes128 \u00b6 [Source] primitive val ZipEMAes128 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMAes128 val^ Returns \u00b6 ZipEMAes128 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMAes128 val) : Bool val Parameters \u00b6 that: ZipEMAes128 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMAes128 val) : Bool val Parameters \u00b6 that: ZipEMAes128 val Returns \u00b6 Bool val","title":"primitive ZipEMAes128"},{"location":"ponyzip-ZipEMAes128/#zipemaes128","text":"[Source] primitive val ZipEMAes128","title":"ZipEMAes128"},{"location":"ponyzip-ZipEMAes128/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMAes128/#create","text":"[Source] new val create() : ZipEMAes128 val^","title":"create"},{"location":"ponyzip-ZipEMAes128/#returns","text":"ZipEMAes128 val^","title":"Returns"},{"location":"ponyzip-ZipEMAes128/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMAes128/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMAes128/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMAes128/#eq","text":"[Source] fun box eq( that: ZipEMAes128 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMAes128/#parameters","text":"that: ZipEMAes128 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes128/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes128/#ne","text":"[Source] fun box ne( that: ZipEMAes128 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMAes128/#parameters_1","text":"that: ZipEMAes128 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes128/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes192/","text":"ZipEMAes192 \u00b6 [Source] primitive val ZipEMAes192 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMAes192 val^ Returns \u00b6 ZipEMAes192 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMAes192 val) : Bool val Parameters \u00b6 that: ZipEMAes192 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMAes192 val) : Bool val Parameters \u00b6 that: ZipEMAes192 val Returns \u00b6 Bool val","title":"primitive ZipEMAes192"},{"location":"ponyzip-ZipEMAes192/#zipemaes192","text":"[Source] primitive val ZipEMAes192","title":"ZipEMAes192"},{"location":"ponyzip-ZipEMAes192/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMAes192/#create","text":"[Source] new val create() : ZipEMAes192 val^","title":"create"},{"location":"ponyzip-ZipEMAes192/#returns","text":"ZipEMAes192 val^","title":"Returns"},{"location":"ponyzip-ZipEMAes192/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMAes192/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMAes192/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMAes192/#eq","text":"[Source] fun box eq( that: ZipEMAes192 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMAes192/#parameters","text":"that: ZipEMAes192 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes192/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes192/#ne","text":"[Source] fun box ne( that: ZipEMAes192 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMAes192/#parameters_1","text":"that: ZipEMAes192 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes192/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes256/","text":"ZipEMAes256 \u00b6 [Source] primitive val ZipEMAes256 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMAes256 val^ Returns \u00b6 ZipEMAes256 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMAes256 val) : Bool val Parameters \u00b6 that: ZipEMAes256 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMAes256 val) : Bool val Parameters \u00b6 that: ZipEMAes256 val Returns \u00b6 Bool val","title":"primitive ZipEMAes256"},{"location":"ponyzip-ZipEMAes256/#zipemaes256","text":"[Source] primitive val ZipEMAes256","title":"ZipEMAes256"},{"location":"ponyzip-ZipEMAes256/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMAes256/#create","text":"[Source] new val create() : ZipEMAes256 val^","title":"create"},{"location":"ponyzip-ZipEMAes256/#returns","text":"ZipEMAes256 val^","title":"Returns"},{"location":"ponyzip-ZipEMAes256/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMAes256/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMAes256/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMAes256/#eq","text":"[Source] fun box eq( that: ZipEMAes256 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMAes256/#parameters","text":"that: ZipEMAes256 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes256/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMAes256/#ne","text":"[Source] fun box ne( that: ZipEMAes256 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMAes256/#parameters_1","text":"that: ZipEMAes256 val","title":"Parameters"},{"location":"ponyzip-ZipEMAes256/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMDes/","text":"ZipEMDes \u00b6 [Source] primitive val ZipEMDes Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMDes val^ Returns \u00b6 ZipEMDes val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMDes val) : Bool val Parameters \u00b6 that: ZipEMDes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMDes val) : Bool val Parameters \u00b6 that: ZipEMDes val Returns \u00b6 Bool val","title":"primitive ZipEMDes"},{"location":"ponyzip-ZipEMDes/#zipemdes","text":"[Source] primitive val ZipEMDes","title":"ZipEMDes"},{"location":"ponyzip-ZipEMDes/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMDes/#create","text":"[Source] new val create() : ZipEMDes val^","title":"create"},{"location":"ponyzip-ZipEMDes/#returns","text":"ZipEMDes val^","title":"Returns"},{"location":"ponyzip-ZipEMDes/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMDes/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMDes/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMDes/#eq","text":"[Source] fun box eq( that: ZipEMDes val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMDes/#parameters","text":"that: ZipEMDes val","title":"Parameters"},{"location":"ponyzip-ZipEMDes/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMDes/#ne","text":"[Source] fun box ne( that: ZipEMDes val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMDes/#parameters_1","text":"that: ZipEMDes val","title":"Parameters"},{"location":"ponyzip-ZipEMDes/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMNone/","text":"ZipEMNone \u00b6 [Source] primitive val ZipEMNone Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMNone val^ Returns \u00b6 ZipEMNone val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMNone val) : Bool val Parameters \u00b6 that: ZipEMNone val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMNone val) : Bool val Parameters \u00b6 that: ZipEMNone val Returns \u00b6 Bool val","title":"primitive ZipEMNone"},{"location":"ponyzip-ZipEMNone/#zipemnone","text":"[Source] primitive val ZipEMNone","title":"ZipEMNone"},{"location":"ponyzip-ZipEMNone/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMNone/#create","text":"[Source] new val create() : ZipEMNone val^","title":"create"},{"location":"ponyzip-ZipEMNone/#returns","text":"ZipEMNone val^","title":"Returns"},{"location":"ponyzip-ZipEMNone/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMNone/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMNone/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMNone/#eq","text":"[Source] fun box eq( that: ZipEMNone val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMNone/#parameters","text":"that: ZipEMNone val","title":"Parameters"},{"location":"ponyzip-ZipEMNone/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMNone/#ne","text":"[Source] fun box ne( that: ZipEMNone val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMNone/#parameters_1","text":"that: ZipEMNone val","title":"Parameters"},{"location":"ponyzip-ZipEMNone/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes128/","text":"ZipEMPkzipaes128 \u00b6 [Source] primitive val ZipEMPkzipaes128 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMPkzipaes128 val^ Returns \u00b6 ZipEMPkzipaes128 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMPkzipaes128 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes128 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMPkzipaes128 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes128 val Returns \u00b6 Bool val","title":"primitive ZipEMPkzipaes128"},{"location":"ponyzip-ZipEMPkzipaes128/#zipempkzipaes128","text":"[Source] primitive val ZipEMPkzipaes128","title":"ZipEMPkzipaes128"},{"location":"ponyzip-ZipEMPkzipaes128/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMPkzipaes128/#create","text":"[Source] new val create() : ZipEMPkzipaes128 val^","title":"create"},{"location":"ponyzip-ZipEMPkzipaes128/#returns","text":"ZipEMPkzipaes128 val^","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes128/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMPkzipaes128/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMPkzipaes128/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes128/#eq","text":"[Source] fun box eq( that: ZipEMPkzipaes128 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMPkzipaes128/#parameters","text":"that: ZipEMPkzipaes128 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes128/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes128/#ne","text":"[Source] fun box ne( that: ZipEMPkzipaes128 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMPkzipaes128/#parameters_1","text":"that: ZipEMPkzipaes128 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes128/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes192/","text":"ZipEMPkzipaes192 \u00b6 [Source] primitive val ZipEMPkzipaes192 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMPkzipaes192 val^ Returns \u00b6 ZipEMPkzipaes192 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMPkzipaes192 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes192 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMPkzipaes192 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes192 val Returns \u00b6 Bool val","title":"primitive ZipEMPkzipaes192"},{"location":"ponyzip-ZipEMPkzipaes192/#zipempkzipaes192","text":"[Source] primitive val ZipEMPkzipaes192","title":"ZipEMPkzipaes192"},{"location":"ponyzip-ZipEMPkzipaes192/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMPkzipaes192/#create","text":"[Source] new val create() : ZipEMPkzipaes192 val^","title":"create"},{"location":"ponyzip-ZipEMPkzipaes192/#returns","text":"ZipEMPkzipaes192 val^","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes192/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMPkzipaes192/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMPkzipaes192/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes192/#eq","text":"[Source] fun box eq( that: ZipEMPkzipaes192 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMPkzipaes192/#parameters","text":"that: ZipEMPkzipaes192 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes192/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes192/#ne","text":"[Source] fun box ne( that: ZipEMPkzipaes192 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMPkzipaes192/#parameters_1","text":"that: ZipEMPkzipaes192 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes192/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes256/","text":"ZipEMPkzipaes256 \u00b6 [Source] primitive val ZipEMPkzipaes256 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMPkzipaes256 val^ Returns \u00b6 ZipEMPkzipaes256 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMPkzipaes256 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes256 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMPkzipaes256 val) : Bool val Parameters \u00b6 that: ZipEMPkzipaes256 val Returns \u00b6 Bool val","title":"primitive ZipEMPkzipaes256"},{"location":"ponyzip-ZipEMPkzipaes256/#zipempkzipaes256","text":"[Source] primitive val ZipEMPkzipaes256","title":"ZipEMPkzipaes256"},{"location":"ponyzip-ZipEMPkzipaes256/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMPkzipaes256/#create","text":"[Source] new val create() : ZipEMPkzipaes256 val^","title":"create"},{"location":"ponyzip-ZipEMPkzipaes256/#returns","text":"ZipEMPkzipaes256 val^","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes256/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMPkzipaes256/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMPkzipaes256/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes256/#eq","text":"[Source] fun box eq( that: ZipEMPkzipaes256 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMPkzipaes256/#parameters","text":"that: ZipEMPkzipaes256 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes256/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMPkzipaes256/#ne","text":"[Source] fun box ne( that: ZipEMPkzipaes256 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMPkzipaes256/#parameters_1","text":"that: ZipEMPkzipaes256 val","title":"Parameters"},{"location":"ponyzip-ZipEMPkzipaes256/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc2/","text":"ZipEMRc2 \u00b6 [Source] primitive val ZipEMRc2 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMRc2 val^ Returns \u00b6 ZipEMRc2 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMRc2 val) : Bool val Parameters \u00b6 that: ZipEMRc2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMRc2 val) : Bool val Parameters \u00b6 that: ZipEMRc2 val Returns \u00b6 Bool val","title":"primitive ZipEMRc2"},{"location":"ponyzip-ZipEMRc2/#zipemrc2","text":"[Source] primitive val ZipEMRc2","title":"ZipEMRc2"},{"location":"ponyzip-ZipEMRc2/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMRc2/#create","text":"[Source] new val create() : ZipEMRc2 val^","title":"create"},{"location":"ponyzip-ZipEMRc2/#returns","text":"ZipEMRc2 val^","title":"Returns"},{"location":"ponyzip-ZipEMRc2/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMRc2/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMRc2/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMRc2/#eq","text":"[Source] fun box eq( that: ZipEMRc2 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMRc2/#parameters","text":"that: ZipEMRc2 val","title":"Parameters"},{"location":"ponyzip-ZipEMRc2/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc2/#ne","text":"[Source] fun box ne( that: ZipEMRc2 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMRc2/#parameters_1","text":"that: ZipEMRc2 val","title":"Parameters"},{"location":"ponyzip-ZipEMRc2/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc2old/","text":"ZipEMRc2old \u00b6 [Source] primitive val ZipEMRc2old Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMRc2old val^ Returns \u00b6 ZipEMRc2old val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMRc2old val) : Bool val Parameters \u00b6 that: ZipEMRc2old val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMRc2old val) : Bool val Parameters \u00b6 that: ZipEMRc2old val Returns \u00b6 Bool val","title":"primitive ZipEMRc2old"},{"location":"ponyzip-ZipEMRc2old/#zipemrc2old","text":"[Source] primitive val ZipEMRc2old","title":"ZipEMRc2old"},{"location":"ponyzip-ZipEMRc2old/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMRc2old/#create","text":"[Source] new val create() : ZipEMRc2old val^","title":"create"},{"location":"ponyzip-ZipEMRc2old/#returns","text":"ZipEMRc2old val^","title":"Returns"},{"location":"ponyzip-ZipEMRc2old/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMRc2old/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMRc2old/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMRc2old/#eq","text":"[Source] fun box eq( that: ZipEMRc2old val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMRc2old/#parameters","text":"that: ZipEMRc2old val","title":"Parameters"},{"location":"ponyzip-ZipEMRc2old/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc2old/#ne","text":"[Source] fun box ne( that: ZipEMRc2old val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMRc2old/#parameters_1","text":"that: ZipEMRc2old val","title":"Parameters"},{"location":"ponyzip-ZipEMRc2old/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc4/","text":"ZipEMRc4 \u00b6 [Source] primitive val ZipEMRc4 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMRc4 val^ Returns \u00b6 ZipEMRc4 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMRc4 val) : Bool val Parameters \u00b6 that: ZipEMRc4 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMRc4 val) : Bool val Parameters \u00b6 that: ZipEMRc4 val Returns \u00b6 Bool val","title":"primitive ZipEMRc4"},{"location":"ponyzip-ZipEMRc4/#zipemrc4","text":"[Source] primitive val ZipEMRc4","title":"ZipEMRc4"},{"location":"ponyzip-ZipEMRc4/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMRc4/#create","text":"[Source] new val create() : ZipEMRc4 val^","title":"create"},{"location":"ponyzip-ZipEMRc4/#returns","text":"ZipEMRc4 val^","title":"Returns"},{"location":"ponyzip-ZipEMRc4/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMRc4/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMRc4/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMRc4/#eq","text":"[Source] fun box eq( that: ZipEMRc4 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMRc4/#parameters","text":"that: ZipEMRc4 val","title":"Parameters"},{"location":"ponyzip-ZipEMRc4/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMRc4/#ne","text":"[Source] fun box ne( that: ZipEMRc4 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMRc4/#parameters_1","text":"that: ZipEMRc4 val","title":"Parameters"},{"location":"ponyzip-ZipEMRc4/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMTradpkware/","text":"ZipEMTradpkware \u00b6 [Source] primitive val ZipEMTradpkware Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMTradpkware val^ Returns \u00b6 ZipEMTradpkware val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMTradpkware val) : Bool val Parameters \u00b6 that: ZipEMTradpkware val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMTradpkware val) : Bool val Parameters \u00b6 that: ZipEMTradpkware val Returns \u00b6 Bool val","title":"primitive ZipEMTradpkware"},{"location":"ponyzip-ZipEMTradpkware/#zipemtradpkware","text":"[Source] primitive val ZipEMTradpkware","title":"ZipEMTradpkware"},{"location":"ponyzip-ZipEMTradpkware/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMTradpkware/#create","text":"[Source] new val create() : ZipEMTradpkware val^","title":"create"},{"location":"ponyzip-ZipEMTradpkware/#returns","text":"ZipEMTradpkware val^","title":"Returns"},{"location":"ponyzip-ZipEMTradpkware/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMTradpkware/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMTradpkware/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMTradpkware/#eq","text":"[Source] fun box eq( that: ZipEMTradpkware val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMTradpkware/#parameters","text":"that: ZipEMTradpkware val","title":"Parameters"},{"location":"ponyzip-ZipEMTradpkware/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMTradpkware/#ne","text":"[Source] fun box ne( that: ZipEMTradpkware val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMTradpkware/#parameters_1","text":"that: ZipEMTradpkware val","title":"Parameters"},{"location":"ponyzip-ZipEMTradpkware/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMType/","text":"ZipEMType \u00b6 [Source] type ZipEMType is (ZipEMNone val | ZipEMTradpkware val | ZipEMDes val | ZipEMRc2old val | ZipEM3des168 val | ZipEM3des112 val | ZipEMPkzipaes128 val | ZipEMPkzipaes192 val | ZipEMPkzipaes256 val | ZipEMRc2 val | ZipEMRc4 val | ZipEMAes128 val | ZipEMAes192 val | ZipEMAes256 val | ZipEMUnknown val) Type Alias For \u00b6 ( ZipEMNone val | ZipEMTradpkware val | ZipEMDes val | ZipEMRc2old val | ZipEM3des168 val | ZipEM3des112 val | ZipEMPkzipaes128 val | ZipEMPkzipaes192 val | ZipEMPkzipaes256 val | ZipEMRc2 val | ZipEMRc4 val | ZipEMAes128 val | ZipEMAes192 val | ZipEMAes256 val | ZipEMUnknown val)","title":"type ZipEMType"},{"location":"ponyzip-ZipEMType/#zipemtype","text":"[Source] type ZipEMType is (ZipEMNone val | ZipEMTradpkware val | ZipEMDes val | ZipEMRc2old val | ZipEM3des168 val | ZipEM3des112 val | ZipEMPkzipaes128 val | ZipEMPkzipaes192 val | ZipEMPkzipaes256 val | ZipEMRc2 val | ZipEMRc4 val | ZipEMAes128 val | ZipEMAes192 val | ZipEMAes256 val | ZipEMUnknown val)","title":"ZipEMType"},{"location":"ponyzip-ZipEMType/#type-alias-for","text":"( ZipEMNone val | ZipEMTradpkware val | ZipEMDes val | ZipEMRc2old val | ZipEM3des168 val | ZipEM3des112 val | ZipEMPkzipaes128 val | ZipEMPkzipaes192 val | ZipEMPkzipaes256 val | ZipEMRc2 val | ZipEMRc4 val | ZipEMAes128 val | ZipEMAes192 val | ZipEMAes256 val | ZipEMUnknown val)","title":"Type Alias For"},{"location":"ponyzip-ZipEMUnknown/","text":"ZipEMUnknown \u00b6 [Source] primitive val ZipEMUnknown Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEMUnknown val^ Returns \u00b6 ZipEMUnknown val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipEMUnknown val) : Bool val Parameters \u00b6 that: ZipEMUnknown val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEMUnknown val) : Bool val Parameters \u00b6 that: ZipEMUnknown val Returns \u00b6 Bool val","title":"primitive ZipEMUnknown"},{"location":"ponyzip-ZipEMUnknown/#zipemunknown","text":"[Source] primitive val ZipEMUnknown","title":"ZipEMUnknown"},{"location":"ponyzip-ZipEMUnknown/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEMUnknown/#create","text":"[Source] new val create() : ZipEMUnknown val^","title":"create"},{"location":"ponyzip-ZipEMUnknown/#returns","text":"ZipEMUnknown val^","title":"Returns"},{"location":"ponyzip-ZipEMUnknown/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEMUnknown/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipEMUnknown/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipEMUnknown/#eq","text":"[Source] fun box eq( that: ZipEMUnknown val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEMUnknown/#parameters","text":"that: ZipEMUnknown val","title":"Parameters"},{"location":"ponyzip-ZipEMUnknown/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEMUnknown/#ne","text":"[Source] fun box ne( that: ZipEMUnknown val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEMUnknown/#parameters_1","text":"that: ZipEMUnknown val","title":"Parameters"},{"location":"ponyzip-ZipEMUnknown/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipER/","text":"ZipER \u00b6 [Source] type ZipER is (ZipEROK val | ZipERMultidisk val | ZipERRename val | ZipERClose val | ZipERSeek val | ZipERRead val | ZipERWrite val | ZipERCRC val | ZipERZipclosed val | ZipERNoent val | ZipERExists val | ZipEROpen val | ZipERTmpopen val | ZipERZlib val | ZipERMemory val | ZipERChanged val | ZipERCompnotsupp val | ZipEREof val | ZipERInval val | ZipERNozip val | ZipERInternal val | ZipERIncons val | ZipERRemove val | ZipERDeleted val | ZipEREncrnotsupp val | ZipERRDOnly val | ZipERNopasswd val | ZipERWrongpasswd val | ZipEROpnotsupp val | ZipERInuse val | ZipERTell val | ZipERCompresseddata val | ZipERCancelled val) Type Alias For \u00b6 ( ZipEROK val | ZipERMultidisk val | ZipERRename val | ZipERClose val | ZipERSeek val | ZipERRead val | ZipERWrite val | ZipERCRC val | ZipERZipclosed val | ZipERNoent val | ZipERExists val | ZipEROpen val | ZipERTmpopen val | ZipERZlib val | ZipERMemory val | ZipERChanged val | ZipERCompnotsupp val | ZipEREof val | ZipERInval val | ZipERNozip val | ZipERInternal val | ZipERIncons val | ZipERRemove val | ZipERDeleted val | ZipEREncrnotsupp val | ZipERRDOnly val | ZipERNopasswd val | ZipERWrongpasswd val | ZipEROpnotsupp val | ZipERInuse val | ZipERTell val | ZipERCompresseddata val | ZipERCancelled val)","title":"type ZipER"},{"location":"ponyzip-ZipER/#ziper","text":"[Source] type ZipER is (ZipEROK val | ZipERMultidisk val | ZipERRename val | ZipERClose val | ZipERSeek val | ZipERRead val | ZipERWrite val | ZipERCRC val | ZipERZipclosed val | ZipERNoent val | ZipERExists val | ZipEROpen val | ZipERTmpopen val | ZipERZlib val | ZipERMemory val | ZipERChanged val | ZipERCompnotsupp val | ZipEREof val | ZipERInval val | ZipERNozip val | ZipERInternal val | ZipERIncons val | ZipERRemove val | ZipERDeleted val | ZipEREncrnotsupp val | ZipERRDOnly val | ZipERNopasswd val | ZipERWrongpasswd val | ZipEROpnotsupp val | ZipERInuse val | ZipERTell val | ZipERCompresseddata val | ZipERCancelled val)","title":"ZipER"},{"location":"ponyzip-ZipER/#type-alias-for","text":"( ZipEROK val | ZipERMultidisk val | ZipERRename val | ZipERClose val | ZipERSeek val | ZipERRead val | ZipERWrite val | ZipERCRC val | ZipERZipclosed val | ZipERNoent val | ZipERExists val | ZipEROpen val | ZipERTmpopen val | ZipERZlib val | ZipERMemory val | ZipERChanged val | ZipERCompnotsupp val | ZipEREof val | ZipERInval val | ZipERNozip val | ZipERInternal val | ZipERIncons val | ZipERRemove val | ZipERDeleted val | ZipEREncrnotsupp val | ZipERRDOnly val | ZipERNopasswd val | ZipERWrongpasswd val | ZipEROpnotsupp val | ZipERInuse val | ZipERTell val | ZipERCompresseddata val | ZipERCancelled val)","title":"Type Alias For"},{"location":"ponyzip-ZipERCRC/","text":"ZipERCRC \u00b6 [Source] primitive val ZipERCRC Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERCRC val^ Returns \u00b6 ZipERCRC val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERCRC val) : Bool val Parameters \u00b6 that: ZipERCRC val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERCRC val) : Bool val Parameters \u00b6 that: ZipERCRC val Returns \u00b6 Bool val","title":"primitive ZipERCRC"},{"location":"ponyzip-ZipERCRC/#zipercrc","text":"[Source] primitive val ZipERCRC","title":"ZipERCRC"},{"location":"ponyzip-ZipERCRC/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERCRC/#create","text":"[Source] new val create() : ZipERCRC val^","title":"create"},{"location":"ponyzip-ZipERCRC/#returns","text":"ZipERCRC val^","title":"Returns"},{"location":"ponyzip-ZipERCRC/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERCRC/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERCRC/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERCRC/#eq","text":"[Source] fun box eq( that: ZipERCRC val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERCRC/#parameters","text":"that: ZipERCRC val","title":"Parameters"},{"location":"ponyzip-ZipERCRC/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCRC/#ne","text":"[Source] fun box ne( that: ZipERCRC val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERCRC/#parameters_1","text":"that: ZipERCRC val","title":"Parameters"},{"location":"ponyzip-ZipERCRC/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCancelled/","text":"ZipERCancelled \u00b6 [Source] primitive val ZipERCancelled Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERCancelled val^ Returns \u00b6 ZipERCancelled val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERCancelled val) : Bool val Parameters \u00b6 that: ZipERCancelled val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERCancelled val) : Bool val Parameters \u00b6 that: ZipERCancelled val Returns \u00b6 Bool val","title":"primitive ZipERCancelled"},{"location":"ponyzip-ZipERCancelled/#zipercancelled","text":"[Source] primitive val ZipERCancelled","title":"ZipERCancelled"},{"location":"ponyzip-ZipERCancelled/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERCancelled/#create","text":"[Source] new val create() : ZipERCancelled val^","title":"create"},{"location":"ponyzip-ZipERCancelled/#returns","text":"ZipERCancelled val^","title":"Returns"},{"location":"ponyzip-ZipERCancelled/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERCancelled/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERCancelled/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERCancelled/#eq","text":"[Source] fun box eq( that: ZipERCancelled val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERCancelled/#parameters","text":"that: ZipERCancelled val","title":"Parameters"},{"location":"ponyzip-ZipERCancelled/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCancelled/#ne","text":"[Source] fun box ne( that: ZipERCancelled val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERCancelled/#parameters_1","text":"that: ZipERCancelled val","title":"Parameters"},{"location":"ponyzip-ZipERCancelled/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERChanged/","text":"ZipERChanged \u00b6 [Source] primitive val ZipERChanged Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERChanged val^ Returns \u00b6 ZipERChanged val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERChanged val) : Bool val Parameters \u00b6 that: ZipERChanged val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERChanged val) : Bool val Parameters \u00b6 that: ZipERChanged val Returns \u00b6 Bool val","title":"primitive ZipERChanged"},{"location":"ponyzip-ZipERChanged/#ziperchanged","text":"[Source] primitive val ZipERChanged","title":"ZipERChanged"},{"location":"ponyzip-ZipERChanged/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERChanged/#create","text":"[Source] new val create() : ZipERChanged val^","title":"create"},{"location":"ponyzip-ZipERChanged/#returns","text":"ZipERChanged val^","title":"Returns"},{"location":"ponyzip-ZipERChanged/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERChanged/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERChanged/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERChanged/#eq","text":"[Source] fun box eq( that: ZipERChanged val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERChanged/#parameters","text":"that: ZipERChanged val","title":"Parameters"},{"location":"ponyzip-ZipERChanged/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERChanged/#ne","text":"[Source] fun box ne( that: ZipERChanged val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERChanged/#parameters_1","text":"that: ZipERChanged val","title":"Parameters"},{"location":"ponyzip-ZipERChanged/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERClose/","text":"ZipERClose \u00b6 [Source] primitive val ZipERClose Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERClose val^ Returns \u00b6 ZipERClose val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERClose val) : Bool val Parameters \u00b6 that: ZipERClose val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERClose val) : Bool val Parameters \u00b6 that: ZipERClose val Returns \u00b6 Bool val","title":"primitive ZipERClose"},{"location":"ponyzip-ZipERClose/#ziperclose","text":"[Source] primitive val ZipERClose","title":"ZipERClose"},{"location":"ponyzip-ZipERClose/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERClose/#create","text":"[Source] new val create() : ZipERClose val^","title":"create"},{"location":"ponyzip-ZipERClose/#returns","text":"ZipERClose val^","title":"Returns"},{"location":"ponyzip-ZipERClose/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERClose/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERClose/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERClose/#eq","text":"[Source] fun box eq( that: ZipERClose val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERClose/#parameters","text":"that: ZipERClose val","title":"Parameters"},{"location":"ponyzip-ZipERClose/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERClose/#ne","text":"[Source] fun box ne( that: ZipERClose val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERClose/#parameters_1","text":"that: ZipERClose val","title":"Parameters"},{"location":"ponyzip-ZipERClose/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCompnotsupp/","text":"ZipERCompnotsupp \u00b6 [Source] primitive val ZipERCompnotsupp Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERCompnotsupp val^ Returns \u00b6 ZipERCompnotsupp val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERCompnotsupp val) : Bool val Parameters \u00b6 that: ZipERCompnotsupp val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERCompnotsupp val) : Bool val Parameters \u00b6 that: ZipERCompnotsupp val Returns \u00b6 Bool val","title":"primitive ZipERCompnotsupp"},{"location":"ponyzip-ZipERCompnotsupp/#zipercompnotsupp","text":"[Source] primitive val ZipERCompnotsupp","title":"ZipERCompnotsupp"},{"location":"ponyzip-ZipERCompnotsupp/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERCompnotsupp/#create","text":"[Source] new val create() : ZipERCompnotsupp val^","title":"create"},{"location":"ponyzip-ZipERCompnotsupp/#returns","text":"ZipERCompnotsupp val^","title":"Returns"},{"location":"ponyzip-ZipERCompnotsupp/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERCompnotsupp/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERCompnotsupp/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERCompnotsupp/#eq","text":"[Source] fun box eq( that: ZipERCompnotsupp val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERCompnotsupp/#parameters","text":"that: ZipERCompnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipERCompnotsupp/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCompnotsupp/#ne","text":"[Source] fun box ne( that: ZipERCompnotsupp val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERCompnotsupp/#parameters_1","text":"that: ZipERCompnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipERCompnotsupp/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCompresseddata/","text":"ZipERCompresseddata \u00b6 [Source] primitive val ZipERCompresseddata Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERCompresseddata val^ Returns \u00b6 ZipERCompresseddata val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERCompresseddata val) : Bool val Parameters \u00b6 that: ZipERCompresseddata val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERCompresseddata val) : Bool val Parameters \u00b6 that: ZipERCompresseddata val Returns \u00b6 Bool val","title":"primitive ZipERCompresseddata"},{"location":"ponyzip-ZipERCompresseddata/#zipercompresseddata","text":"[Source] primitive val ZipERCompresseddata","title":"ZipERCompresseddata"},{"location":"ponyzip-ZipERCompresseddata/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERCompresseddata/#create","text":"[Source] new val create() : ZipERCompresseddata val^","title":"create"},{"location":"ponyzip-ZipERCompresseddata/#returns","text":"ZipERCompresseddata val^","title":"Returns"},{"location":"ponyzip-ZipERCompresseddata/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERCompresseddata/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERCompresseddata/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERCompresseddata/#eq","text":"[Source] fun box eq( that: ZipERCompresseddata val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERCompresseddata/#parameters","text":"that: ZipERCompresseddata val","title":"Parameters"},{"location":"ponyzip-ZipERCompresseddata/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERCompresseddata/#ne","text":"[Source] fun box ne( that: ZipERCompresseddata val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERCompresseddata/#parameters_1","text":"that: ZipERCompresseddata val","title":"Parameters"},{"location":"ponyzip-ZipERCompresseddata/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERDeleted/","text":"ZipERDeleted \u00b6 [Source] primitive val ZipERDeleted Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERDeleted val^ Returns \u00b6 ZipERDeleted val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERDeleted val) : Bool val Parameters \u00b6 that: ZipERDeleted val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERDeleted val) : Bool val Parameters \u00b6 that: ZipERDeleted val Returns \u00b6 Bool val","title":"primitive ZipERDeleted"},{"location":"ponyzip-ZipERDeleted/#ziperdeleted","text":"[Source] primitive val ZipERDeleted","title":"ZipERDeleted"},{"location":"ponyzip-ZipERDeleted/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERDeleted/#create","text":"[Source] new val create() : ZipERDeleted val^","title":"create"},{"location":"ponyzip-ZipERDeleted/#returns","text":"ZipERDeleted val^","title":"Returns"},{"location":"ponyzip-ZipERDeleted/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERDeleted/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERDeleted/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERDeleted/#eq","text":"[Source] fun box eq( that: ZipERDeleted val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERDeleted/#parameters","text":"that: ZipERDeleted val","title":"Parameters"},{"location":"ponyzip-ZipERDeleted/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERDeleted/#ne","text":"[Source] fun box ne( that: ZipERDeleted val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERDeleted/#parameters_1","text":"that: ZipERDeleted val","title":"Parameters"},{"location":"ponyzip-ZipERDeleted/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEREncrnotsupp/","text":"ZipEREncrnotsupp \u00b6 [Source] primitive val ZipEREncrnotsupp Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEREncrnotsupp val^ Returns \u00b6 ZipEREncrnotsupp val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipEREncrnotsupp val) : Bool val Parameters \u00b6 that: ZipEREncrnotsupp val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEREncrnotsupp val) : Bool val Parameters \u00b6 that: ZipEREncrnotsupp val Returns \u00b6 Bool val","title":"primitive ZipEREncrnotsupp"},{"location":"ponyzip-ZipEREncrnotsupp/#ziperencrnotsupp","text":"[Source] primitive val ZipEREncrnotsupp","title":"ZipEREncrnotsupp"},{"location":"ponyzip-ZipEREncrnotsupp/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEREncrnotsupp/#create","text":"[Source] new val create() : ZipEREncrnotsupp val^","title":"create"},{"location":"ponyzip-ZipEREncrnotsupp/#returns","text":"ZipEREncrnotsupp val^","title":"Returns"},{"location":"ponyzip-ZipEREncrnotsupp/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEREncrnotsupp/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipEREncrnotsupp/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipEREncrnotsupp/#eq","text":"[Source] fun box eq( that: ZipEREncrnotsupp val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEREncrnotsupp/#parameters","text":"that: ZipEREncrnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipEREncrnotsupp/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEREncrnotsupp/#ne","text":"[Source] fun box ne( that: ZipEREncrnotsupp val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEREncrnotsupp/#parameters_1","text":"that: ZipEREncrnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipEREncrnotsupp/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEREof/","text":"ZipEREof \u00b6 [Source] primitive val ZipEREof Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEREof val^ Returns \u00b6 ZipEREof val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipEREof val) : Bool val Parameters \u00b6 that: ZipEREof val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEREof val) : Bool val Parameters \u00b6 that: ZipEREof val Returns \u00b6 Bool val","title":"primitive ZipEREof"},{"location":"ponyzip-ZipEREof/#zipereof","text":"[Source] primitive val ZipEREof","title":"ZipEREof"},{"location":"ponyzip-ZipEREof/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEREof/#create","text":"[Source] new val create() : ZipEREof val^","title":"create"},{"location":"ponyzip-ZipEREof/#returns","text":"ZipEREof val^","title":"Returns"},{"location":"ponyzip-ZipEREof/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEREof/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipEREof/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipEREof/#eq","text":"[Source] fun box eq( that: ZipEREof val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEREof/#parameters","text":"that: ZipEREof val","title":"Parameters"},{"location":"ponyzip-ZipEREof/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEREof/#ne","text":"[Source] fun box ne( that: ZipEREof val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEREof/#parameters_1","text":"that: ZipEREof val","title":"Parameters"},{"location":"ponyzip-ZipEREof/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERExists/","text":"ZipERExists \u00b6 [Source] primitive val ZipERExists Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERExists val^ Returns \u00b6 ZipERExists val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERExists val) : Bool val Parameters \u00b6 that: ZipERExists val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERExists val) : Bool val Parameters \u00b6 that: ZipERExists val Returns \u00b6 Bool val","title":"primitive ZipERExists"},{"location":"ponyzip-ZipERExists/#ziperexists","text":"[Source] primitive val ZipERExists","title":"ZipERExists"},{"location":"ponyzip-ZipERExists/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERExists/#create","text":"[Source] new val create() : ZipERExists val^","title":"create"},{"location":"ponyzip-ZipERExists/#returns","text":"ZipERExists val^","title":"Returns"},{"location":"ponyzip-ZipERExists/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERExists/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERExists/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERExists/#eq","text":"[Source] fun box eq( that: ZipERExists val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERExists/#parameters","text":"that: ZipERExists val","title":"Parameters"},{"location":"ponyzip-ZipERExists/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERExists/#ne","text":"[Source] fun box ne( that: ZipERExists val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERExists/#parameters_1","text":"that: ZipERExists val","title":"Parameters"},{"location":"ponyzip-ZipERExists/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERIncons/","text":"ZipERIncons \u00b6 [Source] primitive val ZipERIncons Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERIncons val^ Returns \u00b6 ZipERIncons val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERIncons val) : Bool val Parameters \u00b6 that: ZipERIncons val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERIncons val) : Bool val Parameters \u00b6 that: ZipERIncons val Returns \u00b6 Bool val","title":"primitive ZipERIncons"},{"location":"ponyzip-ZipERIncons/#ziperincons","text":"[Source] primitive val ZipERIncons","title":"ZipERIncons"},{"location":"ponyzip-ZipERIncons/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERIncons/#create","text":"[Source] new val create() : ZipERIncons val^","title":"create"},{"location":"ponyzip-ZipERIncons/#returns","text":"ZipERIncons val^","title":"Returns"},{"location":"ponyzip-ZipERIncons/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERIncons/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERIncons/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERIncons/#eq","text":"[Source] fun box eq( that: ZipERIncons val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERIncons/#parameters","text":"that: ZipERIncons val","title":"Parameters"},{"location":"ponyzip-ZipERIncons/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERIncons/#ne","text":"[Source] fun box ne( that: ZipERIncons val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERIncons/#parameters_1","text":"that: ZipERIncons val","title":"Parameters"},{"location":"ponyzip-ZipERIncons/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInternal/","text":"ZipERInternal \u00b6 [Source] primitive val ZipERInternal Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERInternal val^ Returns \u00b6 ZipERInternal val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERInternal val) : Bool val Parameters \u00b6 that: ZipERInternal val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERInternal val) : Bool val Parameters \u00b6 that: ZipERInternal val Returns \u00b6 Bool val","title":"primitive ZipERInternal"},{"location":"ponyzip-ZipERInternal/#ziperinternal","text":"[Source] primitive val ZipERInternal","title":"ZipERInternal"},{"location":"ponyzip-ZipERInternal/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERInternal/#create","text":"[Source] new val create() : ZipERInternal val^","title":"create"},{"location":"ponyzip-ZipERInternal/#returns","text":"ZipERInternal val^","title":"Returns"},{"location":"ponyzip-ZipERInternal/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERInternal/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERInternal/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERInternal/#eq","text":"[Source] fun box eq( that: ZipERInternal val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERInternal/#parameters","text":"that: ZipERInternal val","title":"Parameters"},{"location":"ponyzip-ZipERInternal/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInternal/#ne","text":"[Source] fun box ne( that: ZipERInternal val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERInternal/#parameters_1","text":"that: ZipERInternal val","title":"Parameters"},{"location":"ponyzip-ZipERInternal/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInuse/","text":"ZipERInuse \u00b6 [Source] primitive val ZipERInuse Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERInuse val^ Returns \u00b6 ZipERInuse val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERInuse val) : Bool val Parameters \u00b6 that: ZipERInuse val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERInuse val) : Bool val Parameters \u00b6 that: ZipERInuse val Returns \u00b6 Bool val","title":"primitive ZipERInuse"},{"location":"ponyzip-ZipERInuse/#ziperinuse","text":"[Source] primitive val ZipERInuse","title":"ZipERInuse"},{"location":"ponyzip-ZipERInuse/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERInuse/#create","text":"[Source] new val create() : ZipERInuse val^","title":"create"},{"location":"ponyzip-ZipERInuse/#returns","text":"ZipERInuse val^","title":"Returns"},{"location":"ponyzip-ZipERInuse/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERInuse/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERInuse/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERInuse/#eq","text":"[Source] fun box eq( that: ZipERInuse val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERInuse/#parameters","text":"that: ZipERInuse val","title":"Parameters"},{"location":"ponyzip-ZipERInuse/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInuse/#ne","text":"[Source] fun box ne( that: ZipERInuse val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERInuse/#parameters_1","text":"that: ZipERInuse val","title":"Parameters"},{"location":"ponyzip-ZipERInuse/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInval/","text":"ZipERInval \u00b6 [Source] primitive val ZipERInval Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERInval val^ Returns \u00b6 ZipERInval val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERInval val) : Bool val Parameters \u00b6 that: ZipERInval val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERInval val) : Bool val Parameters \u00b6 that: ZipERInval val Returns \u00b6 Bool val","title":"primitive ZipERInval"},{"location":"ponyzip-ZipERInval/#ziperinval","text":"[Source] primitive val ZipERInval","title":"ZipERInval"},{"location":"ponyzip-ZipERInval/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERInval/#create","text":"[Source] new val create() : ZipERInval val^","title":"create"},{"location":"ponyzip-ZipERInval/#returns","text":"ZipERInval val^","title":"Returns"},{"location":"ponyzip-ZipERInval/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERInval/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERInval/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERInval/#eq","text":"[Source] fun box eq( that: ZipERInval val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERInval/#parameters","text":"that: ZipERInval val","title":"Parameters"},{"location":"ponyzip-ZipERInval/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERInval/#ne","text":"[Source] fun box ne( that: ZipERInval val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERInval/#parameters_1","text":"that: ZipERInval val","title":"Parameters"},{"location":"ponyzip-ZipERInval/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERMemory/","text":"ZipERMemory \u00b6 [Source] primitive val ZipERMemory Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERMemory val^ Returns \u00b6 ZipERMemory val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERMemory val) : Bool val Parameters \u00b6 that: ZipERMemory val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERMemory val) : Bool val Parameters \u00b6 that: ZipERMemory val Returns \u00b6 Bool val","title":"primitive ZipERMemory"},{"location":"ponyzip-ZipERMemory/#zipermemory","text":"[Source] primitive val ZipERMemory","title":"ZipERMemory"},{"location":"ponyzip-ZipERMemory/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERMemory/#create","text":"[Source] new val create() : ZipERMemory val^","title":"create"},{"location":"ponyzip-ZipERMemory/#returns","text":"ZipERMemory val^","title":"Returns"},{"location":"ponyzip-ZipERMemory/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERMemory/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERMemory/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERMemory/#eq","text":"[Source] fun box eq( that: ZipERMemory val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERMemory/#parameters","text":"that: ZipERMemory val","title":"Parameters"},{"location":"ponyzip-ZipERMemory/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERMemory/#ne","text":"[Source] fun box ne( that: ZipERMemory val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERMemory/#parameters_1","text":"that: ZipERMemory val","title":"Parameters"},{"location":"ponyzip-ZipERMemory/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERMultidisk/","text":"ZipERMultidisk \u00b6 [Source] primitive val ZipERMultidisk Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERMultidisk val^ Returns \u00b6 ZipERMultidisk val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERMultidisk val) : Bool val Parameters \u00b6 that: ZipERMultidisk val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERMultidisk val) : Bool val Parameters \u00b6 that: ZipERMultidisk val Returns \u00b6 Bool val","title":"primitive ZipERMultidisk"},{"location":"ponyzip-ZipERMultidisk/#zipermultidisk","text":"[Source] primitive val ZipERMultidisk","title":"ZipERMultidisk"},{"location":"ponyzip-ZipERMultidisk/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERMultidisk/#create","text":"[Source] new val create() : ZipERMultidisk val^","title":"create"},{"location":"ponyzip-ZipERMultidisk/#returns","text":"ZipERMultidisk val^","title":"Returns"},{"location":"ponyzip-ZipERMultidisk/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERMultidisk/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERMultidisk/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERMultidisk/#eq","text":"[Source] fun box eq( that: ZipERMultidisk val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERMultidisk/#parameters","text":"that: ZipERMultidisk val","title":"Parameters"},{"location":"ponyzip-ZipERMultidisk/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERMultidisk/#ne","text":"[Source] fun box ne( that: ZipERMultidisk val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERMultidisk/#parameters_1","text":"that: ZipERMultidisk val","title":"Parameters"},{"location":"ponyzip-ZipERMultidisk/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNoent/","text":"ZipERNoent \u00b6 [Source] primitive val ZipERNoent Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERNoent val^ Returns \u00b6 ZipERNoent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERNoent val) : Bool val Parameters \u00b6 that: ZipERNoent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERNoent val) : Bool val Parameters \u00b6 that: ZipERNoent val Returns \u00b6 Bool val","title":"primitive ZipERNoent"},{"location":"ponyzip-ZipERNoent/#zipernoent","text":"[Source] primitive val ZipERNoent","title":"ZipERNoent"},{"location":"ponyzip-ZipERNoent/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERNoent/#create","text":"[Source] new val create() : ZipERNoent val^","title":"create"},{"location":"ponyzip-ZipERNoent/#returns","text":"ZipERNoent val^","title":"Returns"},{"location":"ponyzip-ZipERNoent/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERNoent/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERNoent/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERNoent/#eq","text":"[Source] fun box eq( that: ZipERNoent val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERNoent/#parameters","text":"that: ZipERNoent val","title":"Parameters"},{"location":"ponyzip-ZipERNoent/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNoent/#ne","text":"[Source] fun box ne( that: ZipERNoent val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERNoent/#parameters_1","text":"that: ZipERNoent val","title":"Parameters"},{"location":"ponyzip-ZipERNoent/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNopasswd/","text":"ZipERNopasswd \u00b6 [Source] primitive val ZipERNopasswd Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERNopasswd val^ Returns \u00b6 ZipERNopasswd val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERNopasswd val) : Bool val Parameters \u00b6 that: ZipERNopasswd val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERNopasswd val) : Bool val Parameters \u00b6 that: ZipERNopasswd val Returns \u00b6 Bool val","title":"primitive ZipERNopasswd"},{"location":"ponyzip-ZipERNopasswd/#zipernopasswd","text":"[Source] primitive val ZipERNopasswd","title":"ZipERNopasswd"},{"location":"ponyzip-ZipERNopasswd/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERNopasswd/#create","text":"[Source] new val create() : ZipERNopasswd val^","title":"create"},{"location":"ponyzip-ZipERNopasswd/#returns","text":"ZipERNopasswd val^","title":"Returns"},{"location":"ponyzip-ZipERNopasswd/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERNopasswd/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERNopasswd/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERNopasswd/#eq","text":"[Source] fun box eq( that: ZipERNopasswd val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERNopasswd/#parameters","text":"that: ZipERNopasswd val","title":"Parameters"},{"location":"ponyzip-ZipERNopasswd/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNopasswd/#ne","text":"[Source] fun box ne( that: ZipERNopasswd val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERNopasswd/#parameters_1","text":"that: ZipERNopasswd val","title":"Parameters"},{"location":"ponyzip-ZipERNopasswd/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNozip/","text":"ZipERNozip \u00b6 [Source] primitive val ZipERNozip Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERNozip val^ Returns \u00b6 ZipERNozip val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERNozip val) : Bool val Parameters \u00b6 that: ZipERNozip val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERNozip val) : Bool val Parameters \u00b6 that: ZipERNozip val Returns \u00b6 Bool val","title":"primitive ZipERNozip"},{"location":"ponyzip-ZipERNozip/#zipernozip","text":"[Source] primitive val ZipERNozip","title":"ZipERNozip"},{"location":"ponyzip-ZipERNozip/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERNozip/#create","text":"[Source] new val create() : ZipERNozip val^","title":"create"},{"location":"ponyzip-ZipERNozip/#returns","text":"ZipERNozip val^","title":"Returns"},{"location":"ponyzip-ZipERNozip/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERNozip/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERNozip/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERNozip/#eq","text":"[Source] fun box eq( that: ZipERNozip val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERNozip/#parameters","text":"that: ZipERNozip val","title":"Parameters"},{"location":"ponyzip-ZipERNozip/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERNozip/#ne","text":"[Source] fun box ne( that: ZipERNozip val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERNozip/#parameters_1","text":"that: ZipERNozip val","title":"Parameters"},{"location":"ponyzip-ZipERNozip/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROK/","text":"ZipEROK \u00b6 [Source] primitive val ZipEROK Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEROK val^ Returns \u00b6 ZipEROK val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipEROK val) : Bool val Parameters \u00b6 that: ZipEROK val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEROK val) : Bool val Parameters \u00b6 that: ZipEROK val Returns \u00b6 Bool val","title":"primitive ZipEROK"},{"location":"ponyzip-ZipEROK/#ziperok","text":"[Source] primitive val ZipEROK","title":"ZipEROK"},{"location":"ponyzip-ZipEROK/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEROK/#create","text":"[Source] new val create() : ZipEROK val^","title":"create"},{"location":"ponyzip-ZipEROK/#returns","text":"ZipEROK val^","title":"Returns"},{"location":"ponyzip-ZipEROK/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEROK/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipEROK/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipEROK/#eq","text":"[Source] fun box eq( that: ZipEROK val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEROK/#parameters","text":"that: ZipEROK val","title":"Parameters"},{"location":"ponyzip-ZipEROK/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROK/#ne","text":"[Source] fun box ne( that: ZipEROK val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEROK/#parameters_1","text":"that: ZipEROK val","title":"Parameters"},{"location":"ponyzip-ZipEROK/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROpen/","text":"ZipEROpen \u00b6 [Source] primitive val ZipEROpen Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEROpen val^ Returns \u00b6 ZipEROpen val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipEROpen val) : Bool val Parameters \u00b6 that: ZipEROpen val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEROpen val) : Bool val Parameters \u00b6 that: ZipEROpen val Returns \u00b6 Bool val","title":"primitive ZipEROpen"},{"location":"ponyzip-ZipEROpen/#ziperopen","text":"[Source] primitive val ZipEROpen","title":"ZipEROpen"},{"location":"ponyzip-ZipEROpen/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEROpen/#create","text":"[Source] new val create() : ZipEROpen val^","title":"create"},{"location":"ponyzip-ZipEROpen/#returns","text":"ZipEROpen val^","title":"Returns"},{"location":"ponyzip-ZipEROpen/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEROpen/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipEROpen/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipEROpen/#eq","text":"[Source] fun box eq( that: ZipEROpen val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEROpen/#parameters","text":"that: ZipEROpen val","title":"Parameters"},{"location":"ponyzip-ZipEROpen/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROpen/#ne","text":"[Source] fun box ne( that: ZipEROpen val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEROpen/#parameters_1","text":"that: ZipEROpen val","title":"Parameters"},{"location":"ponyzip-ZipEROpen/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROpnotsupp/","text":"ZipEROpnotsupp \u00b6 [Source] primitive val ZipEROpnotsupp Constructors \u00b6 create \u00b6 [Source] new val create() : ZipEROpnotsupp val^ Returns \u00b6 ZipEROpnotsupp val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipEROpnotsupp val) : Bool val Parameters \u00b6 that: ZipEROpnotsupp val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipEROpnotsupp val) : Bool val Parameters \u00b6 that: ZipEROpnotsupp val Returns \u00b6 Bool val","title":"primitive ZipEROpnotsupp"},{"location":"ponyzip-ZipEROpnotsupp/#ziperopnotsupp","text":"[Source] primitive val ZipEROpnotsupp","title":"ZipEROpnotsupp"},{"location":"ponyzip-ZipEROpnotsupp/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipEROpnotsupp/#create","text":"[Source] new val create() : ZipEROpnotsupp val^","title":"create"},{"location":"ponyzip-ZipEROpnotsupp/#returns","text":"ZipEROpnotsupp val^","title":"Returns"},{"location":"ponyzip-ZipEROpnotsupp/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipEROpnotsupp/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipEROpnotsupp/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipEROpnotsupp/#eq","text":"[Source] fun box eq( that: ZipEROpnotsupp val) : Bool val","title":"eq"},{"location":"ponyzip-ZipEROpnotsupp/#parameters","text":"that: ZipEROpnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipEROpnotsupp/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipEROpnotsupp/#ne","text":"[Source] fun box ne( that: ZipEROpnotsupp val) : Bool val","title":"ne"},{"location":"ponyzip-ZipEROpnotsupp/#parameters_1","text":"that: ZipEROpnotsupp val","title":"Parameters"},{"location":"ponyzip-ZipEROpnotsupp/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRDOnly/","text":"ZipERRDOnly \u00b6 [Source] primitive val ZipERRDOnly Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERRDOnly val^ Returns \u00b6 ZipERRDOnly val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERRDOnly val) : Bool val Parameters \u00b6 that: ZipERRDOnly val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERRDOnly val) : Bool val Parameters \u00b6 that: ZipERRDOnly val Returns \u00b6 Bool val","title":"primitive ZipERRDOnly"},{"location":"ponyzip-ZipERRDOnly/#ziperrdonly","text":"[Source] primitive val ZipERRDOnly","title":"ZipERRDOnly"},{"location":"ponyzip-ZipERRDOnly/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERRDOnly/#create","text":"[Source] new val create() : ZipERRDOnly val^","title":"create"},{"location":"ponyzip-ZipERRDOnly/#returns","text":"ZipERRDOnly val^","title":"Returns"},{"location":"ponyzip-ZipERRDOnly/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERRDOnly/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERRDOnly/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERRDOnly/#eq","text":"[Source] fun box eq( that: ZipERRDOnly val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERRDOnly/#parameters","text":"that: ZipERRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipERRDOnly/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRDOnly/#ne","text":"[Source] fun box ne( that: ZipERRDOnly val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERRDOnly/#parameters_1","text":"that: ZipERRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipERRDOnly/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRead/","text":"ZipERRead \u00b6 [Source] primitive val ZipERRead Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERRead val^ Returns \u00b6 ZipERRead val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERRead val) : Bool val Parameters \u00b6 that: ZipERRead val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERRead val) : Bool val Parameters \u00b6 that: ZipERRead val Returns \u00b6 Bool val","title":"primitive ZipERRead"},{"location":"ponyzip-ZipERRead/#ziperread","text":"[Source] primitive val ZipERRead","title":"ZipERRead"},{"location":"ponyzip-ZipERRead/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERRead/#create","text":"[Source] new val create() : ZipERRead val^","title":"create"},{"location":"ponyzip-ZipERRead/#returns","text":"ZipERRead val^","title":"Returns"},{"location":"ponyzip-ZipERRead/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERRead/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERRead/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERRead/#eq","text":"[Source] fun box eq( that: ZipERRead val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERRead/#parameters","text":"that: ZipERRead val","title":"Parameters"},{"location":"ponyzip-ZipERRead/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRead/#ne","text":"[Source] fun box ne( that: ZipERRead val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERRead/#parameters_1","text":"that: ZipERRead val","title":"Parameters"},{"location":"ponyzip-ZipERRead/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRemove/","text":"ZipERRemove \u00b6 [Source] primitive val ZipERRemove Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERRemove val^ Returns \u00b6 ZipERRemove val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERRemove val) : Bool val Parameters \u00b6 that: ZipERRemove val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERRemove val) : Bool val Parameters \u00b6 that: ZipERRemove val Returns \u00b6 Bool val","title":"primitive ZipERRemove"},{"location":"ponyzip-ZipERRemove/#ziperremove","text":"[Source] primitive val ZipERRemove","title":"ZipERRemove"},{"location":"ponyzip-ZipERRemove/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERRemove/#create","text":"[Source] new val create() : ZipERRemove val^","title":"create"},{"location":"ponyzip-ZipERRemove/#returns","text":"ZipERRemove val^","title":"Returns"},{"location":"ponyzip-ZipERRemove/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERRemove/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERRemove/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERRemove/#eq","text":"[Source] fun box eq( that: ZipERRemove val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERRemove/#parameters","text":"that: ZipERRemove val","title":"Parameters"},{"location":"ponyzip-ZipERRemove/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRemove/#ne","text":"[Source] fun box ne( that: ZipERRemove val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERRemove/#parameters_1","text":"that: ZipERRemove val","title":"Parameters"},{"location":"ponyzip-ZipERRemove/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRename/","text":"ZipERRename \u00b6 [Source] primitive val ZipERRename Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERRename val^ Returns \u00b6 ZipERRename val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERRename val) : Bool val Parameters \u00b6 that: ZipERRename val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERRename val) : Bool val Parameters \u00b6 that: ZipERRename val Returns \u00b6 Bool val","title":"primitive ZipERRename"},{"location":"ponyzip-ZipERRename/#ziperrename","text":"[Source] primitive val ZipERRename","title":"ZipERRename"},{"location":"ponyzip-ZipERRename/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERRename/#create","text":"[Source] new val create() : ZipERRename val^","title":"create"},{"location":"ponyzip-ZipERRename/#returns","text":"ZipERRename val^","title":"Returns"},{"location":"ponyzip-ZipERRename/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERRename/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERRename/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERRename/#eq","text":"[Source] fun box eq( that: ZipERRename val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERRename/#parameters","text":"that: ZipERRename val","title":"Parameters"},{"location":"ponyzip-ZipERRename/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERRename/#ne","text":"[Source] fun box ne( that: ZipERRename val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERRename/#parameters_1","text":"that: ZipERRename val","title":"Parameters"},{"location":"ponyzip-ZipERRename/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERSeek/","text":"ZipERSeek \u00b6 [Source] primitive val ZipERSeek Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERSeek val^ Returns \u00b6 ZipERSeek val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERSeek val) : Bool val Parameters \u00b6 that: ZipERSeek val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERSeek val) : Bool val Parameters \u00b6 that: ZipERSeek val Returns \u00b6 Bool val","title":"primitive ZipERSeek"},{"location":"ponyzip-ZipERSeek/#ziperseek","text":"[Source] primitive val ZipERSeek","title":"ZipERSeek"},{"location":"ponyzip-ZipERSeek/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERSeek/#create","text":"[Source] new val create() : ZipERSeek val^","title":"create"},{"location":"ponyzip-ZipERSeek/#returns","text":"ZipERSeek val^","title":"Returns"},{"location":"ponyzip-ZipERSeek/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERSeek/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERSeek/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERSeek/#eq","text":"[Source] fun box eq( that: ZipERSeek val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERSeek/#parameters","text":"that: ZipERSeek val","title":"Parameters"},{"location":"ponyzip-ZipERSeek/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERSeek/#ne","text":"[Source] fun box ne( that: ZipERSeek val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERSeek/#parameters_1","text":"that: ZipERSeek val","title":"Parameters"},{"location":"ponyzip-ZipERSeek/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERTell/","text":"ZipERTell \u00b6 [Source] primitive val ZipERTell Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERTell val^ Returns \u00b6 ZipERTell val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERTell val) : Bool val Parameters \u00b6 that: ZipERTell val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERTell val) : Bool val Parameters \u00b6 that: ZipERTell val Returns \u00b6 Bool val","title":"primitive ZipERTell"},{"location":"ponyzip-ZipERTell/#zipertell","text":"[Source] primitive val ZipERTell","title":"ZipERTell"},{"location":"ponyzip-ZipERTell/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERTell/#create","text":"[Source] new val create() : ZipERTell val^","title":"create"},{"location":"ponyzip-ZipERTell/#returns","text":"ZipERTell val^","title":"Returns"},{"location":"ponyzip-ZipERTell/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERTell/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERTell/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERTell/#eq","text":"[Source] fun box eq( that: ZipERTell val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERTell/#parameters","text":"that: ZipERTell val","title":"Parameters"},{"location":"ponyzip-ZipERTell/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERTell/#ne","text":"[Source] fun box ne( that: ZipERTell val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERTell/#parameters_1","text":"that: ZipERTell val","title":"Parameters"},{"location":"ponyzip-ZipERTell/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERTmpopen/","text":"ZipERTmpopen \u00b6 [Source] primitive val ZipERTmpopen Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERTmpopen val^ Returns \u00b6 ZipERTmpopen val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERTmpopen val) : Bool val Parameters \u00b6 that: ZipERTmpopen val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERTmpopen val) : Bool val Parameters \u00b6 that: ZipERTmpopen val Returns \u00b6 Bool val","title":"primitive ZipERTmpopen"},{"location":"ponyzip-ZipERTmpopen/#zipertmpopen","text":"[Source] primitive val ZipERTmpopen","title":"ZipERTmpopen"},{"location":"ponyzip-ZipERTmpopen/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERTmpopen/#create","text":"[Source] new val create() : ZipERTmpopen val^","title":"create"},{"location":"ponyzip-ZipERTmpopen/#returns","text":"ZipERTmpopen val^","title":"Returns"},{"location":"ponyzip-ZipERTmpopen/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERTmpopen/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERTmpopen/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERTmpopen/#eq","text":"[Source] fun box eq( that: ZipERTmpopen val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERTmpopen/#parameters","text":"that: ZipERTmpopen val","title":"Parameters"},{"location":"ponyzip-ZipERTmpopen/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERTmpopen/#ne","text":"[Source] fun box ne( that: ZipERTmpopen val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERTmpopen/#parameters_1","text":"that: ZipERTmpopen val","title":"Parameters"},{"location":"ponyzip-ZipERTmpopen/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERWrite/","text":"ZipERWrite \u00b6 [Source] primitive val ZipERWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERWrite val^ Returns \u00b6 ZipERWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERWrite val) : Bool val Parameters \u00b6 that: ZipERWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERWrite val) : Bool val Parameters \u00b6 that: ZipERWrite val Returns \u00b6 Bool val","title":"primitive ZipERWrite"},{"location":"ponyzip-ZipERWrite/#ziperwrite","text":"[Source] primitive val ZipERWrite","title":"ZipERWrite"},{"location":"ponyzip-ZipERWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERWrite/#create","text":"[Source] new val create() : ZipERWrite val^","title":"create"},{"location":"ponyzip-ZipERWrite/#returns","text":"ZipERWrite val^","title":"Returns"},{"location":"ponyzip-ZipERWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERWrite/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERWrite/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERWrite/#eq","text":"[Source] fun box eq( that: ZipERWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERWrite/#parameters","text":"that: ZipERWrite val","title":"Parameters"},{"location":"ponyzip-ZipERWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERWrite/#ne","text":"[Source] fun box ne( that: ZipERWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERWrite/#parameters_1","text":"that: ZipERWrite val","title":"Parameters"},{"location":"ponyzip-ZipERWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERWrongpasswd/","text":"ZipERWrongpasswd \u00b6 [Source] primitive val ZipERWrongpasswd Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERWrongpasswd val^ Returns \u00b6 ZipERWrongpasswd val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERWrongpasswd val) : Bool val Parameters \u00b6 that: ZipERWrongpasswd val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERWrongpasswd val) : Bool val Parameters \u00b6 that: ZipERWrongpasswd val Returns \u00b6 Bool val","title":"primitive ZipERWrongpasswd"},{"location":"ponyzip-ZipERWrongpasswd/#ziperwrongpasswd","text":"[Source] primitive val ZipERWrongpasswd","title":"ZipERWrongpasswd"},{"location":"ponyzip-ZipERWrongpasswd/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERWrongpasswd/#create","text":"[Source] new val create() : ZipERWrongpasswd val^","title":"create"},{"location":"ponyzip-ZipERWrongpasswd/#returns","text":"ZipERWrongpasswd val^","title":"Returns"},{"location":"ponyzip-ZipERWrongpasswd/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERWrongpasswd/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERWrongpasswd/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERWrongpasswd/#eq","text":"[Source] fun box eq( that: ZipERWrongpasswd val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERWrongpasswd/#parameters","text":"that: ZipERWrongpasswd val","title":"Parameters"},{"location":"ponyzip-ZipERWrongpasswd/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERWrongpasswd/#ne","text":"[Source] fun box ne( that: ZipERWrongpasswd val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERWrongpasswd/#parameters_1","text":"that: ZipERWrongpasswd val","title":"Parameters"},{"location":"ponyzip-ZipERWrongpasswd/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERZipclosed/","text":"ZipERZipclosed \u00b6 [Source] primitive val ZipERZipclosed Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERZipclosed val^ Returns \u00b6 ZipERZipclosed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERZipclosed val) : Bool val Parameters \u00b6 that: ZipERZipclosed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERZipclosed val) : Bool val Parameters \u00b6 that: ZipERZipclosed val Returns \u00b6 Bool val","title":"primitive ZipERZipclosed"},{"location":"ponyzip-ZipERZipclosed/#ziperzipclosed","text":"[Source] primitive val ZipERZipclosed","title":"ZipERZipclosed"},{"location":"ponyzip-ZipERZipclosed/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERZipclosed/#create","text":"[Source] new val create() : ZipERZipclosed val^","title":"create"},{"location":"ponyzip-ZipERZipclosed/#returns","text":"ZipERZipclosed val^","title":"Returns"},{"location":"ponyzip-ZipERZipclosed/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERZipclosed/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERZipclosed/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERZipclosed/#eq","text":"[Source] fun box eq( that: ZipERZipclosed val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERZipclosed/#parameters","text":"that: ZipERZipclosed val","title":"Parameters"},{"location":"ponyzip-ZipERZipclosed/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERZipclosed/#ne","text":"[Source] fun box ne( that: ZipERZipclosed val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERZipclosed/#parameters_1","text":"that: ZipERZipclosed val","title":"Parameters"},{"location":"ponyzip-ZipERZipclosed/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERZlib/","text":"ZipERZlib \u00b6 [Source] primitive val ZipERZlib Constructors \u00b6 create \u00b6 [Source] new val create() : ZipERZlib val^ Returns \u00b6 ZipERZlib val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipERZlib val) : Bool val Parameters \u00b6 that: ZipERZlib val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipERZlib val) : Bool val Parameters \u00b6 that: ZipERZlib val Returns \u00b6 Bool val","title":"primitive ZipERZlib"},{"location":"ponyzip-ZipERZlib/#ziperzlib","text":"[Source] primitive val ZipERZlib","title":"ZipERZlib"},{"location":"ponyzip-ZipERZlib/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipERZlib/#create","text":"[Source] new val create() : ZipERZlib val^","title":"create"},{"location":"ponyzip-ZipERZlib/#returns","text":"ZipERZlib val^","title":"Returns"},{"location":"ponyzip-ZipERZlib/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipERZlib/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipERZlib/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipERZlib/#eq","text":"[Source] fun box eq( that: ZipERZlib val) : Bool val","title":"eq"},{"location":"ponyzip-ZipERZlib/#parameters","text":"that: ZipERZlib val","title":"Parameters"},{"location":"ponyzip-ZipERZlib/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipERZlib/#ne","text":"[Source] fun box ne( that: ZipERZlib val) : Bool val","title":"ne"},{"location":"ponyzip-ZipERZlib/#parameters_1","text":"that: ZipERZlib val","title":"Parameters"},{"location":"ponyzip-ZipERZlib/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETNone/","text":"ZipETNone \u00b6 [Source] primitive val ZipETNone Constructors \u00b6 create \u00b6 [Source] new val create() : ZipETNone val^ Returns \u00b6 ZipETNone val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipETNone val) : Bool val Parameters \u00b6 that: ZipETNone val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipETNone val) : Bool val Parameters \u00b6 that: ZipETNone val Returns \u00b6 Bool val","title":"primitive ZipETNone"},{"location":"ponyzip-ZipETNone/#zipetnone","text":"[Source] primitive val ZipETNone","title":"ZipETNone"},{"location":"ponyzip-ZipETNone/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipETNone/#create","text":"[Source] new val create() : ZipETNone val^","title":"create"},{"location":"ponyzip-ZipETNone/#returns","text":"ZipETNone val^","title":"Returns"},{"location":"ponyzip-ZipETNone/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipETNone/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipETNone/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipETNone/#eq","text":"[Source] fun box eq( that: ZipETNone val) : Bool val","title":"eq"},{"location":"ponyzip-ZipETNone/#parameters","text":"that: ZipETNone val","title":"Parameters"},{"location":"ponyzip-ZipETNone/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETNone/#ne","text":"[Source] fun box ne( that: ZipETNone val) : Bool val","title":"ne"},{"location":"ponyzip-ZipETNone/#parameters_1","text":"that: ZipETNone val","title":"Parameters"},{"location":"ponyzip-ZipETNone/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETSys/","text":"ZipETSys \u00b6 [Source] primitive val ZipETSys Constructors \u00b6 create \u00b6 [Source] new val create() : ZipETSys val^ Returns \u00b6 ZipETSys val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipETSys val) : Bool val Parameters \u00b6 that: ZipETSys val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipETSys val) : Bool val Parameters \u00b6 that: ZipETSys val Returns \u00b6 Bool val","title":"primitive ZipETSys"},{"location":"ponyzip-ZipETSys/#zipetsys","text":"[Source] primitive val ZipETSys","title":"ZipETSys"},{"location":"ponyzip-ZipETSys/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipETSys/#create","text":"[Source] new val create() : ZipETSys val^","title":"create"},{"location":"ponyzip-ZipETSys/#returns","text":"ZipETSys val^","title":"Returns"},{"location":"ponyzip-ZipETSys/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipETSys/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipETSys/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipETSys/#eq","text":"[Source] fun box eq( that: ZipETSys val) : Bool val","title":"eq"},{"location":"ponyzip-ZipETSys/#parameters","text":"that: ZipETSys val","title":"Parameters"},{"location":"ponyzip-ZipETSys/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETSys/#ne","text":"[Source] fun box ne( that: ZipETSys val) : Bool val","title":"ne"},{"location":"ponyzip-ZipETSys/#parameters_1","text":"that: ZipETSys val","title":"Parameters"},{"location":"ponyzip-ZipETSys/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETZlib/","text":"ZipETZlib \u00b6 [Source] primitive val ZipETZlib Constructors \u00b6 create \u00b6 [Source] new val create() : ZipETZlib val^ Returns \u00b6 ZipETZlib val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipETZlib val) : Bool val Parameters \u00b6 that: ZipETZlib val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipETZlib val) : Bool val Parameters \u00b6 that: ZipETZlib val Returns \u00b6 Bool val","title":"primitive ZipETZlib"},{"location":"ponyzip-ZipETZlib/#zipetzlib","text":"[Source] primitive val ZipETZlib","title":"ZipETZlib"},{"location":"ponyzip-ZipETZlib/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipETZlib/#create","text":"[Source] new val create() : ZipETZlib val^","title":"create"},{"location":"ponyzip-ZipETZlib/#returns","text":"ZipETZlib val^","title":"Returns"},{"location":"ponyzip-ZipETZlib/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipETZlib/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipETZlib/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipETZlib/#eq","text":"[Source] fun box eq( that: ZipETZlib val) : Bool val","title":"eq"},{"location":"ponyzip-ZipETZlib/#parameters","text":"that: ZipETZlib val","title":"Parameters"},{"location":"ponyzip-ZipETZlib/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipETZlib/#ne","text":"[Source] fun box ne( that: ZipETZlib val) : Bool val","title":"ne"},{"location":"ponyzip-ZipETZlib/#parameters_1","text":"that: ZipETZlib val","title":"Parameters"},{"location":"ponyzip-ZipETZlib/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipExcl/","text":"ZipExcl \u00b6 [Source] primitive val ZipExcl Constructors \u00b6 create \u00b6 [Source] new val create() : ZipExcl val^ Returns \u00b6 ZipExcl val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipExcl val) : Bool val Parameters \u00b6 that: ZipExcl val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipExcl val) : Bool val Parameters \u00b6 that: ZipExcl val Returns \u00b6 Bool val","title":"primitive ZipExcl"},{"location":"ponyzip-ZipExcl/#zipexcl","text":"[Source] primitive val ZipExcl","title":"ZipExcl"},{"location":"ponyzip-ZipExcl/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipExcl/#create","text":"[Source] new val create() : ZipExcl val^","title":"create"},{"location":"ponyzip-ZipExcl/#returns","text":"ZipExcl val^","title":"Returns"},{"location":"ponyzip-ZipExcl/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipExcl/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipExcl/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipExcl/#eq","text":"[Source] fun box eq( that: ZipExcl val) : Bool val","title":"eq"},{"location":"ponyzip-ZipExcl/#parameters","text":"that: ZipExcl val","title":"Parameters"},{"location":"ponyzip-ZipExcl/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipExcl/#ne","text":"[Source] fun box ne( that: ZipExcl val) : Bool val","title":"ne"},{"location":"ponyzip-ZipExcl/#parameters_1","text":"that: ZipExcl val","title":"Parameters"},{"location":"ponyzip-ZipExcl/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLCentral/","text":"ZipFLCentral \u00b6 [Source] primitive val ZipFLCentral Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLCentral val^ Returns \u00b6 ZipFLCentral val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLCentral val) : Bool val Parameters \u00b6 that: ZipFLCentral val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLCentral val) : Bool val Parameters \u00b6 that: ZipFLCentral val Returns \u00b6 Bool val","title":"primitive ZipFLCentral"},{"location":"ponyzip-ZipFLCentral/#zipflcentral","text":"[Source] primitive val ZipFLCentral","title":"ZipFLCentral"},{"location":"ponyzip-ZipFLCentral/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLCentral/#create","text":"[Source] new val create() : ZipFLCentral val^","title":"create"},{"location":"ponyzip-ZipFLCentral/#returns","text":"ZipFLCentral val^","title":"Returns"},{"location":"ponyzip-ZipFLCentral/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLCentral/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLCentral/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLCentral/#eq","text":"[Source] fun box eq( that: ZipFLCentral val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLCentral/#parameters","text":"that: ZipFLCentral val","title":"Parameters"},{"location":"ponyzip-ZipFLCentral/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLCentral/#ne","text":"[Source] fun box ne( that: ZipFLCentral val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLCentral/#parameters_1","text":"that: ZipFLCentral val","title":"Parameters"},{"location":"ponyzip-ZipFLCentral/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLCompressed/","text":"ZipFLCompressed \u00b6 [Source] primitive val ZipFLCompressed Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLCompressed val^ Returns \u00b6 ZipFLCompressed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLCompressed val) : Bool val Parameters \u00b6 that: ZipFLCompressed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLCompressed val) : Bool val Parameters \u00b6 that: ZipFLCompressed val Returns \u00b6 Bool val","title":"primitive ZipFLCompressed"},{"location":"ponyzip-ZipFLCompressed/#zipflcompressed","text":"[Source] primitive val ZipFLCompressed","title":"ZipFLCompressed"},{"location":"ponyzip-ZipFLCompressed/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLCompressed/#create","text":"[Source] new val create() : ZipFLCompressed val^","title":"create"},{"location":"ponyzip-ZipFLCompressed/#returns","text":"ZipFLCompressed val^","title":"Returns"},{"location":"ponyzip-ZipFLCompressed/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLCompressed/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLCompressed/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLCompressed/#eq","text":"[Source] fun box eq( that: ZipFLCompressed val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLCompressed/#parameters","text":"that: ZipFLCompressed val","title":"Parameters"},{"location":"ponyzip-ZipFLCompressed/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLCompressed/#ne","text":"[Source] fun box ne( that: ZipFLCompressed val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLCompressed/#parameters_1","text":"that: ZipFLCompressed val","title":"Parameters"},{"location":"ponyzip-ZipFLCompressed/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncCp437/","text":"ZipFLEncCp437 \u00b6 [Source] primitive val ZipFLEncCp437 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncCp437 val^ Returns \u00b6 ZipFLEncCp437 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncCp437 val) : Bool val Parameters \u00b6 that: ZipFLEncCp437 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncCp437 val) : Bool val Parameters \u00b6 that: ZipFLEncCp437 val Returns \u00b6 Bool val","title":"primitive ZipFLEncCp437"},{"location":"ponyzip-ZipFLEncCp437/#zipflenccp437","text":"[Source] primitive val ZipFLEncCp437","title":"ZipFLEncCp437"},{"location":"ponyzip-ZipFLEncCp437/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncCp437/#create","text":"[Source] new val create() : ZipFLEncCp437 val^","title":"create"},{"location":"ponyzip-ZipFLEncCp437/#returns","text":"ZipFLEncCp437 val^","title":"Returns"},{"location":"ponyzip-ZipFLEncCp437/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncCp437/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncCp437/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncCp437/#eq","text":"[Source] fun box eq( that: ZipFLEncCp437 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncCp437/#parameters","text":"that: ZipFLEncCp437 val","title":"Parameters"},{"location":"ponyzip-ZipFLEncCp437/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncCp437/#ne","text":"[Source] fun box ne( that: ZipFLEncCp437 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncCp437/#parameters_1","text":"that: ZipFLEncCp437 val","title":"Parameters"},{"location":"ponyzip-ZipFLEncCp437/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncGuess/","text":"ZipFLEncGuess \u00b6 [Source] primitive val ZipFLEncGuess Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncGuess val^ Returns \u00b6 ZipFLEncGuess val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncGuess val) : Bool val Parameters \u00b6 that: ZipFLEncGuess val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncGuess val) : Bool val Parameters \u00b6 that: ZipFLEncGuess val Returns \u00b6 Bool val","title":"primitive ZipFLEncGuess"},{"location":"ponyzip-ZipFLEncGuess/#zipflencguess","text":"[Source] primitive val ZipFLEncGuess","title":"ZipFLEncGuess"},{"location":"ponyzip-ZipFLEncGuess/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncGuess/#create","text":"[Source] new val create() : ZipFLEncGuess val^","title":"create"},{"location":"ponyzip-ZipFLEncGuess/#returns","text":"ZipFLEncGuess val^","title":"Returns"},{"location":"ponyzip-ZipFLEncGuess/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncGuess/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncGuess/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncGuess/#eq","text":"[Source] fun box eq( that: ZipFLEncGuess val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncGuess/#parameters","text":"that: ZipFLEncGuess val","title":"Parameters"},{"location":"ponyzip-ZipFLEncGuess/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncGuess/#ne","text":"[Source] fun box ne( that: ZipFLEncGuess val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncGuess/#parameters_1","text":"that: ZipFLEncGuess val","title":"Parameters"},{"location":"ponyzip-ZipFLEncGuess/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncRaw/","text":"ZipFLEncRaw \u00b6 [Source] primitive val ZipFLEncRaw Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncRaw val^ Returns \u00b6 ZipFLEncRaw val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncRaw val) : Bool val Parameters \u00b6 that: ZipFLEncRaw val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncRaw val) : Bool val Parameters \u00b6 that: ZipFLEncRaw val Returns \u00b6 Bool val","title":"primitive ZipFLEncRaw"},{"location":"ponyzip-ZipFLEncRaw/#zipflencraw","text":"[Source] primitive val ZipFLEncRaw","title":"ZipFLEncRaw"},{"location":"ponyzip-ZipFLEncRaw/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncRaw/#create","text":"[Source] new val create() : ZipFLEncRaw val^","title":"create"},{"location":"ponyzip-ZipFLEncRaw/#returns","text":"ZipFLEncRaw val^","title":"Returns"},{"location":"ponyzip-ZipFLEncRaw/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncRaw/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncRaw/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncRaw/#eq","text":"[Source] fun box eq( that: ZipFLEncRaw val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncRaw/#parameters","text":"that: ZipFLEncRaw val","title":"Parameters"},{"location":"ponyzip-ZipFLEncRaw/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncRaw/#ne","text":"[Source] fun box ne( that: ZipFLEncRaw val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncRaw/#parameters_1","text":"that: ZipFLEncRaw val","title":"Parameters"},{"location":"ponyzip-ZipFLEncRaw/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncStrict/","text":"ZipFLEncStrict \u00b6 [Source] primitive val ZipFLEncStrict Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncStrict val^ Returns \u00b6 ZipFLEncStrict val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncStrict val) : Bool val Parameters \u00b6 that: ZipFLEncStrict val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncStrict val) : Bool val Parameters \u00b6 that: ZipFLEncStrict val Returns \u00b6 Bool val","title":"primitive ZipFLEncStrict"},{"location":"ponyzip-ZipFLEncStrict/#zipflencstrict","text":"[Source] primitive val ZipFLEncStrict","title":"ZipFLEncStrict"},{"location":"ponyzip-ZipFLEncStrict/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncStrict/#create","text":"[Source] new val create() : ZipFLEncStrict val^","title":"create"},{"location":"ponyzip-ZipFLEncStrict/#returns","text":"ZipFLEncStrict val^","title":"Returns"},{"location":"ponyzip-ZipFLEncStrict/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncStrict/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncStrict/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncStrict/#eq","text":"[Source] fun box eq( that: ZipFLEncStrict val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncStrict/#parameters","text":"that: ZipFLEncStrict val","title":"Parameters"},{"location":"ponyzip-ZipFLEncStrict/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncStrict/#ne","text":"[Source] fun box ne( that: ZipFLEncStrict val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncStrict/#parameters_1","text":"that: ZipFLEncStrict val","title":"Parameters"},{"location":"ponyzip-ZipFLEncStrict/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncUtf8/","text":"ZipFLEncUtf8 \u00b6 [Source] primitive val ZipFLEncUtf8 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncUtf8 val^ Returns \u00b6 ZipFLEncUtf8 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncUtf8 val) : Bool val Parameters \u00b6 that: ZipFLEncUtf8 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncUtf8 val) : Bool val Parameters \u00b6 that: ZipFLEncUtf8 val Returns \u00b6 Bool val","title":"primitive ZipFLEncUtf8"},{"location":"ponyzip-ZipFLEncUtf8/#zipflencutf8","text":"[Source] primitive val ZipFLEncUtf8","title":"ZipFLEncUtf8"},{"location":"ponyzip-ZipFLEncUtf8/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncUtf8/#create","text":"[Source] new val create() : ZipFLEncUtf8 val^","title":"create"},{"location":"ponyzip-ZipFLEncUtf8/#returns","text":"ZipFLEncUtf8 val^","title":"Returns"},{"location":"ponyzip-ZipFLEncUtf8/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncUtf8/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncUtf8/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncUtf8/#eq","text":"[Source] fun box eq( that: ZipFLEncUtf8 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncUtf8/#parameters","text":"that: ZipFLEncUtf8 val","title":"Parameters"},{"location":"ponyzip-ZipFLEncUtf8/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncUtf8/#ne","text":"[Source] fun box ne( that: ZipFLEncUtf8 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncUtf8/#parameters_1","text":"that: ZipFLEncUtf8 val","title":"Parameters"},{"location":"ponyzip-ZipFLEncUtf8/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncrypted/","text":"ZipFLEncrypted \u00b6 [Source] primitive val ZipFLEncrypted Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLEncrypted val^ Returns \u00b6 ZipFLEncrypted val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLEncrypted val) : Bool val Parameters \u00b6 that: ZipFLEncrypted val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLEncrypted val) : Bool val Parameters \u00b6 that: ZipFLEncrypted val Returns \u00b6 Bool val","title":"primitive ZipFLEncrypted"},{"location":"ponyzip-ZipFLEncrypted/#zipflencrypted","text":"[Source] primitive val ZipFLEncrypted","title":"ZipFLEncrypted"},{"location":"ponyzip-ZipFLEncrypted/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLEncrypted/#create","text":"[Source] new val create() : ZipFLEncrypted val^","title":"create"},{"location":"ponyzip-ZipFLEncrypted/#returns","text":"ZipFLEncrypted val^","title":"Returns"},{"location":"ponyzip-ZipFLEncrypted/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLEncrypted/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLEncrypted/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLEncrypted/#eq","text":"[Source] fun box eq( that: ZipFLEncrypted val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLEncrypted/#parameters","text":"that: ZipFLEncrypted val","title":"Parameters"},{"location":"ponyzip-ZipFLEncrypted/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLEncrypted/#ne","text":"[Source] fun box ne( that: ZipFLEncrypted val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLEncrypted/#parameters_1","text":"that: ZipFLEncrypted val","title":"Parameters"},{"location":"ponyzip-ZipFLEncrypted/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLFlags/","text":"ZipFLFlags \u00b6 [Source] type ZipFLFlags is (ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val) Type Alias For \u00b6 ( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)","title":"type ZipFLFlags"},{"location":"ponyzip-ZipFLFlags/#zipflflags","text":"[Source] type ZipFLFlags is (ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)","title":"ZipFLFlags"},{"location":"ponyzip-ZipFLFlags/#type-alias-for","text":"( ZipFLNocase val | ZipFLNodir val | ZipFLCompressed val | ZipFLUnchanged val | ZipFLRecompress val | ZipFLEncrypted val | ZipFLEncGuess val | ZipFLEncRaw val | ZipFLEncStrict val | ZipFLLocal val | ZipFLCentral val | ZipFLEncUtf8 val | ZipFLEncCp437 val | ZipFLOverwrite val)","title":"Type Alias For"},{"location":"ponyzip-ZipFLLocal/","text":"ZipFLLocal \u00b6 [Source] primitive val ZipFLLocal Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLLocal val^ Returns \u00b6 ZipFLLocal val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLLocal val) : Bool val Parameters \u00b6 that: ZipFLLocal val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLLocal val) : Bool val Parameters \u00b6 that: ZipFLLocal val Returns \u00b6 Bool val","title":"primitive ZipFLLocal"},{"location":"ponyzip-ZipFLLocal/#zipfllocal","text":"[Source] primitive val ZipFLLocal","title":"ZipFLLocal"},{"location":"ponyzip-ZipFLLocal/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLLocal/#create","text":"[Source] new val create() : ZipFLLocal val^","title":"create"},{"location":"ponyzip-ZipFLLocal/#returns","text":"ZipFLLocal val^","title":"Returns"},{"location":"ponyzip-ZipFLLocal/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLLocal/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLLocal/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLLocal/#eq","text":"[Source] fun box eq( that: ZipFLLocal val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLLocal/#parameters","text":"that: ZipFLLocal val","title":"Parameters"},{"location":"ponyzip-ZipFLLocal/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLLocal/#ne","text":"[Source] fun box ne( that: ZipFLLocal val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLLocal/#parameters_1","text":"that: ZipFLLocal val","title":"Parameters"},{"location":"ponyzip-ZipFLLocal/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLNocase/","text":"ZipFLNocase \u00b6 [Source] primitive val ZipFLNocase Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLNocase val^ Returns \u00b6 ZipFLNocase val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLNocase val) : Bool val Parameters \u00b6 that: ZipFLNocase val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLNocase val) : Bool val Parameters \u00b6 that: ZipFLNocase val Returns \u00b6 Bool val","title":"primitive ZipFLNocase"},{"location":"ponyzip-ZipFLNocase/#zipflnocase","text":"[Source] primitive val ZipFLNocase","title":"ZipFLNocase"},{"location":"ponyzip-ZipFLNocase/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLNocase/#create","text":"[Source] new val create() : ZipFLNocase val^","title":"create"},{"location":"ponyzip-ZipFLNocase/#returns","text":"ZipFLNocase val^","title":"Returns"},{"location":"ponyzip-ZipFLNocase/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLNocase/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLNocase/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLNocase/#eq","text":"[Source] fun box eq( that: ZipFLNocase val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLNocase/#parameters","text":"that: ZipFLNocase val","title":"Parameters"},{"location":"ponyzip-ZipFLNocase/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLNocase/#ne","text":"[Source] fun box ne( that: ZipFLNocase val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLNocase/#parameters_1","text":"that: ZipFLNocase val","title":"Parameters"},{"location":"ponyzip-ZipFLNocase/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLNodir/","text":"ZipFLNodir \u00b6 [Source] primitive val ZipFLNodir Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLNodir val^ Returns \u00b6 ZipFLNodir val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLNodir val) : Bool val Parameters \u00b6 that: ZipFLNodir val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLNodir val) : Bool val Parameters \u00b6 that: ZipFLNodir val Returns \u00b6 Bool val","title":"primitive ZipFLNodir"},{"location":"ponyzip-ZipFLNodir/#zipflnodir","text":"[Source] primitive val ZipFLNodir","title":"ZipFLNodir"},{"location":"ponyzip-ZipFLNodir/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLNodir/#create","text":"[Source] new val create() : ZipFLNodir val^","title":"create"},{"location":"ponyzip-ZipFLNodir/#returns","text":"ZipFLNodir val^","title":"Returns"},{"location":"ponyzip-ZipFLNodir/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLNodir/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLNodir/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLNodir/#eq","text":"[Source] fun box eq( that: ZipFLNodir val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLNodir/#parameters","text":"that: ZipFLNodir val","title":"Parameters"},{"location":"ponyzip-ZipFLNodir/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLNodir/#ne","text":"[Source] fun box ne( that: ZipFLNodir val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLNodir/#parameters_1","text":"that: ZipFLNodir val","title":"Parameters"},{"location":"ponyzip-ZipFLNodir/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLOverwrite/","text":"ZipFLOverwrite \u00b6 [Source] primitive val ZipFLOverwrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLOverwrite val^ Returns \u00b6 ZipFLOverwrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLOverwrite val) : Bool val Parameters \u00b6 that: ZipFLOverwrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLOverwrite val) : Bool val Parameters \u00b6 that: ZipFLOverwrite val Returns \u00b6 Bool val","title":"primitive ZipFLOverwrite"},{"location":"ponyzip-ZipFLOverwrite/#zipfloverwrite","text":"[Source] primitive val ZipFLOverwrite","title":"ZipFLOverwrite"},{"location":"ponyzip-ZipFLOverwrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLOverwrite/#create","text":"[Source] new val create() : ZipFLOverwrite val^","title":"create"},{"location":"ponyzip-ZipFLOverwrite/#returns","text":"ZipFLOverwrite val^","title":"Returns"},{"location":"ponyzip-ZipFLOverwrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLOverwrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLOverwrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLOverwrite/#eq","text":"[Source] fun box eq( that: ZipFLOverwrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLOverwrite/#parameters","text":"that: ZipFLOverwrite val","title":"Parameters"},{"location":"ponyzip-ZipFLOverwrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLOverwrite/#ne","text":"[Source] fun box ne( that: ZipFLOverwrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLOverwrite/#parameters_1","text":"that: ZipFLOverwrite val","title":"Parameters"},{"location":"ponyzip-ZipFLOverwrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLRecompress/","text":"ZipFLRecompress \u00b6 [Source] primitive val ZipFLRecompress Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLRecompress val^ Returns \u00b6 ZipFLRecompress val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLRecompress val) : Bool val Parameters \u00b6 that: ZipFLRecompress val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLRecompress val) : Bool val Parameters \u00b6 that: ZipFLRecompress val Returns \u00b6 Bool val","title":"primitive ZipFLRecompress"},{"location":"ponyzip-ZipFLRecompress/#zipflrecompress","text":"[Source] primitive val ZipFLRecompress","title":"ZipFLRecompress"},{"location":"ponyzip-ZipFLRecompress/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLRecompress/#create","text":"[Source] new val create() : ZipFLRecompress val^","title":"create"},{"location":"ponyzip-ZipFLRecompress/#returns","text":"ZipFLRecompress val^","title":"Returns"},{"location":"ponyzip-ZipFLRecompress/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLRecompress/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLRecompress/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLRecompress/#eq","text":"[Source] fun box eq( that: ZipFLRecompress val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLRecompress/#parameters","text":"that: ZipFLRecompress val","title":"Parameters"},{"location":"ponyzip-ZipFLRecompress/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLRecompress/#ne","text":"[Source] fun box ne( that: ZipFLRecompress val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLRecompress/#parameters_1","text":"that: ZipFLRecompress val","title":"Parameters"},{"location":"ponyzip-ZipFLRecompress/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLUnchanged/","text":"ZipFLUnchanged \u00b6 [Source] primitive val ZipFLUnchanged Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFLUnchanged val^ Returns \u00b6 ZipFLUnchanged val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipFLUnchanged val) : Bool val Parameters \u00b6 that: ZipFLUnchanged val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFLUnchanged val) : Bool val Parameters \u00b6 that: ZipFLUnchanged val Returns \u00b6 Bool val","title":"primitive ZipFLUnchanged"},{"location":"ponyzip-ZipFLUnchanged/#zipflunchanged","text":"[Source] primitive val ZipFLUnchanged","title":"ZipFLUnchanged"},{"location":"ponyzip-ZipFLUnchanged/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFLUnchanged/#create","text":"[Source] new val create() : ZipFLUnchanged val^","title":"create"},{"location":"ponyzip-ZipFLUnchanged/#returns","text":"ZipFLUnchanged val^","title":"Returns"},{"location":"ponyzip-ZipFLUnchanged/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFLUnchanged/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipFLUnchanged/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipFLUnchanged/#eq","text":"[Source] fun box eq( that: ZipFLUnchanged val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFLUnchanged/#parameters","text":"that: ZipFLUnchanged val","title":"Parameters"},{"location":"ponyzip-ZipFLUnchanged/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFLUnchanged/#ne","text":"[Source] fun box ne( that: ZipFLUnchanged val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFLUnchanged/#parameters_1","text":"that: ZipFLUnchanged val","title":"Parameters"},{"location":"ponyzip-ZipFLUnchanged/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesAscii/","text":"ZipFileAttributesAscii \u00b6 [Source] primitive val ZipFileAttributesAscii Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFileAttributesAscii val^ Returns \u00b6 ZipFileAttributesAscii val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipFileAttributesAscii val) : Bool val Parameters \u00b6 that: ZipFileAttributesAscii val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFileAttributesAscii val) : Bool val Parameters \u00b6 that: ZipFileAttributesAscii val Returns \u00b6 Bool val","title":"primitive ZipFileAttributesAscii"},{"location":"ponyzip-ZipFileAttributesAscii/#zipfileattributesascii","text":"[Source] primitive val ZipFileAttributesAscii","title":"ZipFileAttributesAscii"},{"location":"ponyzip-ZipFileAttributesAscii/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFileAttributesAscii/#create","text":"[Source] new val create() : ZipFileAttributesAscii val^","title":"create"},{"location":"ponyzip-ZipFileAttributesAscii/#returns","text":"ZipFileAttributesAscii val^","title":"Returns"},{"location":"ponyzip-ZipFileAttributesAscii/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFileAttributesAscii/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipFileAttributesAscii/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesAscii/#eq","text":"[Source] fun box eq( that: ZipFileAttributesAscii val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFileAttributesAscii/#parameters","text":"that: ZipFileAttributesAscii val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesAscii/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesAscii/#ne","text":"[Source] fun box ne( that: ZipFileAttributesAscii val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFileAttributesAscii/#parameters_1","text":"that: ZipFileAttributesAscii val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesAscii/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/","text":"ZipFileAttributesExternalFileAttributes \u00b6 [Source] primitive val ZipFileAttributesExternalFileAttributes Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFileAttributesExternalFileAttributes val^ Returns \u00b6 ZipFileAttributesExternalFileAttributes val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipFileAttributesExternalFileAttributes val) : Bool val Parameters \u00b6 that: ZipFileAttributesExternalFileAttributes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFileAttributesExternalFileAttributes val) : Bool val Parameters \u00b6 that: ZipFileAttributesExternalFileAttributes val Returns \u00b6 Bool val","title":"primitive ZipFileAttributesExternalFileAttributes"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#zipfileattributesexternalfileattributes","text":"[Source] primitive val ZipFileAttributesExternalFileAttributes","title":"ZipFileAttributesExternalFileAttributes"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#create","text":"[Source] new val create() : ZipFileAttributesExternalFileAttributes val^","title":"create"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#returns","text":"ZipFileAttributesExternalFileAttributes val^","title":"Returns"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#eq","text":"[Source] fun box eq( that: ZipFileAttributesExternalFileAttributes val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#parameters","text":"that: ZipFileAttributesExternalFileAttributes val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#ne","text":"[Source] fun box ne( that: ZipFileAttributesExternalFileAttributes val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#parameters_1","text":"that: ZipFileAttributesExternalFileAttributes val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesExternalFileAttributes/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesFlags/","text":"ZipFileAttributesFlags \u00b6 [Source] type ZipFileAttributesFlags is (ZipFileAttributesHostSystem val | ZipFileAttributesAscii val | ZipFileAttributesVersionNeeded val | ZipFileAttributesExternalFileAttributes val | ZipFileAttributesGeneralPurposeBitFlags val) Type Alias For \u00b6 ( ZipFileAttributesHostSystem val | ZipFileAttributesAscii val | ZipFileAttributesVersionNeeded val | ZipFileAttributesExternalFileAttributes val | ZipFileAttributesGeneralPurposeBitFlags val)","title":"type ZipFileAttributesFlags"},{"location":"ponyzip-ZipFileAttributesFlags/#zipfileattributesflags","text":"[Source] type ZipFileAttributesFlags is (ZipFileAttributesHostSystem val | ZipFileAttributesAscii val | ZipFileAttributesVersionNeeded val | ZipFileAttributesExternalFileAttributes val | ZipFileAttributesGeneralPurposeBitFlags val)","title":"ZipFileAttributesFlags"},{"location":"ponyzip-ZipFileAttributesFlags/#type-alias-for","text":"( ZipFileAttributesHostSystem val | ZipFileAttributesAscii val | ZipFileAttributesVersionNeeded val | ZipFileAttributesExternalFileAttributes val | ZipFileAttributesGeneralPurposeBitFlags val)","title":"Type Alias For"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/","text":"ZipFileAttributesGeneralPurposeBitFlags \u00b6 [Source] primitive val ZipFileAttributesGeneralPurposeBitFlags Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFileAttributesGeneralPurposeBitFlags val^ Returns \u00b6 ZipFileAttributesGeneralPurposeBitFlags val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipFileAttributesGeneralPurposeBitFlags val) : Bool val Parameters \u00b6 that: ZipFileAttributesGeneralPurposeBitFlags val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFileAttributesGeneralPurposeBitFlags val) : Bool val Parameters \u00b6 that: ZipFileAttributesGeneralPurposeBitFlags val Returns \u00b6 Bool val","title":"primitive ZipFileAttributesGeneralPurposeBitFlags"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#zipfileattributesgeneralpurposebitflags","text":"[Source] primitive val ZipFileAttributesGeneralPurposeBitFlags","title":"ZipFileAttributesGeneralPurposeBitFlags"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#create","text":"[Source] new val create() : ZipFileAttributesGeneralPurposeBitFlags val^","title":"create"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#returns","text":"ZipFileAttributesGeneralPurposeBitFlags val^","title":"Returns"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#eq","text":"[Source] fun box eq( that: ZipFileAttributesGeneralPurposeBitFlags val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#parameters","text":"that: ZipFileAttributesGeneralPurposeBitFlags val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#ne","text":"[Source] fun box ne( that: ZipFileAttributesGeneralPurposeBitFlags val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#parameters_1","text":"that: ZipFileAttributesGeneralPurposeBitFlags val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesGeneralPurposeBitFlags/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesHostSystem/","text":"ZipFileAttributesHostSystem \u00b6 [Source] primitive val ZipFileAttributesHostSystem Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFileAttributesHostSystem val^ Returns \u00b6 ZipFileAttributesHostSystem val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipFileAttributesHostSystem val) : Bool val Parameters \u00b6 that: ZipFileAttributesHostSystem val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFileAttributesHostSystem val) : Bool val Parameters \u00b6 that: ZipFileAttributesHostSystem val Returns \u00b6 Bool val","title":"primitive ZipFileAttributesHostSystem"},{"location":"ponyzip-ZipFileAttributesHostSystem/#zipfileattributeshostsystem","text":"[Source] primitive val ZipFileAttributesHostSystem","title":"ZipFileAttributesHostSystem"},{"location":"ponyzip-ZipFileAttributesHostSystem/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFileAttributesHostSystem/#create","text":"[Source] new val create() : ZipFileAttributesHostSystem val^","title":"create"},{"location":"ponyzip-ZipFileAttributesHostSystem/#returns","text":"ZipFileAttributesHostSystem val^","title":"Returns"},{"location":"ponyzip-ZipFileAttributesHostSystem/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFileAttributesHostSystem/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipFileAttributesHostSystem/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesHostSystem/#eq","text":"[Source] fun box eq( that: ZipFileAttributesHostSystem val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFileAttributesHostSystem/#parameters","text":"that: ZipFileAttributesHostSystem val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesHostSystem/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesHostSystem/#ne","text":"[Source] fun box ne( that: ZipFileAttributesHostSystem val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFileAttributesHostSystem/#parameters_1","text":"that: ZipFileAttributesHostSystem val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesHostSystem/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/","text":"ZipFileAttributesVersionNeeded \u00b6 [Source] primitive val ZipFileAttributesVersionNeeded Constructors \u00b6 create \u00b6 [Source] new val create() : ZipFileAttributesVersionNeeded val^ Returns \u00b6 ZipFileAttributesVersionNeeded val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipFileAttributesVersionNeeded val) : Bool val Parameters \u00b6 that: ZipFileAttributesVersionNeeded val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipFileAttributesVersionNeeded val) : Bool val Parameters \u00b6 that: ZipFileAttributesVersionNeeded val Returns \u00b6 Bool val","title":"primitive ZipFileAttributesVersionNeeded"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#zipfileattributesversionneeded","text":"[Source] primitive val ZipFileAttributesVersionNeeded","title":"ZipFileAttributesVersionNeeded"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#create","text":"[Source] new val create() : ZipFileAttributesVersionNeeded val^","title":"create"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#returns","text":"ZipFileAttributesVersionNeeded val^","title":"Returns"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#eq","text":"[Source] fun box eq( that: ZipFileAttributesVersionNeeded val) : Bool val","title":"eq"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#parameters","text":"that: ZipFileAttributesVersionNeeded val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#ne","text":"[Source] fun box ne( that: ZipFileAttributesVersionNeeded val) : Bool val","title":"ne"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#parameters_1","text":"that: ZipFileAttributesVersionNeeded val","title":"Parameters"},{"location":"ponyzip-ZipFileAttributesVersionNeeded/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipFlags/","text":"ZipFlags \u00b6 [Source] type ZipFlags is (ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val) Type Alias For \u00b6 ( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)","title":"type ZipFlags"},{"location":"ponyzip-ZipFlags/#zipflags","text":"[Source] type ZipFlags is (ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)","title":"ZipFlags"},{"location":"ponyzip-ZipFlags/#type-alias-for","text":"( ZipCreate val | ZipExcl val | ZipCheckcons val | ZipTruncate val | ZipRDOnly val)","title":"Type Alias For"},{"location":"ponyzip-ZipOPSYSAcornrisc/","text":"ZipOPSYSAcornrisc \u00b6 [Source] primitive val ZipOPSYSAcornrisc Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSAcornrisc val^ Returns \u00b6 ZipOPSYSAcornrisc val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSAcornrisc val) : Bool val Parameters \u00b6 that: ZipOPSYSAcornrisc val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSAcornrisc val) : Bool val Parameters \u00b6 that: ZipOPSYSAcornrisc val Returns \u00b6 Bool val","title":"primitive ZipOPSYSAcornrisc"},{"location":"ponyzip-ZipOPSYSAcornrisc/#zipopsysacornrisc","text":"[Source] primitive val ZipOPSYSAcornrisc","title":"ZipOPSYSAcornrisc"},{"location":"ponyzip-ZipOPSYSAcornrisc/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSAcornrisc/#create","text":"[Source] new val create() : ZipOPSYSAcornrisc val^","title":"create"},{"location":"ponyzip-ZipOPSYSAcornrisc/#returns","text":"ZipOPSYSAcornrisc val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSAcornrisc/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSAcornrisc/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSAcornrisc/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAcornrisc/#eq","text":"[Source] fun box eq( that: ZipOPSYSAcornrisc val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSAcornrisc/#parameters","text":"that: ZipOPSYSAcornrisc val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAcornrisc/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAcornrisc/#ne","text":"[Source] fun box ne( that: ZipOPSYSAcornrisc val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSAcornrisc/#parameters_1","text":"that: ZipOPSYSAcornrisc val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAcornrisc/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAlternatemvs/","text":"ZipOPSYSAlternatemvs \u00b6 [Source] primitive val ZipOPSYSAlternatemvs Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSAlternatemvs val^ Returns \u00b6 ZipOPSYSAlternatemvs val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSAlternatemvs val) : Bool val Parameters \u00b6 that: ZipOPSYSAlternatemvs val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSAlternatemvs val) : Bool val Parameters \u00b6 that: ZipOPSYSAlternatemvs val Returns \u00b6 Bool val","title":"primitive ZipOPSYSAlternatemvs"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#zipopsysalternatemvs","text":"[Source] primitive val ZipOPSYSAlternatemvs","title":"ZipOPSYSAlternatemvs"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#create","text":"[Source] new val create() : ZipOPSYSAlternatemvs val^","title":"create"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#returns","text":"ZipOPSYSAlternatemvs val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#eq","text":"[Source] fun box eq( that: ZipOPSYSAlternatemvs val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#parameters","text":"that: ZipOPSYSAlternatemvs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#ne","text":"[Source] fun box ne( that: ZipOPSYSAlternatemvs val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#parameters_1","text":"that: ZipOPSYSAlternatemvs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAlternatemvs/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAmiga/","text":"ZipOPSYSAmiga \u00b6 [Source] primitive val ZipOPSYSAmiga Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSAmiga val^ Returns \u00b6 ZipOPSYSAmiga val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSAmiga val) : Bool val Parameters \u00b6 that: ZipOPSYSAmiga val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSAmiga val) : Bool val Parameters \u00b6 that: ZipOPSYSAmiga val Returns \u00b6 Bool val","title":"primitive ZipOPSYSAmiga"},{"location":"ponyzip-ZipOPSYSAmiga/#zipopsysamiga","text":"[Source] primitive val ZipOPSYSAmiga","title":"ZipOPSYSAmiga"},{"location":"ponyzip-ZipOPSYSAmiga/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSAmiga/#create","text":"[Source] new val create() : ZipOPSYSAmiga val^","title":"create"},{"location":"ponyzip-ZipOPSYSAmiga/#returns","text":"ZipOPSYSAmiga val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSAmiga/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSAmiga/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSAmiga/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAmiga/#eq","text":"[Source] fun box eq( that: ZipOPSYSAmiga val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSAmiga/#parameters","text":"that: ZipOPSYSAmiga val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAmiga/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAmiga/#ne","text":"[Source] fun box ne( that: ZipOPSYSAmiga val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSAmiga/#parameters_1","text":"that: ZipOPSYSAmiga val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAmiga/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAtarist/","text":"ZipOPSYSAtarist \u00b6 [Source] primitive val ZipOPSYSAtarist Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSAtarist val^ Returns \u00b6 ZipOPSYSAtarist val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSAtarist val) : Bool val Parameters \u00b6 that: ZipOPSYSAtarist val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSAtarist val) : Bool val Parameters \u00b6 that: ZipOPSYSAtarist val Returns \u00b6 Bool val","title":"primitive ZipOPSYSAtarist"},{"location":"ponyzip-ZipOPSYSAtarist/#zipopsysatarist","text":"[Source] primitive val ZipOPSYSAtarist","title":"ZipOPSYSAtarist"},{"location":"ponyzip-ZipOPSYSAtarist/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSAtarist/#create","text":"[Source] new val create() : ZipOPSYSAtarist val^","title":"create"},{"location":"ponyzip-ZipOPSYSAtarist/#returns","text":"ZipOPSYSAtarist val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSAtarist/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSAtarist/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSAtarist/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAtarist/#eq","text":"[Source] fun box eq( that: ZipOPSYSAtarist val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSAtarist/#parameters","text":"that: ZipOPSYSAtarist val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAtarist/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSAtarist/#ne","text":"[Source] fun box ne( that: ZipOPSYSAtarist val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSAtarist/#parameters_1","text":"that: ZipOPSYSAtarist val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSAtarist/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSBeos/","text":"ZipOPSYSBeos \u00b6 [Source] primitive val ZipOPSYSBeos Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSBeos val^ Returns \u00b6 ZipOPSYSBeos val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSBeos val) : Bool val Parameters \u00b6 that: ZipOPSYSBeos val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSBeos val) : Bool val Parameters \u00b6 that: ZipOPSYSBeos val Returns \u00b6 Bool val","title":"primitive ZipOPSYSBeos"},{"location":"ponyzip-ZipOPSYSBeos/#zipopsysbeos","text":"[Source] primitive val ZipOPSYSBeos","title":"ZipOPSYSBeos"},{"location":"ponyzip-ZipOPSYSBeos/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSBeos/#create","text":"[Source] new val create() : ZipOPSYSBeos val^","title":"create"},{"location":"ponyzip-ZipOPSYSBeos/#returns","text":"ZipOPSYSBeos val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSBeos/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSBeos/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSBeos/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSBeos/#eq","text":"[Source] fun box eq( that: ZipOPSYSBeos val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSBeos/#parameters","text":"that: ZipOPSYSBeos val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSBeos/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSBeos/#ne","text":"[Source] fun box ne( that: ZipOPSYSBeos val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSBeos/#parameters_1","text":"that: ZipOPSYSBeos val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSBeos/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSCpm/","text":"ZipOPSYSCpm \u00b6 [Source] primitive val ZipOPSYSCpm Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSCpm val^ Returns \u00b6 ZipOPSYSCpm val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSCpm val) : Bool val Parameters \u00b6 that: ZipOPSYSCpm val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSCpm val) : Bool val Parameters \u00b6 that: ZipOPSYSCpm val Returns \u00b6 Bool val","title":"primitive ZipOPSYSCpm"},{"location":"ponyzip-ZipOPSYSCpm/#zipopsyscpm","text":"[Source] primitive val ZipOPSYSCpm","title":"ZipOPSYSCpm"},{"location":"ponyzip-ZipOPSYSCpm/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSCpm/#create","text":"[Source] new val create() : ZipOPSYSCpm val^","title":"create"},{"location":"ponyzip-ZipOPSYSCpm/#returns","text":"ZipOPSYSCpm val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSCpm/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSCpm/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSCpm/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSCpm/#eq","text":"[Source] fun box eq( that: ZipOPSYSCpm val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSCpm/#parameters","text":"that: ZipOPSYSCpm val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSCpm/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSCpm/#ne","text":"[Source] fun box ne( that: ZipOPSYSCpm val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSCpm/#parameters_1","text":"that: ZipOPSYSCpm val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSCpm/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSDefault/","text":"ZipOPSYSDefault \u00b6 [Source] type ZipOPSYSDefault is ZipOPSYSUnix val Type Alias For \u00b6 ZipOPSYSUnix val","title":"type ZipOPSYSDefault"},{"location":"ponyzip-ZipOPSYSDefault/#zipopsysdefault","text":"[Source] type ZipOPSYSDefault is ZipOPSYSUnix val","title":"ZipOPSYSDefault"},{"location":"ponyzip-ZipOPSYSDefault/#type-alias-for","text":"ZipOPSYSUnix val","title":"Type Alias For"},{"location":"ponyzip-ZipOPSYSDos/","text":"ZipOPSYSDos \u00b6 [Source] primitive val ZipOPSYSDos Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSDos val^ Returns \u00b6 ZipOPSYSDos val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSDos val) : Bool val Parameters \u00b6 that: ZipOPSYSDos val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSDos val) : Bool val Parameters \u00b6 that: ZipOPSYSDos val Returns \u00b6 Bool val","title":"primitive ZipOPSYSDos"},{"location":"ponyzip-ZipOPSYSDos/#zipopsysdos","text":"[Source] primitive val ZipOPSYSDos","title":"ZipOPSYSDos"},{"location":"ponyzip-ZipOPSYSDos/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSDos/#create","text":"[Source] new val create() : ZipOPSYSDos val^","title":"create"},{"location":"ponyzip-ZipOPSYSDos/#returns","text":"ZipOPSYSDos val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSDos/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSDos/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSDos/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSDos/#eq","text":"[Source] fun box eq( that: ZipOPSYSDos val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSDos/#parameters","text":"that: ZipOPSYSDos val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSDos/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSDos/#ne","text":"[Source] fun box ne( that: ZipOPSYSDos val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSDos/#parameters_1","text":"that: ZipOPSYSDos val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSDos/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMacintosh/","text":"ZipOPSYSMacintosh \u00b6 [Source] primitive val ZipOPSYSMacintosh Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSMacintosh val^ Returns \u00b6 ZipOPSYSMacintosh val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSMacintosh val) : Bool val Parameters \u00b6 that: ZipOPSYSMacintosh val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSMacintosh val) : Bool val Parameters \u00b6 that: ZipOPSYSMacintosh val Returns \u00b6 Bool val","title":"primitive ZipOPSYSMacintosh"},{"location":"ponyzip-ZipOPSYSMacintosh/#zipopsysmacintosh","text":"[Source] primitive val ZipOPSYSMacintosh","title":"ZipOPSYSMacintosh"},{"location":"ponyzip-ZipOPSYSMacintosh/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSMacintosh/#create","text":"[Source] new val create() : ZipOPSYSMacintosh val^","title":"create"},{"location":"ponyzip-ZipOPSYSMacintosh/#returns","text":"ZipOPSYSMacintosh val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSMacintosh/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSMacintosh/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSMacintosh/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMacintosh/#eq","text":"[Source] fun box eq( that: ZipOPSYSMacintosh val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSMacintosh/#parameters","text":"that: ZipOPSYSMacintosh val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSMacintosh/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMacintosh/#ne","text":"[Source] fun box ne( that: ZipOPSYSMacintosh val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSMacintosh/#parameters_1","text":"that: ZipOPSYSMacintosh val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSMacintosh/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMvs/","text":"ZipOPSYSMvs \u00b6 [Source] primitive val ZipOPSYSMvs Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSMvs val^ Returns \u00b6 ZipOPSYSMvs val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSMvs val) : Bool val Parameters \u00b6 that: ZipOPSYSMvs val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSMvs val) : Bool val Parameters \u00b6 that: ZipOPSYSMvs val Returns \u00b6 Bool val","title":"primitive ZipOPSYSMvs"},{"location":"ponyzip-ZipOPSYSMvs/#zipopsysmvs","text":"[Source] primitive val ZipOPSYSMvs","title":"ZipOPSYSMvs"},{"location":"ponyzip-ZipOPSYSMvs/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSMvs/#create","text":"[Source] new val create() : ZipOPSYSMvs val^","title":"create"},{"location":"ponyzip-ZipOPSYSMvs/#returns","text":"ZipOPSYSMvs val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSMvs/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSMvs/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSMvs/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMvs/#eq","text":"[Source] fun box eq( that: ZipOPSYSMvs val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSMvs/#parameters","text":"that: ZipOPSYSMvs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSMvs/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSMvs/#ne","text":"[Source] fun box ne( that: ZipOPSYSMvs val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSMvs/#parameters_1","text":"that: ZipOPSYSMvs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSMvs/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOpenvms/","text":"ZipOPSYSOpenvms \u00b6 [Source] primitive val ZipOPSYSOpenvms Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSOpenvms val^ Returns \u00b6 ZipOPSYSOpenvms val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSOpenvms val) : Bool val Parameters \u00b6 that: ZipOPSYSOpenvms val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSOpenvms val) : Bool val Parameters \u00b6 that: ZipOPSYSOpenvms val Returns \u00b6 Bool val","title":"primitive ZipOPSYSOpenvms"},{"location":"ponyzip-ZipOPSYSOpenvms/#zipopsysopenvms","text":"[Source] primitive val ZipOPSYSOpenvms","title":"ZipOPSYSOpenvms"},{"location":"ponyzip-ZipOPSYSOpenvms/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSOpenvms/#create","text":"[Source] new val create() : ZipOPSYSOpenvms val^","title":"create"},{"location":"ponyzip-ZipOPSYSOpenvms/#returns","text":"ZipOPSYSOpenvms val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSOpenvms/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSOpenvms/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSOpenvms/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOpenvms/#eq","text":"[Source] fun box eq( that: ZipOPSYSOpenvms val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSOpenvms/#parameters","text":"that: ZipOPSYSOpenvms val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOpenvms/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOpenvms/#ne","text":"[Source] fun box ne( that: ZipOPSYSOpenvms val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSOpenvms/#parameters_1","text":"that: ZipOPSYSOpenvms val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOpenvms/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs2/","text":"ZipOPSYSOs2 \u00b6 [Source] primitive val ZipOPSYSOs2 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSOs2 val^ Returns \u00b6 ZipOPSYSOs2 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSOs2 val) : Bool val Parameters \u00b6 that: ZipOPSYSOs2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSOs2 val) : Bool val Parameters \u00b6 that: ZipOPSYSOs2 val Returns \u00b6 Bool val","title":"primitive ZipOPSYSOs2"},{"location":"ponyzip-ZipOPSYSOs2/#zipopsysos2","text":"[Source] primitive val ZipOPSYSOs2","title":"ZipOPSYSOs2"},{"location":"ponyzip-ZipOPSYSOs2/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSOs2/#create","text":"[Source] new val create() : ZipOPSYSOs2 val^","title":"create"},{"location":"ponyzip-ZipOPSYSOs2/#returns","text":"ZipOPSYSOs2 val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs2/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSOs2/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSOs2/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs2/#eq","text":"[Source] fun box eq( that: ZipOPSYSOs2 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSOs2/#parameters","text":"that: ZipOPSYSOs2 val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOs2/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs2/#ne","text":"[Source] fun box ne( that: ZipOPSYSOs2 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSOs2/#parameters_1","text":"that: ZipOPSYSOs2 val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOs2/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs400/","text":"ZipOPSYSOs400 \u00b6 [Source] primitive val ZipOPSYSOs400 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSOs400 val^ Returns \u00b6 ZipOPSYSOs400 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSOs400 val) : Bool val Parameters \u00b6 that: ZipOPSYSOs400 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSOs400 val) : Bool val Parameters \u00b6 that: ZipOPSYSOs400 val Returns \u00b6 Bool val","title":"primitive ZipOPSYSOs400"},{"location":"ponyzip-ZipOPSYSOs400/#zipopsysos400","text":"[Source] primitive val ZipOPSYSOs400","title":"ZipOPSYSOs400"},{"location":"ponyzip-ZipOPSYSOs400/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSOs400/#create","text":"[Source] new val create() : ZipOPSYSOs400 val^","title":"create"},{"location":"ponyzip-ZipOPSYSOs400/#returns","text":"ZipOPSYSOs400 val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs400/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSOs400/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSOs400/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs400/#eq","text":"[Source] fun box eq( that: ZipOPSYSOs400 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSOs400/#parameters","text":"that: ZipOPSYSOs400 val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOs400/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOs400/#ne","text":"[Source] fun box ne( that: ZipOPSYSOs400 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSOs400/#parameters_1","text":"that: ZipOPSYSOs400 val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOs400/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOsx/","text":"ZipOPSYSOsx \u00b6 [Source] primitive val ZipOPSYSOsx Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSOsx val^ Returns \u00b6 ZipOPSYSOsx val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSOsx val) : Bool val Parameters \u00b6 that: ZipOPSYSOsx val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSOsx val) : Bool val Parameters \u00b6 that: ZipOPSYSOsx val Returns \u00b6 Bool val","title":"primitive ZipOPSYSOsx"},{"location":"ponyzip-ZipOPSYSOsx/#zipopsysosx","text":"[Source] primitive val ZipOPSYSOsx","title":"ZipOPSYSOsx"},{"location":"ponyzip-ZipOPSYSOsx/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSOsx/#create","text":"[Source] new val create() : ZipOPSYSOsx val^","title":"create"},{"location":"ponyzip-ZipOPSYSOsx/#returns","text":"ZipOPSYSOsx val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSOsx/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSOsx/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSOsx/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOsx/#eq","text":"[Source] fun box eq( that: ZipOPSYSOsx val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSOsx/#parameters","text":"that: ZipOPSYSOsx val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOsx/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSOsx/#ne","text":"[Source] fun box ne( that: ZipOPSYSOsx val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSOsx/#parameters_1","text":"that: ZipOPSYSOsx val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSOsx/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSTandem/","text":"ZipOPSYSTandem \u00b6 [Source] primitive val ZipOPSYSTandem Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSTandem val^ Returns \u00b6 ZipOPSYSTandem val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSTandem val) : Bool val Parameters \u00b6 that: ZipOPSYSTandem val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSTandem val) : Bool val Parameters \u00b6 that: ZipOPSYSTandem val Returns \u00b6 Bool val","title":"primitive ZipOPSYSTandem"},{"location":"ponyzip-ZipOPSYSTandem/#zipopsystandem","text":"[Source] primitive val ZipOPSYSTandem","title":"ZipOPSYSTandem"},{"location":"ponyzip-ZipOPSYSTandem/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSTandem/#create","text":"[Source] new val create() : ZipOPSYSTandem val^","title":"create"},{"location":"ponyzip-ZipOPSYSTandem/#returns","text":"ZipOPSYSTandem val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSTandem/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSTandem/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSTandem/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSTandem/#eq","text":"[Source] fun box eq( that: ZipOPSYSTandem val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSTandem/#parameters","text":"that: ZipOPSYSTandem val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSTandem/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSTandem/#ne","text":"[Source] fun box ne( that: ZipOPSYSTandem val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSTandem/#parameters_1","text":"that: ZipOPSYSTandem val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSTandem/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSUnix/","text":"ZipOPSYSUnix \u00b6 [Source] primitive val ZipOPSYSUnix Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSUnix val^ Returns \u00b6 ZipOPSYSUnix val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSUnix val) : Bool val Parameters \u00b6 that: ZipOPSYSUnix val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSUnix val) : Bool val Parameters \u00b6 that: ZipOPSYSUnix val Returns \u00b6 Bool val","title":"primitive ZipOPSYSUnix"},{"location":"ponyzip-ZipOPSYSUnix/#zipopsysunix","text":"[Source] primitive val ZipOPSYSUnix","title":"ZipOPSYSUnix"},{"location":"ponyzip-ZipOPSYSUnix/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSUnix/#create","text":"[Source] new val create() : ZipOPSYSUnix val^","title":"create"},{"location":"ponyzip-ZipOPSYSUnix/#returns","text":"ZipOPSYSUnix val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSUnix/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSUnix/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSUnix/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSUnix/#eq","text":"[Source] fun box eq( that: ZipOPSYSUnix val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSUnix/#parameters","text":"that: ZipOPSYSUnix val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSUnix/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSUnix/#ne","text":"[Source] fun box ne( that: ZipOPSYSUnix val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSUnix/#parameters_1","text":"that: ZipOPSYSUnix val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSUnix/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVfat/","text":"ZipOPSYSVfat \u00b6 [Source] primitive val ZipOPSYSVfat Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSVfat val^ Returns \u00b6 ZipOPSYSVfat val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSVfat val) : Bool val Parameters \u00b6 that: ZipOPSYSVfat val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSVfat val) : Bool val Parameters \u00b6 that: ZipOPSYSVfat val Returns \u00b6 Bool val","title":"primitive ZipOPSYSVfat"},{"location":"ponyzip-ZipOPSYSVfat/#zipopsysvfat","text":"[Source] primitive val ZipOPSYSVfat","title":"ZipOPSYSVfat"},{"location":"ponyzip-ZipOPSYSVfat/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSVfat/#create","text":"[Source] new val create() : ZipOPSYSVfat val^","title":"create"},{"location":"ponyzip-ZipOPSYSVfat/#returns","text":"ZipOPSYSVfat val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSVfat/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSVfat/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSVfat/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVfat/#eq","text":"[Source] fun box eq( that: ZipOPSYSVfat val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSVfat/#parameters","text":"that: ZipOPSYSVfat val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVfat/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVfat/#ne","text":"[Source] fun box ne( that: ZipOPSYSVfat val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSVfat/#parameters_1","text":"that: ZipOPSYSVfat val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVfat/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVmcms/","text":"ZipOPSYSVmcms \u00b6 [Source] primitive val ZipOPSYSVmcms Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSVmcms val^ Returns \u00b6 ZipOPSYSVmcms val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSVmcms val) : Bool val Parameters \u00b6 that: ZipOPSYSVmcms val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSVmcms val) : Bool val Parameters \u00b6 that: ZipOPSYSVmcms val Returns \u00b6 Bool val","title":"primitive ZipOPSYSVmcms"},{"location":"ponyzip-ZipOPSYSVmcms/#zipopsysvmcms","text":"[Source] primitive val ZipOPSYSVmcms","title":"ZipOPSYSVmcms"},{"location":"ponyzip-ZipOPSYSVmcms/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSVmcms/#create","text":"[Source] new val create() : ZipOPSYSVmcms val^","title":"create"},{"location":"ponyzip-ZipOPSYSVmcms/#returns","text":"ZipOPSYSVmcms val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSVmcms/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSVmcms/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSVmcms/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVmcms/#eq","text":"[Source] fun box eq( that: ZipOPSYSVmcms val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSVmcms/#parameters","text":"that: ZipOPSYSVmcms val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVmcms/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVmcms/#ne","text":"[Source] fun box ne( that: ZipOPSYSVmcms val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSVmcms/#parameters_1","text":"that: ZipOPSYSVmcms val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVmcms/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVse/","text":"ZipOPSYSVse \u00b6 [Source] primitive val ZipOPSYSVse Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSVse val^ Returns \u00b6 ZipOPSYSVse val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSVse val) : Bool val Parameters \u00b6 that: ZipOPSYSVse val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSVse val) : Bool val Parameters \u00b6 that: ZipOPSYSVse val Returns \u00b6 Bool val","title":"primitive ZipOPSYSVse"},{"location":"ponyzip-ZipOPSYSVse/#zipopsysvse","text":"[Source] primitive val ZipOPSYSVse","title":"ZipOPSYSVse"},{"location":"ponyzip-ZipOPSYSVse/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSVse/#create","text":"[Source] new val create() : ZipOPSYSVse val^","title":"create"},{"location":"ponyzip-ZipOPSYSVse/#returns","text":"ZipOPSYSVse val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSVse/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSVse/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSVse/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVse/#eq","text":"[Source] fun box eq( that: ZipOPSYSVse val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSVse/#parameters","text":"that: ZipOPSYSVse val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVse/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSVse/#ne","text":"[Source] fun box ne( that: ZipOPSYSVse val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSVse/#parameters_1","text":"that: ZipOPSYSVse val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSVse/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSWindowsntfs/","text":"ZipOPSYSWindowsntfs \u00b6 [Source] primitive val ZipOPSYSWindowsntfs Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSWindowsntfs val^ Returns \u00b6 ZipOPSYSWindowsntfs val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSWindowsntfs val) : Bool val Parameters \u00b6 that: ZipOPSYSWindowsntfs val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSWindowsntfs val) : Bool val Parameters \u00b6 that: ZipOPSYSWindowsntfs val Returns \u00b6 Bool val","title":"primitive ZipOPSYSWindowsntfs"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#zipopsyswindowsntfs","text":"[Source] primitive val ZipOPSYSWindowsntfs","title":"ZipOPSYSWindowsntfs"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#create","text":"[Source] new val create() : ZipOPSYSWindowsntfs val^","title":"create"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#returns","text":"ZipOPSYSWindowsntfs val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#eq","text":"[Source] fun box eq( that: ZipOPSYSWindowsntfs val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#parameters","text":"that: ZipOPSYSWindowsntfs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#ne","text":"[Source] fun box ne( that: ZipOPSYSWindowsntfs val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#parameters_1","text":"that: ZipOPSYSWindowsntfs val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSWindowsntfs/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSZsystem/","text":"ZipOPSYSZsystem \u00b6 [Source] primitive val ZipOPSYSZsystem Constructors \u00b6 create \u00b6 [Source] new val create() : ZipOPSYSZsystem val^ Returns \u00b6 ZipOPSYSZsystem val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U8 val Returns \u00b6 U8 val eq \u00b6 [Source] fun box eq( that: ZipOPSYSZsystem val) : Bool val Parameters \u00b6 that: ZipOPSYSZsystem val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipOPSYSZsystem val) : Bool val Parameters \u00b6 that: ZipOPSYSZsystem val Returns \u00b6 Bool val","title":"primitive ZipOPSYSZsystem"},{"location":"ponyzip-ZipOPSYSZsystem/#zipopsyszsystem","text":"[Source] primitive val ZipOPSYSZsystem","title":"ZipOPSYSZsystem"},{"location":"ponyzip-ZipOPSYSZsystem/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipOPSYSZsystem/#create","text":"[Source] new val create() : ZipOPSYSZsystem val^","title":"create"},{"location":"ponyzip-ZipOPSYSZsystem/#returns","text":"ZipOPSYSZsystem val^","title":"Returns"},{"location":"ponyzip-ZipOPSYSZsystem/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipOPSYSZsystem/#apply","text":"[Source] fun box apply() : U8 val","title":"apply"},{"location":"ponyzip-ZipOPSYSZsystem/#returns_1","text":"U8 val","title":"Returns"},{"location":"ponyzip-ZipOPSYSZsystem/#eq","text":"[Source] fun box eq( that: ZipOPSYSZsystem val) : Bool val","title":"eq"},{"location":"ponyzip-ZipOPSYSZsystem/#parameters","text":"that: ZipOPSYSZsystem val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSZsystem/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipOPSYSZsystem/#ne","text":"[Source] fun box ne( that: ZipOPSYSZsystem val) : Bool val","title":"ne"},{"location":"ponyzip-ZipOPSYSZsystem/#parameters_1","text":"that: ZipOPSYSZsystem val","title":"Parameters"},{"location":"ponyzip-ZipOPSYSZsystem/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipRDOnly/","text":"ZipRDOnly \u00b6 [Source] primitive val ZipRDOnly Constructors \u00b6 create \u00b6 [Source] new val create() : ZipRDOnly val^ Returns \u00b6 ZipRDOnly val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipRDOnly val) : Bool val Parameters \u00b6 that: ZipRDOnly val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipRDOnly val) : Bool val Parameters \u00b6 that: ZipRDOnly val Returns \u00b6 Bool val","title":"primitive ZipRDOnly"},{"location":"ponyzip-ZipRDOnly/#ziprdonly","text":"[Source] primitive val ZipRDOnly","title":"ZipRDOnly"},{"location":"ponyzip-ZipRDOnly/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipRDOnly/#create","text":"[Source] new val create() : ZipRDOnly val^","title":"create"},{"location":"ponyzip-ZipRDOnly/#returns","text":"ZipRDOnly val^","title":"Returns"},{"location":"ponyzip-ZipRDOnly/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipRDOnly/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipRDOnly/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipRDOnly/#eq","text":"[Source] fun box eq( that: ZipRDOnly val) : Bool val","title":"eq"},{"location":"ponyzip-ZipRDOnly/#parameters","text":"that: ZipRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipRDOnly/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipRDOnly/#ne","text":"[Source] fun box ne( that: ZipRDOnly val) : Bool val","title":"ne"},{"location":"ponyzip-ZipRDOnly/#parameters_1","text":"that: ZipRDOnly val","title":"Parameters"},{"location":"ponyzip-ZipRDOnly/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/","text":"ZipSOURCEAcceptEmpty \u00b6 [Source] primitive val ZipSOURCEAcceptEmpty Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEAcceptEmpty val^ Returns \u00b6 ZipSOURCEAcceptEmpty val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEAcceptEmpty val) : Bool val Parameters \u00b6 that: ZipSOURCEAcceptEmpty val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEAcceptEmpty val) : Bool val Parameters \u00b6 that: ZipSOURCEAcceptEmpty val Returns \u00b6 Bool val","title":"primitive ZipSOURCEAcceptEmpty"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#zipsourceacceptempty","text":"[Source] primitive val ZipSOURCEAcceptEmpty","title":"ZipSOURCEAcceptEmpty"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#create","text":"[Source] new val create() : ZipSOURCEAcceptEmpty val^","title":"create"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#returns","text":"ZipSOURCEAcceptEmpty val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#eq","text":"[Source] fun box eq( that: ZipSOURCEAcceptEmpty val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#parameters","text":"that: ZipSOURCEAcceptEmpty val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#ne","text":"[Source] fun box ne( that: ZipSOURCEAcceptEmpty val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#parameters_1","text":"that: ZipSOURCEAcceptEmpty val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEAcceptEmpty/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWrite/","text":"ZipSOURCEBeginWrite \u00b6 [Source] primitive val ZipSOURCEBeginWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEBeginWrite val^ Returns \u00b6 ZipSOURCEBeginWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEBeginWrite val) : Bool val Parameters \u00b6 that: ZipSOURCEBeginWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEBeginWrite val) : Bool val Parameters \u00b6 that: ZipSOURCEBeginWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCEBeginWrite"},{"location":"ponyzip-ZipSOURCEBeginWrite/#zipsourcebeginwrite","text":"[Source] primitive val ZipSOURCEBeginWrite","title":"ZipSOURCEBeginWrite"},{"location":"ponyzip-ZipSOURCEBeginWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEBeginWrite/#create","text":"[Source] new val create() : ZipSOURCEBeginWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCEBeginWrite/#returns","text":"ZipSOURCEBeginWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEBeginWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEBeginWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCEBeginWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEBeginWrite/#parameters","text":"that: ZipSOURCEBeginWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEBeginWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCEBeginWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEBeginWrite/#parameters_1","text":"that: ZipSOURCEBeginWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEBeginWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/","text":"ZipSOURCEBeginWriteCloning \u00b6 [Source] primitive val ZipSOURCEBeginWriteCloning Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEBeginWriteCloning val^ Returns \u00b6 ZipSOURCEBeginWriteCloning val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEBeginWriteCloning val) : Bool val Parameters \u00b6 that: ZipSOURCEBeginWriteCloning val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEBeginWriteCloning val) : Bool val Parameters \u00b6 that: ZipSOURCEBeginWriteCloning val Returns \u00b6 Bool val","title":"primitive ZipSOURCEBeginWriteCloning"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#zipsourcebeginwritecloning","text":"[Source] primitive val ZipSOURCEBeginWriteCloning","title":"ZipSOURCEBeginWriteCloning"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#create","text":"[Source] new val create() : ZipSOURCEBeginWriteCloning val^","title":"create"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#returns","text":"ZipSOURCEBeginWriteCloning val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#eq","text":"[Source] fun box eq( that: ZipSOURCEBeginWriteCloning val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#parameters","text":"that: ZipSOURCEBeginWriteCloning val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#ne","text":"[Source] fun box ne( that: ZipSOURCEBeginWriteCloning val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#parameters_1","text":"that: ZipSOURCEBeginWriteCloning val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEBeginWriteCloning/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEClose/","text":"ZipSOURCEClose \u00b6 [Source] primitive val ZipSOURCEClose Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEClose val^ Returns \u00b6 ZipSOURCEClose val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEClose val) : Bool val Parameters \u00b6 that: ZipSOURCEClose val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEClose val) : Bool val Parameters \u00b6 that: ZipSOURCEClose val Returns \u00b6 Bool val","title":"primitive ZipSOURCEClose"},{"location":"ponyzip-ZipSOURCEClose/#zipsourceclose","text":"[Source] primitive val ZipSOURCEClose","title":"ZipSOURCEClose"},{"location":"ponyzip-ZipSOURCEClose/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEClose/#create","text":"[Source] new val create() : ZipSOURCEClose val^","title":"create"},{"location":"ponyzip-ZipSOURCEClose/#returns","text":"ZipSOURCEClose val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEClose/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEClose/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEClose/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEClose/#eq","text":"[Source] fun box eq( that: ZipSOURCEClose val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEClose/#parameters","text":"that: ZipSOURCEClose val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEClose/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEClose/#ne","text":"[Source] fun box ne( that: ZipSOURCEClose val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEClose/#parameters_1","text":"that: ZipSOURCEClose val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEClose/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCECommitWrite/","text":"ZipSOURCECommitWrite \u00b6 [Source] primitive val ZipSOURCECommitWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCECommitWrite val^ Returns \u00b6 ZipSOURCECommitWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCECommitWrite val) : Bool val Parameters \u00b6 that: ZipSOURCECommitWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCECommitWrite val) : Bool val Parameters \u00b6 that: ZipSOURCECommitWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCECommitWrite"},{"location":"ponyzip-ZipSOURCECommitWrite/#zipsourcecommitwrite","text":"[Source] primitive val ZipSOURCECommitWrite","title":"ZipSOURCECommitWrite"},{"location":"ponyzip-ZipSOURCECommitWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCECommitWrite/#create","text":"[Source] new val create() : ZipSOURCECommitWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCECommitWrite/#returns","text":"ZipSOURCECommitWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCECommitWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCECommitWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCECommitWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCECommitWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCECommitWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCECommitWrite/#parameters","text":"that: ZipSOURCECommitWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCECommitWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCECommitWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCECommitWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCECommitWrite/#parameters_1","text":"that: ZipSOURCECommitWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCECommitWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEError/","text":"ZipSOURCEError \u00b6 [Source] primitive val ZipSOURCEError Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEError val^ Returns \u00b6 ZipSOURCEError val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEError val) : Bool val Parameters \u00b6 that: ZipSOURCEError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEError val) : Bool val Parameters \u00b6 that: ZipSOURCEError val Returns \u00b6 Bool val","title":"primitive ZipSOURCEError"},{"location":"ponyzip-ZipSOURCEError/#zipsourceerror","text":"[Source] primitive val ZipSOURCEError","title":"ZipSOURCEError"},{"location":"ponyzip-ZipSOURCEError/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEError/#create","text":"[Source] new val create() : ZipSOURCEError val^","title":"create"},{"location":"ponyzip-ZipSOURCEError/#returns","text":"ZipSOURCEError val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEError/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEError/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEError/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEError/#eq","text":"[Source] fun box eq( that: ZipSOURCEError val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEError/#parameters","text":"that: ZipSOURCEError val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEError/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEError/#ne","text":"[Source] fun box ne( that: ZipSOURCEError val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEError/#parameters_1","text":"that: ZipSOURCEError val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEError/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEFree/","text":"ZipSOURCEFree \u00b6 [Source] primitive val ZipSOURCEFree Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEFree val^ Returns \u00b6 ZipSOURCEFree val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEFree val) : Bool val Parameters \u00b6 that: ZipSOURCEFree val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEFree val) : Bool val Parameters \u00b6 that: ZipSOURCEFree val Returns \u00b6 Bool val","title":"primitive ZipSOURCEFree"},{"location":"ponyzip-ZipSOURCEFree/#zipsourcefree","text":"[Source] primitive val ZipSOURCEFree","title":"ZipSOURCEFree"},{"location":"ponyzip-ZipSOURCEFree/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEFree/#create","text":"[Source] new val create() : ZipSOURCEFree val^","title":"create"},{"location":"ponyzip-ZipSOURCEFree/#returns","text":"ZipSOURCEFree val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEFree/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEFree/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEFree/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEFree/#eq","text":"[Source] fun box eq( that: ZipSOURCEFree val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEFree/#parameters","text":"that: ZipSOURCEFree val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEFree/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEFree/#ne","text":"[Source] fun box ne( that: ZipSOURCEFree val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEFree/#parameters_1","text":"that: ZipSOURCEFree val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEFree/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/","text":"ZipSOURCEGetFileAttributes \u00b6 [Source] primitive val ZipSOURCEGetFileAttributes Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEGetFileAttributes val^ Returns \u00b6 ZipSOURCEGetFileAttributes val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEGetFileAttributes val) : Bool val Parameters \u00b6 that: ZipSOURCEGetFileAttributes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEGetFileAttributes val) : Bool val Parameters \u00b6 that: ZipSOURCEGetFileAttributes val Returns \u00b6 Bool val","title":"primitive ZipSOURCEGetFileAttributes"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#zipsourcegetfileattributes","text":"[Source] primitive val ZipSOURCEGetFileAttributes","title":"ZipSOURCEGetFileAttributes"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#create","text":"[Source] new val create() : ZipSOURCEGetFileAttributes val^","title":"create"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#returns","text":"ZipSOURCEGetFileAttributes val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#eq","text":"[Source] fun box eq( that: ZipSOURCEGetFileAttributes val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#parameters","text":"that: ZipSOURCEGetFileAttributes val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#ne","text":"[Source] fun box ne( that: ZipSOURCEGetFileAttributes val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#parameters_1","text":"that: ZipSOURCEGetFileAttributes val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEGetFileAttributes/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEOpen/","text":"ZipSOURCEOpen \u00b6 [Source] primitive val ZipSOURCEOpen Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEOpen val^ Returns \u00b6 ZipSOURCEOpen val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEOpen val) : Bool val Parameters \u00b6 that: ZipSOURCEOpen val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEOpen val) : Bool val Parameters \u00b6 that: ZipSOURCEOpen val Returns \u00b6 Bool val","title":"primitive ZipSOURCEOpen"},{"location":"ponyzip-ZipSOURCEOpen/#zipsourceopen","text":"[Source] primitive val ZipSOURCEOpen","title":"ZipSOURCEOpen"},{"location":"ponyzip-ZipSOURCEOpen/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEOpen/#create","text":"[Source] new val create() : ZipSOURCEOpen val^","title":"create"},{"location":"ponyzip-ZipSOURCEOpen/#returns","text":"ZipSOURCEOpen val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEOpen/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEOpen/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEOpen/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEOpen/#eq","text":"[Source] fun box eq( that: ZipSOURCEOpen val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEOpen/#parameters","text":"that: ZipSOURCEOpen val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEOpen/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEOpen/#ne","text":"[Source] fun box ne( that: ZipSOURCEOpen val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEOpen/#parameters_1","text":"that: ZipSOURCEOpen val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEOpen/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERead/","text":"ZipSOURCERead \u00b6 [Source] primitive val ZipSOURCERead Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCERead val^ Returns \u00b6 ZipSOURCERead val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCERead val) : Bool val Parameters \u00b6 that: ZipSOURCERead val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCERead val) : Bool val Parameters \u00b6 that: ZipSOURCERead val Returns \u00b6 Bool val","title":"primitive ZipSOURCERead"},{"location":"ponyzip-ZipSOURCERead/#zipsourceread","text":"[Source] primitive val ZipSOURCERead","title":"ZipSOURCERead"},{"location":"ponyzip-ZipSOURCERead/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCERead/#create","text":"[Source] new val create() : ZipSOURCERead val^","title":"create"},{"location":"ponyzip-ZipSOURCERead/#returns","text":"ZipSOURCERead val^","title":"Returns"},{"location":"ponyzip-ZipSOURCERead/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCERead/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCERead/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCERead/#eq","text":"[Source] fun box eq( that: ZipSOURCERead val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCERead/#parameters","text":"that: ZipSOURCERead val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERead/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERead/#ne","text":"[Source] fun box ne( that: ZipSOURCERead val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCERead/#parameters_1","text":"that: ZipSOURCERead val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERead/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERemove/","text":"ZipSOURCERemove \u00b6 [Source] primitive val ZipSOURCERemove Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCERemove val^ Returns \u00b6 ZipSOURCERemove val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCERemove val) : Bool val Parameters \u00b6 that: ZipSOURCERemove val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCERemove val) : Bool val Parameters \u00b6 that: ZipSOURCERemove val Returns \u00b6 Bool val","title":"primitive ZipSOURCERemove"},{"location":"ponyzip-ZipSOURCERemove/#zipsourceremove","text":"[Source] primitive val ZipSOURCERemove","title":"ZipSOURCERemove"},{"location":"ponyzip-ZipSOURCERemove/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCERemove/#create","text":"[Source] new val create() : ZipSOURCERemove val^","title":"create"},{"location":"ponyzip-ZipSOURCERemove/#returns","text":"ZipSOURCERemove val^","title":"Returns"},{"location":"ponyzip-ZipSOURCERemove/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCERemove/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCERemove/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCERemove/#eq","text":"[Source] fun box eq( that: ZipSOURCERemove val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCERemove/#parameters","text":"that: ZipSOURCERemove val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERemove/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERemove/#ne","text":"[Source] fun box ne( that: ZipSOURCERemove val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCERemove/#parameters_1","text":"that: ZipSOURCERemove val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERemove/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEReserved1/","text":"ZipSOURCEReserved1 \u00b6 [Source] primitive val ZipSOURCEReserved1 Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEReserved1 val^ Returns \u00b6 ZipSOURCEReserved1 val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEReserved1 val) : Bool val Parameters \u00b6 that: ZipSOURCEReserved1 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEReserved1 val) : Bool val Parameters \u00b6 that: ZipSOURCEReserved1 val Returns \u00b6 Bool val","title":"primitive ZipSOURCEReserved1"},{"location":"ponyzip-ZipSOURCEReserved1/#zipsourcereserved1","text":"[Source] primitive val ZipSOURCEReserved1","title":"ZipSOURCEReserved1"},{"location":"ponyzip-ZipSOURCEReserved1/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEReserved1/#create","text":"[Source] new val create() : ZipSOURCEReserved1 val^","title":"create"},{"location":"ponyzip-ZipSOURCEReserved1/#returns","text":"ZipSOURCEReserved1 val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEReserved1/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEReserved1/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEReserved1/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEReserved1/#eq","text":"[Source] fun box eq( that: ZipSOURCEReserved1 val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEReserved1/#parameters","text":"that: ZipSOURCEReserved1 val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEReserved1/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEReserved1/#ne","text":"[Source] fun box ne( that: ZipSOURCEReserved1 val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEReserved1/#parameters_1","text":"that: ZipSOURCEReserved1 val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEReserved1/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERollbackWrite/","text":"ZipSOURCERollbackWrite \u00b6 [Source] primitive val ZipSOURCERollbackWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCERollbackWrite val^ Returns \u00b6 ZipSOURCERollbackWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCERollbackWrite val) : Bool val Parameters \u00b6 that: ZipSOURCERollbackWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCERollbackWrite val) : Bool val Parameters \u00b6 that: ZipSOURCERollbackWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCERollbackWrite"},{"location":"ponyzip-ZipSOURCERollbackWrite/#zipsourcerollbackwrite","text":"[Source] primitive val ZipSOURCERollbackWrite","title":"ZipSOURCERollbackWrite"},{"location":"ponyzip-ZipSOURCERollbackWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCERollbackWrite/#create","text":"[Source] new val create() : ZipSOURCERollbackWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCERollbackWrite/#returns","text":"ZipSOURCERollbackWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCERollbackWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCERollbackWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCERollbackWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCERollbackWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCERollbackWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCERollbackWrite/#parameters","text":"that: ZipSOURCERollbackWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERollbackWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCERollbackWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCERollbackWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCERollbackWrite/#parameters_1","text":"that: ZipSOURCERollbackWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCERollbackWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeek/","text":"ZipSOURCESeek \u00b6 [Source] primitive val ZipSOURCESeek Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCESeek val^ Returns \u00b6 ZipSOURCESeek val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCESeek val) : Bool val Parameters \u00b6 that: ZipSOURCESeek val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCESeek val) : Bool val Parameters \u00b6 that: ZipSOURCESeek val Returns \u00b6 Bool val","title":"primitive ZipSOURCESeek"},{"location":"ponyzip-ZipSOURCESeek/#zipsourceseek","text":"[Source] primitive val ZipSOURCESeek","title":"ZipSOURCESeek"},{"location":"ponyzip-ZipSOURCESeek/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCESeek/#create","text":"[Source] new val create() : ZipSOURCESeek val^","title":"create"},{"location":"ponyzip-ZipSOURCESeek/#returns","text":"ZipSOURCESeek val^","title":"Returns"},{"location":"ponyzip-ZipSOURCESeek/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCESeek/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCESeek/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeek/#eq","text":"[Source] fun box eq( that: ZipSOURCESeek val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCESeek/#parameters","text":"that: ZipSOURCESeek val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESeek/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeek/#ne","text":"[Source] fun box ne( that: ZipSOURCESeek val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCESeek/#parameters_1","text":"that: ZipSOURCESeek val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESeek/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeekWrite/","text":"ZipSOURCESeekWrite \u00b6 [Source] primitive val ZipSOURCESeekWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCESeekWrite val^ Returns \u00b6 ZipSOURCESeekWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCESeekWrite val) : Bool val Parameters \u00b6 that: ZipSOURCESeekWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCESeekWrite val) : Bool val Parameters \u00b6 that: ZipSOURCESeekWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCESeekWrite"},{"location":"ponyzip-ZipSOURCESeekWrite/#zipsourceseekwrite","text":"[Source] primitive val ZipSOURCESeekWrite","title":"ZipSOURCESeekWrite"},{"location":"ponyzip-ZipSOURCESeekWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCESeekWrite/#create","text":"[Source] new val create() : ZipSOURCESeekWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCESeekWrite/#returns","text":"ZipSOURCESeekWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCESeekWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCESeekWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCESeekWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeekWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCESeekWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCESeekWrite/#parameters","text":"that: ZipSOURCESeekWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESeekWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESeekWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCESeekWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCESeekWrite/#parameters_1","text":"that: ZipSOURCESeekWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESeekWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEStat/","text":"ZipSOURCEStat \u00b6 [Source] primitive val ZipSOURCEStat Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEStat val^ Returns \u00b6 ZipSOURCEStat val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEStat val) : Bool val Parameters \u00b6 that: ZipSOURCEStat val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEStat val) : Bool val Parameters \u00b6 that: ZipSOURCEStat val Returns \u00b6 Bool val","title":"primitive ZipSOURCEStat"},{"location":"ponyzip-ZipSOURCEStat/#zipsourcestat","text":"[Source] primitive val ZipSOURCEStat","title":"ZipSOURCEStat"},{"location":"ponyzip-ZipSOURCEStat/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEStat/#create","text":"[Source] new val create() : ZipSOURCEStat val^","title":"create"},{"location":"ponyzip-ZipSOURCEStat/#returns","text":"ZipSOURCEStat val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEStat/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEStat/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEStat/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEStat/#eq","text":"[Source] fun box eq( that: ZipSOURCEStat val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEStat/#parameters","text":"that: ZipSOURCEStat val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEStat/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEStat/#ne","text":"[Source] fun box ne( that: ZipSOURCEStat val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEStat/#parameters_1","text":"that: ZipSOURCEStat val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEStat/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESupports/","text":"ZipSOURCESupports \u00b6 [Source] primitive val ZipSOURCESupports Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCESupports val^ Returns \u00b6 ZipSOURCESupports val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCESupports val) : Bool val Parameters \u00b6 that: ZipSOURCESupports val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCESupports val) : Bool val Parameters \u00b6 that: ZipSOURCESupports val Returns \u00b6 Bool val","title":"primitive ZipSOURCESupports"},{"location":"ponyzip-ZipSOURCESupports/#zipsourcesupports","text":"[Source] primitive val ZipSOURCESupports","title":"ZipSOURCESupports"},{"location":"ponyzip-ZipSOURCESupports/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCESupports/#create","text":"[Source] new val create() : ZipSOURCESupports val^","title":"create"},{"location":"ponyzip-ZipSOURCESupports/#returns","text":"ZipSOURCESupports val^","title":"Returns"},{"location":"ponyzip-ZipSOURCESupports/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCESupports/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCESupports/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCESupports/#eq","text":"[Source] fun box eq( that: ZipSOURCESupports val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCESupports/#parameters","text":"that: ZipSOURCESupports val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESupports/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESupports/#ne","text":"[Source] fun box ne( that: ZipSOURCESupports val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCESupports/#parameters_1","text":"that: ZipSOURCESupports val","title":"Parameters"},{"location":"ponyzip-ZipSOURCESupports/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCESupportsReadable/","text":"ZipSOURCESupportsReadable \u00b6 [Source] type ZipSOURCESupportsReadable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val) Type Alias For \u00b6 ( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val)","title":"type ZipSOURCESupportsReadable"},{"location":"ponyzip-ZipSOURCESupportsReadable/#zipsourcesupportsreadable","text":"[Source] type ZipSOURCESupportsReadable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val)","title":"ZipSOURCESupportsReadable"},{"location":"ponyzip-ZipSOURCESupportsReadable/#type-alias-for","text":"( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val)","title":"Type Alias For"},{"location":"ponyzip-ZipSOURCESupportsSeekable/","text":"ZipSOURCESupportsSeekable \u00b6 [Source] type ZipSOURCESupportsSeekable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val) Type Alias For \u00b6 ( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val)","title":"type ZipSOURCESupportsSeekable"},{"location":"ponyzip-ZipSOURCESupportsSeekable/#zipsourcesupportsseekable","text":"[Source] type ZipSOURCESupportsSeekable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val)","title":"ZipSOURCESupportsSeekable"},{"location":"ponyzip-ZipSOURCESupportsSeekable/#type-alias-for","text":"( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val)","title":"Type Alias For"},{"location":"ponyzip-ZipSOURCESupportsWritable/","text":"ZipSOURCESupportsWritable \u00b6 [Source] type ZipSOURCESupportsWritable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val | ZipSOURCEBeginWrite val | ZipSOURCECommitWrite val | ZipSOURCERollbackWrite val | ZipSOURCEWrite val | ZipSOURCESeekWrite val | ZipSOURCETellWrite val | ZipSOURCERemove val) Type Alias For \u00b6 ( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val | ZipSOURCEBeginWrite val | ZipSOURCECommitWrite val | ZipSOURCERollbackWrite val | ZipSOURCEWrite val | ZipSOURCESeekWrite val | ZipSOURCETellWrite val | ZipSOURCERemove val)","title":"type ZipSOURCESupportsWritable"},{"location":"ponyzip-ZipSOURCESupportsWritable/#zipsourcesupportswritable","text":"[Source] type ZipSOURCESupportsWritable is (ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val | ZipSOURCEBeginWrite val | ZipSOURCECommitWrite val | ZipSOURCERollbackWrite val | ZipSOURCEWrite val | ZipSOURCESeekWrite val | ZipSOURCETellWrite val | ZipSOURCERemove val)","title":"ZipSOURCESupportsWritable"},{"location":"ponyzip-ZipSOURCESupportsWritable/#type-alias-for","text":"( ZipSOURCEOpen val | ZipSOURCERead val | ZipSOURCEClose val | ZipSOURCEStat val | ZipSOURCEError val | ZipSOURCEFree val | ZipSOURCESeek val | ZipSOURCETell val | ZipSOURCESupports val | ZipSOURCEBeginWrite val | ZipSOURCECommitWrite val | ZipSOURCERollbackWrite val | ZipSOURCEWrite val | ZipSOURCESeekWrite val | ZipSOURCETellWrite val | ZipSOURCERemove val)","title":"Type Alias For"},{"location":"ponyzip-ZipSOURCETell/","text":"ZipSOURCETell \u00b6 [Source] primitive val ZipSOURCETell Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCETell val^ Returns \u00b6 ZipSOURCETell val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCETell val) : Bool val Parameters \u00b6 that: ZipSOURCETell val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCETell val) : Bool val Parameters \u00b6 that: ZipSOURCETell val Returns \u00b6 Bool val","title":"primitive ZipSOURCETell"},{"location":"ponyzip-ZipSOURCETell/#zipsourcetell","text":"[Source] primitive val ZipSOURCETell","title":"ZipSOURCETell"},{"location":"ponyzip-ZipSOURCETell/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCETell/#create","text":"[Source] new val create() : ZipSOURCETell val^","title":"create"},{"location":"ponyzip-ZipSOURCETell/#returns","text":"ZipSOURCETell val^","title":"Returns"},{"location":"ponyzip-ZipSOURCETell/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCETell/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCETell/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCETell/#eq","text":"[Source] fun box eq( that: ZipSOURCETell val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCETell/#parameters","text":"that: ZipSOURCETell val","title":"Parameters"},{"location":"ponyzip-ZipSOURCETell/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCETell/#ne","text":"[Source] fun box ne( that: ZipSOURCETell val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCETell/#parameters_1","text":"that: ZipSOURCETell val","title":"Parameters"},{"location":"ponyzip-ZipSOURCETell/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCETellWrite/","text":"ZipSOURCETellWrite \u00b6 [Source] primitive val ZipSOURCETellWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCETellWrite val^ Returns \u00b6 ZipSOURCETellWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCETellWrite val) : Bool val Parameters \u00b6 that: ZipSOURCETellWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCETellWrite val) : Bool val Parameters \u00b6 that: ZipSOURCETellWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCETellWrite"},{"location":"ponyzip-ZipSOURCETellWrite/#zipsourcetellwrite","text":"[Source] primitive val ZipSOURCETellWrite","title":"ZipSOURCETellWrite"},{"location":"ponyzip-ZipSOURCETellWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCETellWrite/#create","text":"[Source] new val create() : ZipSOURCETellWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCETellWrite/#returns","text":"ZipSOURCETellWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCETellWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCETellWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCETellWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCETellWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCETellWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCETellWrite/#parameters","text":"that: ZipSOURCETellWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCETellWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCETellWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCETellWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCETellWrite/#parameters_1","text":"that: ZipSOURCETellWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCETellWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEWrite/","text":"ZipSOURCEWrite \u00b6 [Source] primitive val ZipSOURCEWrite Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSOURCEWrite val^ Returns \u00b6 ZipSOURCEWrite val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: ZipSOURCEWrite val) : Bool val Parameters \u00b6 that: ZipSOURCEWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSOURCEWrite val) : Bool val Parameters \u00b6 that: ZipSOURCEWrite val Returns \u00b6 Bool val","title":"primitive ZipSOURCEWrite"},{"location":"ponyzip-ZipSOURCEWrite/#zipsourcewrite","text":"[Source] primitive val ZipSOURCEWrite","title":"ZipSOURCEWrite"},{"location":"ponyzip-ZipSOURCEWrite/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSOURCEWrite/#create","text":"[Source] new val create() : ZipSOURCEWrite val^","title":"create"},{"location":"ponyzip-ZipSOURCEWrite/#returns","text":"ZipSOURCEWrite val^","title":"Returns"},{"location":"ponyzip-ZipSOURCEWrite/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSOURCEWrite/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"ponyzip-ZipSOURCEWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"ponyzip-ZipSOURCEWrite/#eq","text":"[Source] fun box eq( that: ZipSOURCEWrite val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSOURCEWrite/#parameters","text":"that: ZipSOURCEWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSOURCEWrite/#ne","text":"[Source] fun box ne( that: ZipSOURCEWrite val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSOURCEWrite/#parameters_1","text":"that: ZipSOURCEWrite val","title":"Parameters"},{"location":"ponyzip-ZipSOURCEWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCompMethod/","text":"ZipSTATCompMethod \u00b6 [Source] primitive val ZipSTATCompMethod Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATCompMethod val^ Returns \u00b6 ZipSTATCompMethod val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATCompMethod val) : Bool val Parameters \u00b6 that: ZipSTATCompMethod val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATCompMethod val) : Bool val Parameters \u00b6 that: ZipSTATCompMethod val Returns \u00b6 Bool val","title":"primitive ZipSTATCompMethod"},{"location":"ponyzip-ZipSTATCompMethod/#zipstatcompmethod","text":"[Source] primitive val ZipSTATCompMethod","title":"ZipSTATCompMethod"},{"location":"ponyzip-ZipSTATCompMethod/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATCompMethod/#create","text":"[Source] new val create() : ZipSTATCompMethod val^","title":"create"},{"location":"ponyzip-ZipSTATCompMethod/#returns","text":"ZipSTATCompMethod val^","title":"Returns"},{"location":"ponyzip-ZipSTATCompMethod/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATCompMethod/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATCompMethod/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATCompMethod/#eq","text":"[Source] fun box eq( that: ZipSTATCompMethod val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATCompMethod/#parameters","text":"that: ZipSTATCompMethod val","title":"Parameters"},{"location":"ponyzip-ZipSTATCompMethod/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCompMethod/#ne","text":"[Source] fun box ne( that: ZipSTATCompMethod val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATCompMethod/#parameters_1","text":"that: ZipSTATCompMethod val","title":"Parameters"},{"location":"ponyzip-ZipSTATCompMethod/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCompSize/","text":"ZipSTATCompSize \u00b6 [Source] primitive val ZipSTATCompSize Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATCompSize val^ Returns \u00b6 ZipSTATCompSize val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATCompSize val) : Bool val Parameters \u00b6 that: ZipSTATCompSize val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATCompSize val) : Bool val Parameters \u00b6 that: ZipSTATCompSize val Returns \u00b6 Bool val","title":"primitive ZipSTATCompSize"},{"location":"ponyzip-ZipSTATCompSize/#zipstatcompsize","text":"[Source] primitive val ZipSTATCompSize","title":"ZipSTATCompSize"},{"location":"ponyzip-ZipSTATCompSize/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATCompSize/#create","text":"[Source] new val create() : ZipSTATCompSize val^","title":"create"},{"location":"ponyzip-ZipSTATCompSize/#returns","text":"ZipSTATCompSize val^","title":"Returns"},{"location":"ponyzip-ZipSTATCompSize/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATCompSize/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATCompSize/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATCompSize/#eq","text":"[Source] fun box eq( that: ZipSTATCompSize val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATCompSize/#parameters","text":"that: ZipSTATCompSize val","title":"Parameters"},{"location":"ponyzip-ZipSTATCompSize/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCompSize/#ne","text":"[Source] fun box ne( that: ZipSTATCompSize val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATCompSize/#parameters_1","text":"that: ZipSTATCompSize val","title":"Parameters"},{"location":"ponyzip-ZipSTATCompSize/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCrc/","text":"ZipSTATCrc \u00b6 [Source] primitive val ZipSTATCrc Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATCrc val^ Returns \u00b6 ZipSTATCrc val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATCrc val) : Bool val Parameters \u00b6 that: ZipSTATCrc val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATCrc val) : Bool val Parameters \u00b6 that: ZipSTATCrc val Returns \u00b6 Bool val","title":"primitive ZipSTATCrc"},{"location":"ponyzip-ZipSTATCrc/#zipstatcrc","text":"[Source] primitive val ZipSTATCrc","title":"ZipSTATCrc"},{"location":"ponyzip-ZipSTATCrc/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATCrc/#create","text":"[Source] new val create() : ZipSTATCrc val^","title":"create"},{"location":"ponyzip-ZipSTATCrc/#returns","text":"ZipSTATCrc val^","title":"Returns"},{"location":"ponyzip-ZipSTATCrc/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATCrc/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATCrc/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATCrc/#eq","text":"[Source] fun box eq( that: ZipSTATCrc val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATCrc/#parameters","text":"that: ZipSTATCrc val","title":"Parameters"},{"location":"ponyzip-ZipSTATCrc/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATCrc/#ne","text":"[Source] fun box ne( that: ZipSTATCrc val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATCrc/#parameters_1","text":"that: ZipSTATCrc val","title":"Parameters"},{"location":"ponyzip-ZipSTATCrc/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATEncryptionMethod/","text":"ZipSTATEncryptionMethod \u00b6 [Source] primitive val ZipSTATEncryptionMethod Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATEncryptionMethod val^ Returns \u00b6 ZipSTATEncryptionMethod val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATEncryptionMethod val) : Bool val Parameters \u00b6 that: ZipSTATEncryptionMethod val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATEncryptionMethod val) : Bool val Parameters \u00b6 that: ZipSTATEncryptionMethod val Returns \u00b6 Bool val","title":"primitive ZipSTATEncryptionMethod"},{"location":"ponyzip-ZipSTATEncryptionMethod/#zipstatencryptionmethod","text":"[Source] primitive val ZipSTATEncryptionMethod","title":"ZipSTATEncryptionMethod"},{"location":"ponyzip-ZipSTATEncryptionMethod/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATEncryptionMethod/#create","text":"[Source] new val create() : ZipSTATEncryptionMethod val^","title":"create"},{"location":"ponyzip-ZipSTATEncryptionMethod/#returns","text":"ZipSTATEncryptionMethod val^","title":"Returns"},{"location":"ponyzip-ZipSTATEncryptionMethod/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATEncryptionMethod/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATEncryptionMethod/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATEncryptionMethod/#eq","text":"[Source] fun box eq( that: ZipSTATEncryptionMethod val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATEncryptionMethod/#parameters","text":"that: ZipSTATEncryptionMethod val","title":"Parameters"},{"location":"ponyzip-ZipSTATEncryptionMethod/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATEncryptionMethod/#ne","text":"[Source] fun box ne( that: ZipSTATEncryptionMethod val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATEncryptionMethod/#parameters_1","text":"that: ZipSTATEncryptionMethod val","title":"Parameters"},{"location":"ponyzip-ZipSTATEncryptionMethod/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATFlag/","text":"ZipSTATFlag \u00b6 [Source] primitive val ZipSTATFlag Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATFlag val^ Returns \u00b6 ZipSTATFlag val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATFlag val) : Bool val Parameters \u00b6 that: ZipSTATFlag val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATFlag val) : Bool val Parameters \u00b6 that: ZipSTATFlag val Returns \u00b6 Bool val","title":"primitive ZipSTATFlag"},{"location":"ponyzip-ZipSTATFlag/#zipstatflag","text":"[Source] primitive val ZipSTATFlag","title":"ZipSTATFlag"},{"location":"ponyzip-ZipSTATFlag/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATFlag/#create","text":"[Source] new val create() : ZipSTATFlag val^","title":"create"},{"location":"ponyzip-ZipSTATFlag/#returns","text":"ZipSTATFlag val^","title":"Returns"},{"location":"ponyzip-ZipSTATFlag/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATFlag/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATFlag/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATFlag/#eq","text":"[Source] fun box eq( that: ZipSTATFlag val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATFlag/#parameters","text":"that: ZipSTATFlag val","title":"Parameters"},{"location":"ponyzip-ZipSTATFlag/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATFlag/#ne","text":"[Source] fun box ne( that: ZipSTATFlag val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATFlag/#parameters_1","text":"that: ZipSTATFlag val","title":"Parameters"},{"location":"ponyzip-ZipSTATFlag/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATIndex/","text":"ZipSTATIndex \u00b6 [Source] primitive val ZipSTATIndex Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATIndex val^ Returns \u00b6 ZipSTATIndex val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATIndex val) : Bool val Parameters \u00b6 that: ZipSTATIndex val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATIndex val) : Bool val Parameters \u00b6 that: ZipSTATIndex val Returns \u00b6 Bool val","title":"primitive ZipSTATIndex"},{"location":"ponyzip-ZipSTATIndex/#zipstatindex","text":"[Source] primitive val ZipSTATIndex","title":"ZipSTATIndex"},{"location":"ponyzip-ZipSTATIndex/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATIndex/#create","text":"[Source] new val create() : ZipSTATIndex val^","title":"create"},{"location":"ponyzip-ZipSTATIndex/#returns","text":"ZipSTATIndex val^","title":"Returns"},{"location":"ponyzip-ZipSTATIndex/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATIndex/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATIndex/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATIndex/#eq","text":"[Source] fun box eq( that: ZipSTATIndex val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATIndex/#parameters","text":"that: ZipSTATIndex val","title":"Parameters"},{"location":"ponyzip-ZipSTATIndex/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATIndex/#ne","text":"[Source] fun box ne( that: ZipSTATIndex val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATIndex/#parameters_1","text":"that: ZipSTATIndex val","title":"Parameters"},{"location":"ponyzip-ZipSTATIndex/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATMtime/","text":"ZipSTATMtime \u00b6 [Source] primitive val ZipSTATMtime Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATMtime val^ Returns \u00b6 ZipSTATMtime val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATMtime val) : Bool val Parameters \u00b6 that: ZipSTATMtime val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATMtime val) : Bool val Parameters \u00b6 that: ZipSTATMtime val Returns \u00b6 Bool val","title":"primitive ZipSTATMtime"},{"location":"ponyzip-ZipSTATMtime/#zipstatmtime","text":"[Source] primitive val ZipSTATMtime","title":"ZipSTATMtime"},{"location":"ponyzip-ZipSTATMtime/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATMtime/#create","text":"[Source] new val create() : ZipSTATMtime val^","title":"create"},{"location":"ponyzip-ZipSTATMtime/#returns","text":"ZipSTATMtime val^","title":"Returns"},{"location":"ponyzip-ZipSTATMtime/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATMtime/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATMtime/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATMtime/#eq","text":"[Source] fun box eq( that: ZipSTATMtime val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATMtime/#parameters","text":"that: ZipSTATMtime val","title":"Parameters"},{"location":"ponyzip-ZipSTATMtime/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATMtime/#ne","text":"[Source] fun box ne( that: ZipSTATMtime val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATMtime/#parameters_1","text":"that: ZipSTATMtime val","title":"Parameters"},{"location":"ponyzip-ZipSTATMtime/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATName/","text":"ZipSTATName \u00b6 [Source] primitive val ZipSTATName Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATName val^ Returns \u00b6 ZipSTATName val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATName val) : Bool val Parameters \u00b6 that: ZipSTATName val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATName val) : Bool val Parameters \u00b6 that: ZipSTATName val Returns \u00b6 Bool val","title":"primitive ZipSTATName"},{"location":"ponyzip-ZipSTATName/#zipstatname","text":"[Source] primitive val ZipSTATName","title":"ZipSTATName"},{"location":"ponyzip-ZipSTATName/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATName/#create","text":"[Source] new val create() : ZipSTATName val^","title":"create"},{"location":"ponyzip-ZipSTATName/#returns","text":"ZipSTATName val^","title":"Returns"},{"location":"ponyzip-ZipSTATName/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATName/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATName/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATName/#eq","text":"[Source] fun box eq( that: ZipSTATName val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATName/#parameters","text":"that: ZipSTATName val","title":"Parameters"},{"location":"ponyzip-ZipSTATName/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATName/#ne","text":"[Source] fun box ne( that: ZipSTATName val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATName/#parameters_1","text":"that: ZipSTATName val","title":"Parameters"},{"location":"ponyzip-ZipSTATName/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATSize/","text":"ZipSTATSize \u00b6 [Source] primitive val ZipSTATSize Constructors \u00b6 create \u00b6 [Source] new val create() : ZipSTATSize val^ Returns \u00b6 ZipSTATSize val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val eq \u00b6 [Source] fun box eq( that: ZipSTATSize val) : Bool val Parameters \u00b6 that: ZipSTATSize val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipSTATSize val) : Bool val Parameters \u00b6 that: ZipSTATSize val Returns \u00b6 Bool val","title":"primitive ZipSTATSize"},{"location":"ponyzip-ZipSTATSize/#zipstatsize","text":"[Source] primitive val ZipSTATSize","title":"ZipSTATSize"},{"location":"ponyzip-ZipSTATSize/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipSTATSize/#create","text":"[Source] new val create() : ZipSTATSize val^","title":"create"},{"location":"ponyzip-ZipSTATSize/#returns","text":"ZipSTATSize val^","title":"Returns"},{"location":"ponyzip-ZipSTATSize/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipSTATSize/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"ponyzip-ZipSTATSize/#returns_1","text":"U16 val","title":"Returns"},{"location":"ponyzip-ZipSTATSize/#eq","text":"[Source] fun box eq( that: ZipSTATSize val) : Bool val","title":"eq"},{"location":"ponyzip-ZipSTATSize/#parameters","text":"that: ZipSTATSize val","title":"Parameters"},{"location":"ponyzip-ZipSTATSize/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipSTATSize/#ne","text":"[Source] fun box ne( that: ZipSTATSize val) : Bool val","title":"ne"},{"location":"ponyzip-ZipSTATSize/#parameters_1","text":"that: ZipSTATSize val","title":"Parameters"},{"location":"ponyzip-ZipSTATSize/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipStatFlags/","text":"ZipStatFlags \u00b6 [Source] type ZipStatFlags is (ZipSTATName val | ZipSTATIndex val | ZipSTATSize val | ZipSTATCompSize val | ZipSTATMtime val | ZipSTATCrc val | ZipSTATCompMethod val | ZipSTATEncryptionMethod val | ZipSTATFlag val) Type Alias For \u00b6 ( ZipSTATName val | ZipSTATIndex val | ZipSTATSize val | ZipSTATCompSize val | ZipSTATMtime val | ZipSTATCrc val | ZipSTATCompMethod val | ZipSTATEncryptionMethod val | ZipSTATFlag val)","title":"type ZipStatFlags"},{"location":"ponyzip-ZipStatFlags/#zipstatflags","text":"[Source] type ZipStatFlags is (ZipSTATName val | ZipSTATIndex val | ZipSTATSize val | ZipSTATCompSize val | ZipSTATMtime val | ZipSTATCrc val | ZipSTATCompMethod val | ZipSTATEncryptionMethod val | ZipSTATFlag val)","title":"ZipStatFlags"},{"location":"ponyzip-ZipStatFlags/#type-alias-for","text":"( ZipSTATName val | ZipSTATIndex val | ZipSTATSize val | ZipSTATCompSize val | ZipSTATMtime val | ZipSTATCrc val | ZipSTATCompMethod val | ZipSTATEncryptionMethod val | ZipSTATFlag val)","title":"Type Alias For"},{"location":"ponyzip-ZipTruncate/","text":"ZipTruncate \u00b6 [Source] primitive val ZipTruncate Constructors \u00b6 create \u00b6 [Source] new val create() : ZipTruncate val^ Returns \u00b6 ZipTruncate val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: ZipTruncate val) : Bool val Parameters \u00b6 that: ZipTruncate val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZipTruncate val) : Bool val Parameters \u00b6 that: ZipTruncate val Returns \u00b6 Bool val","title":"primitive ZipTruncate"},{"location":"ponyzip-ZipTruncate/#ziptruncate","text":"[Source] primitive val ZipTruncate","title":"ZipTruncate"},{"location":"ponyzip-ZipTruncate/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-ZipTruncate/#create","text":"[Source] new val create() : ZipTruncate val^","title":"create"},{"location":"ponyzip-ZipTruncate/#returns","text":"ZipTruncate val^","title":"Returns"},{"location":"ponyzip-ZipTruncate/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-ZipTruncate/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"ponyzip-ZipTruncate/#returns_1","text":"I32 val","title":"Returns"},{"location":"ponyzip-ZipTruncate/#eq","text":"[Source] fun box eq( that: ZipTruncate val) : Bool val","title":"eq"},{"location":"ponyzip-ZipTruncate/#parameters","text":"that: ZipTruncate val","title":"Parameters"},{"location":"ponyzip-ZipTruncate/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponyzip-ZipTruncate/#ne","text":"[Source] fun box ne( that: ZipTruncate val) : Bool val","title":"ne"},{"location":"ponyzip-ZipTruncate/#parameters_1","text":"that: ZipTruncate val","title":"Parameters"},{"location":"ponyzip-ZipTruncate/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponyzip-Zipbufferfragment/","text":"Zipbufferfragment \u00b6 [Source] struct ref Zipbufferfragment Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipbufferfragment iso^ Returns \u00b6 Zipbufferfragment iso^ Public fields \u00b6 var pdata: Pointer [ U8 val] ref \u00b6 [Source] var plength: U64 val \u00b6 [Source]","title":"struct Zipbufferfragment"},{"location":"ponyzip-Zipbufferfragment/#zipbufferfragment","text":"[Source] struct ref Zipbufferfragment","title":"Zipbufferfragment"},{"location":"ponyzip-Zipbufferfragment/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipbufferfragment/#create","text":"[Source] new iso create() : Zipbufferfragment iso^","title":"create"},{"location":"ponyzip-Zipbufferfragment/#returns","text":"Zipbufferfragment iso^","title":"Returns"},{"location":"ponyzip-Zipbufferfragment/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-Zipbufferfragment/#var-pdata-pointeru8-val-ref","text":"[Source]","title":"var pdata: Pointer[U8 val] ref"},{"location":"ponyzip-Zipbufferfragment/#var-plength-u64-val","text":"[Source]","title":"var plength: U64 val"},{"location":"ponyzip-Ziperror/","text":"Ziperror \u00b6 [Source] struct ref Ziperror Constructors \u00b6 create \u00b6 [Source] new iso create() : Ziperror iso^ Returns \u00b6 Ziperror iso^ Public fields \u00b6 var pziperr: I32 val \u00b6 [Source] var psyserr: I32 val \u00b6 [Source] var pstr: Pointer [ U8 val] ref \u00b6 [Source]","title":"struct Ziperror"},{"location":"ponyzip-Ziperror/#ziperror","text":"[Source] struct ref Ziperror","title":"Ziperror"},{"location":"ponyzip-Ziperror/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Ziperror/#create","text":"[Source] new iso create() : Ziperror iso^","title":"create"},{"location":"ponyzip-Ziperror/#returns","text":"Ziperror iso^","title":"Returns"},{"location":"ponyzip-Ziperror/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-Ziperror/#var-pziperr-i32-val","text":"[Source]","title":"var pziperr: I32 val"},{"location":"ponyzip-Ziperror/#var-psyserr-i32-val","text":"[Source]","title":"var psyserr: I32 val"},{"location":"ponyzip-Ziperror/#var-pstr-pointeru8-val-ref","text":"[Source]","title":"var pstr: Pointer[U8 val] ref"},{"location":"ponyzip-Zipfile/","text":"Zipfile \u00b6 [Source] struct ref Zipfile Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipfile iso^ Returns \u00b6 Zipfile iso^","title":"struct Zipfile"},{"location":"ponyzip-Zipfile/#zipfile","text":"[Source] struct ref Zipfile","title":"Zipfile"},{"location":"ponyzip-Zipfile/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipfile/#create","text":"[Source] new iso create() : Zipfile iso^","title":"create"},{"location":"ponyzip-Zipfile/#returns","text":"Zipfile iso^","title":"Returns"},{"location":"ponyzip-Zipfileattributes/","text":"Zipfileattributes \u00b6 [Source] struct ref Zipfileattributes Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipfileattributes iso^ Returns \u00b6 Zipfileattributes iso^ Public fields \u00b6 var pvalid: U64 val \u00b6 [Source] var pversion: U8 val \u00b6 [Source] var phostsystem: U8 val \u00b6 [Source] var pascii: U8 val \u00b6 [Source] var pversionneeded: U8 val \u00b6 [Source] var pexternalfileattributes: U32 val \u00b6 [Source] var pgeneralpurposebitflags: U16 val \u00b6 [Source] var pgeneralpurposebitmask: U16 val \u00b6 [Source]","title":"struct Zipfileattributes"},{"location":"ponyzip-Zipfileattributes/#zipfileattributes","text":"[Source] struct ref Zipfileattributes","title":"Zipfileattributes"},{"location":"ponyzip-Zipfileattributes/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipfileattributes/#create","text":"[Source] new iso create() : Zipfileattributes iso^","title":"create"},{"location":"ponyzip-Zipfileattributes/#returns","text":"Zipfileattributes iso^","title":"Returns"},{"location":"ponyzip-Zipfileattributes/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-Zipfileattributes/#var-pvalid-u64-val","text":"[Source]","title":"var pvalid: U64 val"},{"location":"ponyzip-Zipfileattributes/#var-pversion-u8-val","text":"[Source]","title":"var pversion: U8 val"},{"location":"ponyzip-Zipfileattributes/#var-phostsystem-u8-val","text":"[Source]","title":"var phostsystem: U8 val"},{"location":"ponyzip-Zipfileattributes/#var-pascii-u8-val","text":"[Source]","title":"var pascii: U8 val"},{"location":"ponyzip-Zipfileattributes/#var-pversionneeded-u8-val","text":"[Source]","title":"var pversionneeded: U8 val"},{"location":"ponyzip-Zipfileattributes/#var-pexternalfileattributes-u32-val","text":"[Source]","title":"var pexternalfileattributes: U32 val"},{"location":"ponyzip-Zipfileattributes/#var-pgeneralpurposebitflags-u16-val","text":"[Source]","title":"var pgeneralpurposebitflags: U16 val"},{"location":"ponyzip-Zipfileattributes/#var-pgeneralpurposebitmask-u16-val","text":"[Source]","title":"var pgeneralpurposebitmask: U16 val"},{"location":"ponyzip-Zipsource/","text":"Zipsource \u00b6 [Source] struct ref Zipsource Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipsource iso^ Returns \u00b6 Zipsource iso^","title":"struct Zipsource"},{"location":"ponyzip-Zipsource/#zipsource","text":"[Source] struct ref Zipsource","title":"Zipsource"},{"location":"ponyzip-Zipsource/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipsource/#create","text":"[Source] new iso create() : Zipsource iso^","title":"create"},{"location":"ponyzip-Zipsource/#returns","text":"Zipsource iso^","title":"Returns"},{"location":"ponyzip-Zipsourceargsseek/","text":"Zipsourceargsseek \u00b6 [Source] struct ref Zipsourceargsseek Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipsourceargsseek iso^ Returns \u00b6 Zipsourceargsseek iso^ Public fields \u00b6 var poffset: I64 val \u00b6 [Source] var pwhence: I32 val \u00b6 [Source]","title":"struct Zipsourceargsseek"},{"location":"ponyzip-Zipsourceargsseek/#zipsourceargsseek","text":"[Source] struct ref Zipsourceargsseek","title":"Zipsourceargsseek"},{"location":"ponyzip-Zipsourceargsseek/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipsourceargsseek/#create","text":"[Source] new iso create() : Zipsourceargsseek iso^","title":"create"},{"location":"ponyzip-Zipsourceargsseek/#returns","text":"Zipsourceargsseek iso^","title":"Returns"},{"location":"ponyzip-Zipsourceargsseek/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-Zipsourceargsseek/#var-poffset-i64-val","text":"[Source]","title":"var poffset: I64 val"},{"location":"ponyzip-Zipsourceargsseek/#var-pwhence-i32-val","text":"[Source]","title":"var pwhence: I32 val"},{"location":"ponyzip-Zipstat/","text":"Zipstat \u00b6 [Source] struct ref Zipstat Constructors \u00b6 create \u00b6 [Source] new iso create() : Zipstat iso^ Returns \u00b6 Zipstat iso^ Public fields \u00b6 var pvalid: U64 val \u00b6 [Source] var pname: Pointer [ U8 val] ref \u00b6 [Source] var pindex: U64 val \u00b6 [Source] var psize: U64 val \u00b6 [Source] var pcompsize: U64 val \u00b6 [Source] var pmtime: I64 val \u00b6 [Source] var pcrc: U32 val \u00b6 [Source] var pcompmethod: U16 val \u00b6 [Source] var pencryptionmethod: U16 val \u00b6 [Source] var pflags: U32 val \u00b6 [Source] Public Functions \u00b6 name \u00b6 [Source] fun ref name() : String iso^ Returns \u00b6 String iso^ index \u00b6 [Source] fun box index() : USize val Returns \u00b6 USize val size \u00b6 [Source] fun box size() : USize val Returns \u00b6 USize val compsize \u00b6 [Source] fun box compsize() : USize val Returns \u00b6 USize val mtime \u00b6 [Source] fun box mtime() : PosixDate ref Returns \u00b6 PosixDate ref crc \u00b6 [Source] fun box crc() : U32 val Returns \u00b6 U32 val","title":"struct Zipstat"},{"location":"ponyzip-Zipstat/#zipstat","text":"[Source] struct ref Zipstat","title":"Zipstat"},{"location":"ponyzip-Zipstat/#constructors","text":"","title":"Constructors"},{"location":"ponyzip-Zipstat/#create","text":"[Source] new iso create() : Zipstat iso^","title":"create"},{"location":"ponyzip-Zipstat/#returns","text":"Zipstat iso^","title":"Returns"},{"location":"ponyzip-Zipstat/#public-fields","text":"","title":"Public fields"},{"location":"ponyzip-Zipstat/#var-pvalid-u64-val","text":"[Source]","title":"var pvalid: U64 val"},{"location":"ponyzip-Zipstat/#var-pname-pointeru8-val-ref","text":"[Source]","title":"var pname: Pointer[U8 val] ref"},{"location":"ponyzip-Zipstat/#var-pindex-u64-val","text":"[Source]","title":"var pindex: U64 val"},{"location":"ponyzip-Zipstat/#var-psize-u64-val","text":"[Source]","title":"var psize: U64 val"},{"location":"ponyzip-Zipstat/#var-pcompsize-u64-val","text":"[Source]","title":"var pcompsize: U64 val"},{"location":"ponyzip-Zipstat/#var-pmtime-i64-val","text":"[Source]","title":"var pmtime: I64 val"},{"location":"ponyzip-Zipstat/#var-pcrc-u32-val","text":"[Source]","title":"var pcrc: U32 val"},{"location":"ponyzip-Zipstat/#var-pcompmethod-u16-val","text":"[Source]","title":"var pcompmethod: U16 val"},{"location":"ponyzip-Zipstat/#var-pencryptionmethod-u16-val","text":"[Source]","title":"var pencryptionmethod: U16 val"},{"location":"ponyzip-Zipstat/#var-pflags-u32-val","text":"[Source]","title":"var pflags: U32 val"},{"location":"ponyzip-Zipstat/#public-functions","text":"","title":"Public Functions"},{"location":"ponyzip-Zipstat/#name","text":"[Source] fun ref name() : String iso^","title":"name"},{"location":"ponyzip-Zipstat/#returns_1","text":"String iso^","title":"Returns"},{"location":"ponyzip-Zipstat/#index","text":"[Source] fun box index() : USize val","title":"index"},{"location":"ponyzip-Zipstat/#returns_2","text":"USize val","title":"Returns"},{"location":"ponyzip-Zipstat/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"ponyzip-Zipstat/#returns_3","text":"USize val","title":"Returns"},{"location":"ponyzip-Zipstat/#compsize","text":"[Source] fun box compsize() : USize val","title":"compsize"},{"location":"ponyzip-Zipstat/#returns_4","text":"USize val","title":"Returns"},{"location":"ponyzip-Zipstat/#mtime","text":"[Source] fun box mtime() : PosixDate ref","title":"mtime"},{"location":"ponyzip-Zipstat/#returns_5","text":"PosixDate ref","title":"Returns"},{"location":"ponyzip-Zipstat/#crc","text":"[Source] fun box crc() : U32 val","title":"crc"},{"location":"ponyzip-Zipstat/#returns_6","text":"U32 val","title":"Returns"},{"location":"random--index/","text":"Random package \u00b6 The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next() Public Types \u00b6 class XorShift128Plus class XorOshiro128Plus class XorOshiro128StarStar class SplitMix64 type Rand trait Random class MT class Dice","title":"Package"},{"location":"random--index/#random-package","text":"The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next()","title":"Random package"},{"location":"random--index/#public-types","text":"class XorShift128Plus class XorOshiro128Plus class XorOshiro128StarStar class SplitMix64 type Rand trait Random class MT class Dice","title":"Public Types"},{"location":"random-Dice/","text":"Dice \u00b6 [Source] A simple dice roller. class ref Dice Constructors \u00b6 create \u00b6 [Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^ Parameters \u00b6 from: Random ref Returns \u00b6 Dice ref^ Public fields \u00b6 var r: Random ref \u00b6 [Source] Public Functions \u00b6 apply \u00b6 [Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val Parameters \u00b6 count: U64 val sides: U64 val Returns \u00b6 U64 val","title":"class Dice"},{"location":"random-Dice/#dice","text":"[Source] A simple dice roller. class ref Dice","title":"Dice"},{"location":"random-Dice/#constructors","text":"","title":"Constructors"},{"location":"random-Dice/#create","text":"[Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^","title":"create"},{"location":"random-Dice/#parameters","text":"from: Random ref","title":"Parameters"},{"location":"random-Dice/#returns","text":"Dice ref^","title":"Returns"},{"location":"random-Dice/#public-fields","text":"","title":"Public fields"},{"location":"random-Dice/#var-r-random-ref","text":"[Source]","title":"var r: Random ref"},{"location":"random-Dice/#public-functions","text":"","title":"Public Functions"},{"location":"random-Dice/#apply","text":"[Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val","title":"apply"},{"location":"random-Dice/#parameters_1","text":"count: U64 val sides: U64 val","title":"Parameters"},{"location":"random-Dice/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/","text":"MT \u00b6 [Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref Implements \u00b6 Random ref Constructors \u00b6 create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : MT ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 MT ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 [Source] fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 [Source] fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 [Source] fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 [Source] fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 [Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"class MT"},{"location":"random-MT/#mt","text":"[Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref","title":"MT"},{"location":"random-MT/#implements","text":"Random ref","title":"Implements"},{"location":"random-MT/#constructors","text":"","title":"Constructors"},{"location":"random-MT/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : MT ref^","title":"create"},{"location":"random-MT/#parameters","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-MT/#returns","text":"MT ref^","title":"Returns"},{"location":"random-MT/#public-functions","text":"","title":"Public Functions"},{"location":"random-MT/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-MT/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/#has_next","text":"[Source] fun tag has_next() : Bool val","title":"has_next"},{"location":"random-MT/#returns_2","text":"Bool val","title":"Returns"},{"location":"random-MT/#u8","text":"[Source] fun ref u8() : U8 val","title":"u8"},{"location":"random-MT/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-MT/#u16","text":"[Source] fun ref u16() : U16 val","title":"u16"},{"location":"random-MT/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-MT/#u32","text":"[Source] fun ref u32() : U32 val","title":"u32"},{"location":"random-MT/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-MT/#u64","text":"[Source] fun ref u64() : U64 val","title":"u64"},{"location":"random-MT/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-MT/#u128","text":"[Source] fun ref u128() : U128 val","title":"u128"},{"location":"random-MT/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-MT/#ulong","text":"[Source] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-MT/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-MT/#usize","text":"[Source] fun ref usize() : USize val","title":"usize"},{"location":"random-MT/#returns_9","text":"USize val","title":"Returns"},{"location":"random-MT/#i8","text":"[Source] fun ref i8() : I8 val","title":"i8"},{"location":"random-MT/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-MT/#i16","text":"[Source] fun ref i16() : I16 val","title":"i16"},{"location":"random-MT/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-MT/#i32","text":"[Source] fun ref i32() : I32 val","title":"i32"},{"location":"random-MT/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-MT/#i64","text":"[Source] fun ref i64() : I64 val","title":"i64"},{"location":"random-MT/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-MT/#i128","text":"[Source] fun ref i128() : I128 val","title":"i128"},{"location":"random-MT/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-MT/#ilong","text":"[Source] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-MT/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-MT/#isize","text":"[Source] fun ref isize() : ISize val","title":"isize"},{"location":"random-MT/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-MT/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_17","text":"N","title":"Returns"},{"location":"random-MT/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_18","text":"N","title":"Returns"},{"location":"random-MT/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_19","text":"N","title":"Returns"},{"location":"random-MT/#real","text":"[Source] fun ref real() : F64 val","title":"real"},{"location":"random-MT/#returns_20","text":"F64 val","title":"Returns"},{"location":"random-MT/#shufflea-a","text":"[Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-MT/#parameters_4","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-MT/#returns_21","text":"None val","title":"Returns"},{"location":"random-Rand/","text":"Rand \u00b6 [Source] type Rand is XorOshiro128Plus ref Type Alias For \u00b6 XorOshiro128Plus ref","title":"type Rand"},{"location":"random-Rand/#rand","text":"[Source] type Rand is XorOshiro128Plus ref","title":"Rand"},{"location":"random-Rand/#type-alias-for","text":"XorOshiro128Plus ref","title":"Type Alias For"},{"location":"random-Random/","text":"Random \u00b6 [Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random Constructors \u00b6 create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : Random ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 Random ref^ Public Functions \u00b6 has_next \u00b6 [Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val u8 \u00b6 [Source] A random integer in [0, 2^8) fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] A random integer in [0, 2^16) fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] A random integer in [0, 2^32) fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] A random integer in [0, 2^64) fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] A random integer in [0, 2^128) fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 [Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) Not biased with small values of n like int . fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 [Source] A random number in [0, 1) fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 [Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"trait Random"},{"location":"random-Random/#random","text":"[Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random","title":"Random"},{"location":"random-Random/#constructors","text":"","title":"Constructors"},{"location":"random-Random/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : Random ref^","title":"create"},{"location":"random-Random/#parameters","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-Random/#returns","text":"Random ref^","title":"Returns"},{"location":"random-Random/#public-functions","text":"","title":"Public Functions"},{"location":"random-Random/#has_next","text":"[Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val","title":"has_next"},{"location":"random-Random/#returns_1","text":"Bool val","title":"Returns"},{"location":"random-Random/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-Random/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-Random/#u8","text":"[Source] A random integer in [0, 2^8) fun ref u8() : U8 val","title":"u8"},{"location":"random-Random/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-Random/#u16","text":"[Source] A random integer in [0, 2^16) fun ref u16() : U16 val","title":"u16"},{"location":"random-Random/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-Random/#u32","text":"[Source] A random integer in [0, 2^32) fun ref u32() : U32 val","title":"u32"},{"location":"random-Random/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-Random/#u64","text":"[Source] A random integer in [0, 2^64) fun ref u64() : U64 val","title":"u64"},{"location":"random-Random/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-Random/#u128","text":"[Source] A random integer in [0, 2^128) fun ref u128() : U128 val","title":"u128"},{"location":"random-Random/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-Random/#ulong","text":"[Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-Random/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-Random/#usize","text":"[Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val","title":"usize"},{"location":"random-Random/#returns_9","text":"USize val","title":"Returns"},{"location":"random-Random/#i8","text":"[Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val","title":"i8"},{"location":"random-Random/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-Random/#i16","text":"[Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val","title":"i16"},{"location":"random-Random/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-Random/#i32","text":"[Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val","title":"i32"},{"location":"random-Random/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-Random/#i64","text":"[Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val","title":"i64"},{"location":"random-Random/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-Random/#i128","text":"[Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val","title":"i128"},{"location":"random-Random/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-Random/#ilong","text":"[Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-Random/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-Random/#isize","text":"[Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val","title":"isize"},{"location":"random-Random/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-Random/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] A random integer in [0, n) fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_17","text":"N","title":"Returns"},{"location":"random-Random/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_18","text":"N","title":"Returns"},{"location":"random-Random/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"[Source] A random integer in [0, n) Not biased with small values of n like int . fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_19","text":"N","title":"Returns"},{"location":"random-Random/#real","text":"[Source] A random number in [0, 1) fun ref real() : F64 val","title":"real"},{"location":"random-Random/#returns_20","text":"F64 val","title":"Returns"},{"location":"random-Random/#shufflea-a","text":"[Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-Random/#parameters_4","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-Random/#returns_21","text":"None val","title":"Returns"},{"location":"random-SplitMix64/","text":"SplitMix64 \u00b6 [Source] Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement. class ref SplitMix64 is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] new ref from_u64( x: U64 val = 5489) : SplitMix64 ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 SplitMix64 ref^ create \u00b6 [Source] Only x is used, y is discarded. new ref create( x: U64 val = 5489, y: U64 val = 0) : SplitMix64 ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 SplitMix64 ref^ Public Functions \u00b6 next \u00b6 [Source] fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"class SplitMix64"},{"location":"random-SplitMix64/#splitmix64","text":"[Source] Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement. class ref SplitMix64 is Random ref","title":"SplitMix64"},{"location":"random-SplitMix64/#implements","text":"Random ref","title":"Implements"},{"location":"random-SplitMix64/#constructors","text":"","title":"Constructors"},{"location":"random-SplitMix64/#from_u64","text":"[Source] new ref from_u64( x: U64 val = 5489) : SplitMix64 ref^","title":"from_u64"},{"location":"random-SplitMix64/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-SplitMix64/#returns","text":"SplitMix64 ref^","title":"Returns"},{"location":"random-SplitMix64/#create","text":"[Source] Only x is used, y is discarded. new ref create( x: U64 val = 5489, y: U64 val = 0) : SplitMix64 ref^","title":"create"},{"location":"random-SplitMix64/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-SplitMix64/#returns_1","text":"SplitMix64 ref^","title":"Returns"},{"location":"random-SplitMix64/#public-functions","text":"","title":"Public Functions"},{"location":"random-SplitMix64/#next","text":"[Source] fun ref next() : U64 val","title":"next"},{"location":"random-SplitMix64/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-SplitMix64/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-SplitMix64/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-SplitMix64/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-SplitMix64/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-SplitMix64/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-SplitMix64/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-SplitMix64/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-SplitMix64/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-SplitMix64/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-SplitMix64/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-SplitMix64/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-SplitMix64/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-SplitMix64/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-SplitMix64/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-SplitMix64/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-SplitMix64/#returns_10","text":"USize val","title":"Returns"},{"location":"random-SplitMix64/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-SplitMix64/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-SplitMix64/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-SplitMix64/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-SplitMix64/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-SplitMix64/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-SplitMix64/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-SplitMix64/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-SplitMix64/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-SplitMix64/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-SplitMix64/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-SplitMix64/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-SplitMix64/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-SplitMix64/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-SplitMix64/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_18","text":"N","title":"Returns"},{"location":"random-SplitMix64/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_19","text":"N","title":"Returns"},{"location":"random-SplitMix64/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_20","text":"N","title":"Returns"},{"location":"random-SplitMix64/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-SplitMix64/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-SplitMix64/#shufflea-a","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-SplitMix64/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-SplitMix64/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorOshiro128Plus/","text":"XorOshiro128Plus \u00b6 [Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128Plus ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorOshiro128Plus ref^ create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128Plus ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorOshiro128Plus ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"class XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#xoroshiro128plus","text":"[Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref","title":"XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorOshiro128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorOshiro128Plus/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128Plus ref^","title":"from_u64"},{"location":"random-XorOshiro128Plus/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns","text":"XorOshiro128Plus ref^","title":"Returns"},{"location":"random-XorOshiro128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128Plus ref^","title":"create"},{"location":"random-XorOshiro128Plus/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_1","text":"XorOshiro128Plus ref^","title":"Returns"},{"location":"random-XorOshiro128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorOshiro128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorOshiro128Plus/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorOshiro128Plus/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorOshiro128Plus/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorOshiro128Plus/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorOshiro128Plus/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorOshiro128Plus/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorOshiro128Plus/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorOshiro128Plus/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorOshiro128Plus/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorOshiro128Plus/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorOshiro128Plus/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorOshiro128Plus/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorOshiro128Plus/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorOshiro128Plus/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorOshiro128Plus/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorOshiro128Plus/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_18","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_19","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_20","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorOshiro128Plus/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#shufflea-a","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorOshiro128Plus/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorOshiro128StarStar/","text":"XorOshiro128StarStar \u00b6 [Source] This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). class ref XorOshiro128StarStar is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128StarStar ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorOshiro128StarStar ref^ create \u00b6 [Source] new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128StarStar ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorOshiro128StarStar ref^ Public Functions \u00b6 next \u00b6 [Source] fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"class XorOshiro128StarStar"},{"location":"random-XorOshiro128StarStar/#xoroshiro128starstar","text":"[Source] This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). class ref XorOshiro128StarStar is Random ref","title":"XorOshiro128StarStar"},{"location":"random-XorOshiro128StarStar/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorOshiro128StarStar/#constructors","text":"","title":"Constructors"},{"location":"random-XorOshiro128StarStar/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128StarStar ref^","title":"from_u64"},{"location":"random-XorOshiro128StarStar/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns","text":"XorOshiro128StarStar ref^","title":"Returns"},{"location":"random-XorOshiro128StarStar/#create","text":"[Source] new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128StarStar ref^","title":"create"},{"location":"random-XorOshiro128StarStar/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_1","text":"XorOshiro128StarStar ref^","title":"Returns"},{"location":"random-XorOshiro128StarStar/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorOshiro128StarStar/#next","text":"[Source] fun ref next() : U64 val","title":"next"},{"location":"random-XorOshiro128StarStar/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorOshiro128StarStar/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorOshiro128StarStar/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorOshiro128StarStar/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorOshiro128StarStar/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorOshiro128StarStar/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorOshiro128StarStar/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorOshiro128StarStar/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorOshiro128StarStar/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorOshiro128StarStar/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorOshiro128StarStar/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorOshiro128StarStar/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorOshiro128StarStar/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorOshiro128StarStar/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorOshiro128StarStar/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorOshiro128StarStar/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_18","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_19","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_20","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorOshiro128StarStar/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#shufflea-a","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorOshiro128StarStar/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorShift128Plus/","text":"XorShift128Plus \u00b6 [Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorShift128Plus ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorShift128Plus ref^ create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorShift128Plus ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorShift128Plus ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val","title":"class XorShift128Plus"},{"location":"random-XorShift128Plus/#xorshift128plus","text":"[Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref","title":"XorShift128Plus"},{"location":"random-XorShift128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorShift128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorShift128Plus/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorShift128Plus ref^","title":"from_u64"},{"location":"random-XorShift128Plus/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorShift128Plus/#returns","text":"XorShift128Plus ref^","title":"Returns"},{"location":"random-XorShift128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorShift128Plus ref^","title":"create"},{"location":"random-XorShift128Plus/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_1","text":"XorShift128Plus ref^","title":"Returns"},{"location":"random-XorShift128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorShift128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorShift128Plus/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorShift128Plus/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorShift128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorShift128Plus/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorShift128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorShift128Plus/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorShift128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorShift128Plus/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorShift128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorShift128Plus/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorShift128Plus/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorShift128Plus/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorShift128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorShift128Plus/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorShift128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorShift128Plus/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorShift128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorShift128Plus/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorShift128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorShift128Plus/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorShift128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorShift128Plus/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorShift128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorShift128Plus/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorShift128Plus/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorShift128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorShift128Plus/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorShift128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_18","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_19","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_20","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorShift128Plus/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorShift128Plus/#shufflea-a","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorShift128Plus/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_22","text":"None val","title":"Returns"},{"location":"time--index/","text":"Time Package \u00b6 The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. Public Types \u00b6 actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos","title":"Package"},{"location":"time--index/#time-package","text":"The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.","title":"Time Package"},{"location":"time--index/#public-types","text":"actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos","title":"Public Types"},{"location":"time-Nanos/","text":"Nanos \u00b6 [Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos Constructors \u00b6 create \u00b6 [Source] new val create() : Nanos val^ Returns \u00b6 Nanos val^ Public Functions \u00b6 from_seconds \u00b6 [Source] fun box from_seconds( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_millis \u00b6 [Source] fun box from_millis( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_micros \u00b6 [Source] fun box from_micros( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_seconds_f \u00b6 [Source] fun box from_seconds_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_millis_f \u00b6 [Source] fun box from_millis_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_micros_f \u00b6 [Source] fun box from_micros_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_wall_clock \u00b6 [Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val Parameters \u00b6 wall: ( I64 val , I64 val) Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( that: Nanos val) : Bool val Parameters \u00b6 that: Nanos val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Nanos val) : Bool val Parameters \u00b6 that: Nanos val Returns \u00b6 Bool val","title":"primitive Nanos"},{"location":"time-Nanos/#nanos","text":"[Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos","title":"Nanos"},{"location":"time-Nanos/#constructors","text":"","title":"Constructors"},{"location":"time-Nanos/#create","text":"[Source] new val create() : Nanos val^","title":"create"},{"location":"time-Nanos/#returns","text":"Nanos val^","title":"Returns"},{"location":"time-Nanos/#public-functions","text":"","title":"Public Functions"},{"location":"time-Nanos/#from_seconds","text":"[Source] fun box from_seconds( t: U64 val) : U64 val","title":"from_seconds"},{"location":"time-Nanos/#parameters","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_1","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis","text":"[Source] fun box from_millis( t: U64 val) : U64 val","title":"from_millis"},{"location":"time-Nanos/#parameters_1","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_2","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros","text":"[Source] fun box from_micros( t: U64 val) : U64 val","title":"from_micros"},{"location":"time-Nanos/#parameters_2","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_seconds_f","text":"[Source] fun box from_seconds_f( t: F64 val) : U64 val","title":"from_seconds_f"},{"location":"time-Nanos/#parameters_3","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis_f","text":"[Source] fun box from_millis_f( t: F64 val) : U64 val","title":"from_millis_f"},{"location":"time-Nanos/#parameters_4","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros_f","text":"[Source] fun box from_micros_f( t: F64 val) : U64 val","title":"from_micros_f"},{"location":"time-Nanos/#parameters_5","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_wall_clock","text":"[Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val","title":"from_wall_clock"},{"location":"time-Nanos/#parameters_6","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Nanos/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#eq","text":"[Source] fun box eq( that: Nanos val) : Bool val","title":"eq"},{"location":"time-Nanos/#parameters_7","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_8","text":"Bool val","title":"Returns"},{"location":"time-Nanos/#ne","text":"[Source] fun box ne( that: Nanos val) : Bool val","title":"ne"},{"location":"time-Nanos/#parameters_8","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-PosixDate/","text":"PosixDate \u00b6 [Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate Constructors \u00b6 create \u00b6 [Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = 0, nanoseconds: I64 val = 0) : PosixDate ref^ Parameters \u00b6 seconds: I64 val = 0 nanoseconds: I64 val = 0 Returns \u00b6 PosixDate ref^ Public fields \u00b6 var nsec: I32 val \u00b6 [Source] var sec: I32 val \u00b6 [Source] var min: I32 val \u00b6 [Source] var hour: I32 val \u00b6 [Source] var day_of_month: I32 val \u00b6 [Source] var month: I32 val \u00b6 [Source] var year: I32 val \u00b6 [Source] var day_of_week: I32 val \u00b6 [Source] var day_of_year: I32 val \u00b6 [Source] Public Functions \u00b6 time \u00b6 [Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val Returns \u00b6 I64 val normal \u00b6 [Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val Returns \u00b6 None val format \u00b6 [Source] Format the time as for strftime. fun box format( fmt: String val) : String val ? Parameters \u00b6 fmt: String val Returns \u00b6 String val ?","title":"class PosixDate"},{"location":"time-PosixDate/#posixdate","text":"[Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate","title":"PosixDate"},{"location":"time-PosixDate/#constructors","text":"","title":"Constructors"},{"location":"time-PosixDate/#create","text":"[Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = 0, nanoseconds: I64 val = 0) : PosixDate ref^","title":"create"},{"location":"time-PosixDate/#parameters","text":"seconds: I64 val = 0 nanoseconds: I64 val = 0","title":"Parameters"},{"location":"time-PosixDate/#returns","text":"PosixDate ref^","title":"Returns"},{"location":"time-PosixDate/#public-fields","text":"","title":"Public fields"},{"location":"time-PosixDate/#var-nsec-i32-val","text":"[Source]","title":"var nsec: I32 val"},{"location":"time-PosixDate/#var-sec-i32-val","text":"[Source]","title":"var sec: I32 val"},{"location":"time-PosixDate/#var-min-i32-val","text":"[Source]","title":"var min: I32 val"},{"location":"time-PosixDate/#var-hour-i32-val","text":"[Source]","title":"var hour: I32 val"},{"location":"time-PosixDate/#var-day_of_month-i32-val","text":"[Source]","title":"var day_of_month: I32 val"},{"location":"time-PosixDate/#var-month-i32-val","text":"[Source]","title":"var month: I32 val"},{"location":"time-PosixDate/#var-year-i32-val","text":"[Source]","title":"var year: I32 val"},{"location":"time-PosixDate/#var-day_of_week-i32-val","text":"[Source]","title":"var day_of_week: I32 val"},{"location":"time-PosixDate/#var-day_of_year-i32-val","text":"[Source]","title":"var day_of_year: I32 val"},{"location":"time-PosixDate/#public-functions","text":"","title":"Public Functions"},{"location":"time-PosixDate/#time","text":"[Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val","title":"time"},{"location":"time-PosixDate/#returns_1","text":"I64 val","title":"Returns"},{"location":"time-PosixDate/#normal","text":"[Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val","title":"normal"},{"location":"time-PosixDate/#returns_2","text":"None val","title":"Returns"},{"location":"time-PosixDate/#format","text":"[Source] Format the time as for strftime. fun box format( fmt: String val) : String val ?","title":"format"},{"location":"time-PosixDate/#parameters_1","text":"fmt: String val","title":"Parameters"},{"location":"time-PosixDate/#returns_3","text":"String val ?","title":"Returns"},{"location":"time-Time/","text":"Time \u00b6 [Source] A collection of ways to fetch the current time. primitive val Time Constructors \u00b6 create \u00b6 [Source] new val create() : Time val^ Returns \u00b6 Time val^ Public Functions \u00b6 now \u00b6 [Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val) Returns \u00b6 ( I64 val , I64 val) seconds \u00b6 [Source] The wall-clock adjusted system time. fun box seconds() : I64 val Returns \u00b6 I64 val millis \u00b6 [Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val Returns \u00b6 U64 val micros \u00b6 [Source] Monotonic unadjusted microseconds. fun box micros() : U64 val Returns \u00b6 U64 val nanos \u00b6 [Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val Returns \u00b6 U64 val cycles \u00b6 [Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val Returns \u00b6 U64 val perf_begin \u00b6 [Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val Returns \u00b6 U64 val perf_end \u00b6 [Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( that: Time val) : Bool val Parameters \u00b6 that: Time val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Time val) : Bool val Parameters \u00b6 that: Time val Returns \u00b6 Bool val","title":"primitive Time"},{"location":"time-Time/#time","text":"[Source] A collection of ways to fetch the current time. primitive val Time","title":"Time"},{"location":"time-Time/#constructors","text":"","title":"Constructors"},{"location":"time-Time/#create","text":"[Source] new val create() : Time val^","title":"create"},{"location":"time-Time/#returns","text":"Time val^","title":"Returns"},{"location":"time-Time/#public-functions","text":"","title":"Public Functions"},{"location":"time-Time/#now","text":"[Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val)","title":"now"},{"location":"time-Time/#returns_1","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#seconds","text":"[Source] The wall-clock adjusted system time. fun box seconds() : I64 val","title":"seconds"},{"location":"time-Time/#returns_2","text":"I64 val","title":"Returns"},{"location":"time-Time/#millis","text":"[Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val","title":"millis"},{"location":"time-Time/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Time/#micros","text":"[Source] Monotonic unadjusted microseconds. fun box micros() : U64 val","title":"micros"},{"location":"time-Time/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Time/#nanos","text":"[Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val","title":"nanos"},{"location":"time-Time/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Time/#cycles","text":"[Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val","title":"cycles"},{"location":"time-Time/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_begin","text":"[Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val","title":"perf_begin"},{"location":"time-Time/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_end","text":"[Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val","title":"perf_end"},{"location":"time-Time/#returns_8","text":"U64 val","title":"Returns"},{"location":"time-Time/#eq","text":"[Source] fun box eq( that: Time val) : Bool val","title":"eq"},{"location":"time-Time/#parameters","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-Time/#ne","text":"[Source] fun box ne( that: Time val) : Bool val","title":"ne"},{"location":"time-Time/#parameters_1","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_10","text":"Bool val","title":"Returns"},{"location":"time-Timer/","text":"Timer \u00b6 [Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer Constructors \u00b6 create \u00b6 [Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = 0) : Timer iso^ Parameters \u00b6 notify: TimerNotify iso expiration: U64 val interval: U64 val = 0 Returns \u00b6 Timer iso^ abs \u00b6 [Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = 0) : Timer ref^ Parameters \u00b6 notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = 0 Returns \u00b6 Timer ref^","title":"class Timer"},{"location":"time-Timer/#timer","text":"[Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer","title":"Timer"},{"location":"time-Timer/#constructors","text":"","title":"Constructors"},{"location":"time-Timer/#create","text":"[Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = 0) : Timer iso^","title":"create"},{"location":"time-Timer/#parameters","text":"notify: TimerNotify iso expiration: U64 val interval: U64 val = 0","title":"Parameters"},{"location":"time-Timer/#returns","text":"Timer iso^","title":"Returns"},{"location":"time-Timer/#abs","text":"[Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = 0) : Timer ref^","title":"abs"},{"location":"time-Timer/#parameters_1","text":"notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = 0","title":"Parameters"},{"location":"time-Timer/#returns_1","text":"Timer ref^","title":"Returns"},{"location":"time-TimerNotify/","text":"TimerNotify \u00b6 [Source] Notifications for timer. interface ref TimerNotify Public Functions \u00b6 apply \u00b6 [Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters \u00b6 timer: Timer ref count: U64 val Returns \u00b6 Bool val cancel \u00b6 [Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val","title":"interface TimerNotify"},{"location":"time-TimerNotify/#timernotify","text":"[Source] Notifications for timer. interface ref TimerNotify","title":"TimerNotify"},{"location":"time-TimerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"time-TimerNotify/#apply","text":"[Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"time-TimerNotify/#parameters","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"time-TimerNotify/#returns","text":"Bool val","title":"Returns"},{"location":"time-TimerNotify/#cancel","text":"[Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"time-TimerNotify/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-TimerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/","text":"Timers \u00b6 [Source] A hierarchical set of timing wheels. actor tag Timers Constructors \u00b6 create \u00b6 [Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = 20) : Timers tag^ Parameters \u00b6 slop: USize val = 20 Returns \u00b6 Timers tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso) Parameters \u00b6 timer: Timer iso cancel \u00b6 [Source] Cancels a timer. be cancel( timer: Timer tag) Parameters \u00b6 timer: Timer tag dispose \u00b6 [Source] Dispose of this set of timing wheels. be dispose()","title":"actor Timers"},{"location":"time-Timers/#timers","text":"[Source] A hierarchical set of timing wheels. actor tag Timers","title":"Timers"},{"location":"time-Timers/#constructors","text":"","title":"Constructors"},{"location":"time-Timers/#create","text":"[Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = 20) : Timers tag^","title":"create"},{"location":"time-Timers/#parameters","text":"slop: USize val = 20","title":"Parameters"},{"location":"time-Timers/#returns","text":"Timers tag^","title":"Returns"},{"location":"time-Timers/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"time-Timers/#apply","text":"[Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso)","title":"apply"},{"location":"time-Timers/#parameters_1","text":"timer: Timer iso","title":"Parameters"},{"location":"time-Timers/#cancel","text":"[Source] Cancels a timer. be cancel( timer: Timer tag)","title":"cancel"},{"location":"time-Timers/#parameters_2","text":"timer: Timer tag","title":"Parameters"},{"location":"time-Timers/#dispose","text":"[Source] Dispose of this set of timing wheels. be dispose()","title":"dispose"},{"location":"src/builtin/ambient_auth/","text":"primitive AmbientAuth \"\"\" This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. \"\"\" new _create() => None","title":"ambient_auth.pony"},{"location":"src/builtin/any/","text":"interface tag Any","title":"any.pony"},{"location":"src/builtin/array/","text":"class Array[A] is Seq[A] \"\"\" Contiguous, resizable memory to store elements of type A. ## Usage Creating an Array of String: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 ``` Creating an empty Array of String, which may hold at least 10 elements before requesting more space: ```pony let array = Array[String](10) // array.size() == 0 // array.space() >= 10 ``` Accessing elements can be done via the `apply(i: USize): this->A ?` method. The provided index might be out of bounds so `apply` is partial and has to be called within a try-catch block or inside another partial method: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end ``` Adding and removing elements to and from the end of the Array can be done via `push` and `pop` methods. You could treat the array as a LIFO stack using those methods: ```pony while (array.size() > 0) do let elem = array.pop()? // do something with element end ``` Modifying the Array can be done via `update`, `insert` and `delete` methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the `values` method: ```pony for element in array.values() do // do something with element end ``` ## Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The `space()` method returns the number of elements an Array can hold. The `size()` method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: | size | space | |------|-------| | 0 | 0 | | 1 | 8 | | 8 | 8 | | 9 | 16 | | 16 | 16 | | 17 | 32 | Call the `compact()` method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[A] new create(len: USize = 0) => \"\"\" Create an array with zero elements, but space for len elements. \"\"\" _size = 0 if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) else _alloc = 0 _ptr = Pointer[A] end new init(from: A^, len: USize) => \"\"\" Create an array of len elements, all initialised to the given value. \"\"\" _size = len if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) var i: USize = 0 while i < len do _ptr._update(i, from) i = i + 1 end else _alloc = 0 _ptr = Pointer[A] end new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) => \"\"\" Create an array from a C-style pointer and length. The contents are not copied. \"\"\" if ptr.is_null() then _size = 0 _alloc = 0 else _size = len if alloc > len then _alloc = alloc else _alloc = len end end _ptr = ptr fun _copy_to( ptr: Pointer[this->A!], copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy copy_len elements from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[A] tag => \"\"\" Return the underlying C-style pointer. \"\"\" _ptr._offset(offset) fun size(): USize => \"\"\" The number of elements in the array. \"\"\" _size fun space(): USize => \"\"\" The available space in the array. \"\"\" _alloc fun ref reserve(len: USize) => \"\"\" Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. \"\"\" if _alloc < len then _alloc = len.next_pow2().max(len).max(8) _ptr = _ptr._realloc(_alloc) end fun box _element_size(): USize => \"\"\" Element size in bytes for an element. \"\"\" _ptr._element_size() fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. \"\"\" if _size <= (512 / _ptr._element_size()) then if _size.next_pow2() != _alloc.next_pow2() then _alloc = _size.next_pow2() let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end elseif _size < _alloc then _alloc = _size let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) => \"\"\" Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. \"\"\" reserve(len) _size = len fun box read_u8[B: (A & Real[B] val & U8) = A](offset: USize): U8 ? => \"\"\" Reads a U8 from offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._apply(0) else error end fun box read_u16[B: (A & Real[B] val & U8) = A](offset: USize): U16 ? => \"\"\" Reads a U16 from offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._apply(0) else error end fun box read_u32[B: (A & Real[B] val & U8) = A](offset: USize): U32 ? => \"\"\" Reads a U32 from offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._apply(0) else error end fun box read_u64[B: (A & Real[B] val & U8) = A](offset: USize): U64 ? => \"\"\" Reads a U64 from offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._apply(0) else error end fun box read_u128[B: (A & Real[B] val & U8) = A](offset: USize): U128 ? => \"\"\" Reads a U128 from offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._apply(0) else error end fun apply(i: USize): this->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update_u8[B: (A & Real[B] val & U8) = A](offset: USize, value: U8): U8 ? => \"\"\" Write a U8 at offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._update(0, value) else error end fun ref update_u16[B: (A & Real[B] val & U8) = A](offset: USize, value: U16): U16 ? => \"\"\" Write a U16 at offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._update(0, value) else error end fun ref update_u32[B: (A & Real[B] val & U8) = A](offset: USize, value: U32): U32 ? => \"\"\" Write a U32 at offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._update(0, value) else error end fun ref update_u64[B: (A & Real[B] val & U8) = A](offset: USize, value: U64): U64 ? => \"\"\" Write a U64 at offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._update(0, value) else error end fun ref update_u128[B: (A & Real[B] val & U8) = A](offset: USize, value: U128): U128 ? => \"\"\" Write a U128 at offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._update(0, value) else error end fun ref update(i: USize, value: A): A^ ? => \"\"\" Change the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._update(i, consume value) else error end fun ref insert(i: USize, value: A) ? => \"\"\" Insert an element into the array. Elements after this are moved up by one index, extending the array. When inserting right beyond the last element, at index `this.size()`, the element will be appended, similar to `push()`, an insert at index `0` prepends the value to the array. An insert into an index beyond `this.size()` raises an error. ```pony let array = Array[U8](4) // [] array.insert(0, 0xDE)? // prepend: [0xDE] array.insert(array.size(), 0xBE)? // append: [0xDE; 0xBE] array.insert(1, 0xAD)? // insert: [0xDE; 0xAD; 0xBE] array.insert(array.size() + 1, 0xEF)? // error ``` \"\"\" if i <= _size then reserve(_size + 1) _ptr._offset(i)._insert(1, _size - i) _ptr._update(i, consume value) _size = _size + 1 else error end fun ref delete(i: USize): A^ ? => \"\"\" Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. \"\"\" if i < _size then _size = _size - 1 _ptr._offset(i)._delete(1, _size - i) else error end fun ref truncate(len: USize) => \"\"\" Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. \"\"\" _size = _size.min(len) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the array to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new array nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this array and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[A] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): Array[A] val => \"\"\" Return a shared portion of this array, covering `from` until `to`. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop[B: (A & Any #send) = A](split_point: USize): (Array[A] iso^, Array[A] iso^) => \"\"\" Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements. The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below: ```pony class Example var other: (Example | None) = None let arr: Array[Example] iso = recover let obj1 = Example let obj2 = Example obj1.other = obj2 obj2.other = obj1 [obj1; obj2] end ``` \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: Array[A] iso): ((Array[A] iso^, Array[A] iso^) | Array[A] iso^) => \"\"\" Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun ref copy_from[B: (A & Real[B] val & U8) = A]( src: Array[U8] box, src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. \"\"\" reserve(dst_idx + len) src._ptr._offset(src_idx)._copy_to(_ptr._convert[U8]()._offset(dst_idx), len) if _size < (dst_idx + len) then _size = dst_idx + len end fun copy_to( dst: Array[this->A!], src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from this(src_idx) to dst(dst_idx). \"\"\" dst.reserve(dst_idx + len) _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len) if dst._size < (dst_idx + len) then dst._size = dst_idx + len end fun ref remove(i: USize, n: USize) => \"\"\" Remove n elements from the array, beginning at index i. \"\"\" if i < _size then let count = n.min(_size - i) _size = _size - count _ptr._offset(i)._delete(count, _size - i) end fun ref clear() => \"\"\" Remove all elements from the array. \"\"\" _size = 0 fun ref push_u8[B: (A & Real[B] val & U8) = A](value: U8) => \"\"\" Add a U8 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u8_bytes = U8(0).bytewidth() reserve(_size + u8_bytes) _ptr._offset(_size)._convert[U8]()._update(0, value) _size = _size + u8_bytes fun ref push_u16[B: (A & Real[B] val & U8) = A](value: U16) => \"\"\" Add a U16 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() reserve(_size + u16_bytes) _ptr._offset(_size)._convert[U16]()._update(0, value) _size = _size + u16_bytes fun ref push_u32[B: (A & Real[B] val & U8) = A](value: U32) => \"\"\" Add a U32 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() reserve(_size + u32_bytes) _ptr._offset(_size)._convert[U32]()._update(0, value) _size = _size + u32_bytes fun ref push_u64[B: (A & Real[B] val & U8) = A](value: U64) => \"\"\" Add a U64 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() reserve(_size + u64_bytes) _ptr._offset(_size)._convert[U64]()._update(0, value) _size = _size + u64_bytes fun ref push_u128[B: (A & Real[B] val & U8) = A](value: U128) => \"\"\" Add a U128 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() reserve(_size + u128_bytes) _ptr._offset(_size)._convert[U128]()._update(0, value) _size = _size + u128_bytes fun ref push(value: A) => \"\"\" Add an element to the end of the array. \"\"\" reserve(_size + 1) _ptr._update(_size, consume value) _size = _size + 1 fun ref pop(): A^ ? => \"\"\" Remove an element from the end of the array. The removed element is returned. \"\"\" delete(_size - 1)? fun ref unshift(value: A) => \"\"\" Add an element to the beginning of the array. \"\"\" try insert(0, consume value)? end fun ref shift(): A^ ? => \"\"\" Remove an element from the beginning of the array. The removed element is returned. \"\"\" delete(0)? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) var n = USize(0) try while n < copy_len do _ptr._update(_size + n, seq(offset + n)?) n = n + 1 end end _size = _size + n fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements to the end of the array, starting from the given offset. \"\"\" var n = USize(0) try while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end end n = 0 // If a concrete len is specified, we take the caller at their word // and reserve that much space, even though we can't verify that the // iterator actually has that many elements available. Reserving ahead // of time lets us take a fast path of direct pointer access. if len != -1 then reserve(_size + len) try while n < len do if iter.has_next() then _ptr._update(_size + n, iter.next()?) else break end n = n + 1 end end _size = _size + n else try while n < len do if iter.has_next() then push(iter.next()?) else break end n = n + 1 end end end fun find( value: A!, offset: USize = 0, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l, r) => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the beginning of the array, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" var i = offset var n = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end i = i + 1 end error fun contains( value: A!, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : Bool => \"\"\" Returns true if the array contains `value`, false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as `{(l, r) => l == r}`. \"\"\" var i = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then return true end i = i + 1 end false fun rfind( value: A!, offset: USize = -1, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the end of the array, starting at `offset` and examining lower indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" if _size > 0 then var i = if offset >= _size then _size - 1 else offset end var n = USize(0) repeat if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end until (i = i - 1) == 0 end end error fun clone(): Array[this->A!]^ => \"\"\" Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!](_size) _ptr._copy_to(out._ptr, _size) out._size = _size out fun slice( from: USize = 0, to: USize = -1, step: USize = 1) : Array[this->A!]^ => \"\"\" Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!] let last = _size.min(to) let len = last - from if (last > from) and (step > 0) then out.reserve((len + (step - 1)) / step) if step == 1 then copy_to(out, from, 0, len) else try var i = from while i < last do out.push(this(i)?) i = i + step end end end end out fun permute(indices: Iterator[USize]): Array[this->A!]^ ? => \"\"\" Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" let out = Array[this->A!] for i in indices do out.push(this(i)?) end out fun reverse(): Array[this->A!]^ => \"\"\" Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" clone() .> reverse_in_place() fun ref reverse_in_place() => \"\"\" Reverse the array in place. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, x) i = i + 1 j = j - 1 end end fun ref swap_elements(i: USize, j: USize) ? => \"\"\" Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. \"\"\" if (i >= _size) or (j >= _size) then error end let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, consume x) fun keys(): ArrayKeys[A, this->Array[A]]^ => \"\"\" Return an iterator over the indices in the array. \"\"\" ArrayKeys[A, this->Array[A]](this) fun values(): ArrayValues[A, this->Array[A]]^ => \"\"\" Return an iterator over the values in the array. \"\"\" ArrayValues[A, this->Array[A]](this) fun pairs(): ArrayPairs[A, this->Array[A]]^ => \"\"\" Return an iterator over the (index, value) pairs in the array. \"\"\" ArrayPairs[A, this->Array[A]](this) class ArrayKeys[A, B: Array[A] #read] is Iterator[USize] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): USize => if _i < _array.size() then _i = _i + 1 else _i end class ArrayValues[A, B: Array[A] #read] is Iterator[B->A] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): B->A ? => _array(_i = _i + 1)? fun ref rewind(): ArrayValues[A, B] => _i = 0 this class ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B->A)] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): (USize, B->A) ? => (_i, _array(_i = _i + 1)?)","title":"array.pony"},{"location":"src/builtin/asio_event/","text":"type AsioEventID is Pointer[AsioEvent] tag interface tag AsioEventNotify be _event_notify(event: AsioEventID, flags: U32, arg: U32) primitive AsioEvent \"\"\" Functions for asynchronous event notification. \"\"\" fun none(): AsioEventID => \"\"\" An empty event. \"\"\" AsioEventID fun readable(flags: U32): Bool => \"\"\" Returns true if the flags contain the readable flag. \"\"\" (flags and (1 << 0)) != 0 fun writeable(flags: U32): Bool => \"\"\" Returns true if the flags contain the writeable flag. \"\"\" (flags and (1 << 1)) != 0 fun disposable(flags: U32): Bool => \"\"\" Returns true if the event should be disposed of. \"\"\" flags == 0 fun oneshotable(flags: U32): Bool => \"\"\" Returns true if the flags contain the oneshot flag. \"\"\" (flags and (1 << 8)) != 0 fun dispose(): U32 => 0 fun read(): U32 => 1 << 0 fun write(): U32 => 1 << 1 fun timer(): U32 => 1 << 2 fun signal(): U32 => 1 << 3 fun read_write(): U32 => read() or write() fun oneshot(): U32 => 1 << 8 fun read_write_oneshot(): U32 => read() or write() or oneshot()","title":"asio_event.pony"},{"location":"src/builtin/bool/","text":"primitive Bool is Stringable new create(from: Bool) => from fun eq(y: Bool): Bool => this == y fun ne(y: Bool): Bool => this != y fun op_and(y: Bool): Bool => this and y fun op_or(y: Bool): Bool => this or y fun op_xor(y: Bool): Bool => this xor y fun op_not(): Bool => not this fun string(): String iso^ => (if this then \"true\" else \"false\" end).string()","title":"bool.pony"},{"location":"src/builtin/compare/","text":"primitive Less is Equatable[Compare] fun string(): String iso^ => \"Less\".string() primitive Equal is Equatable[Compare] fun string(): String iso^ => \"Equal\".string() primitive Greater is Equatable[Compare] fun string(): String iso^ => \"Greater\".string() type Compare is (Less | Equal | Greater) interface HasEq[A] fun eq(that: box->A): Bool interface Equatable[A: Equatable[A] #read] fun eq(that: box->A): Bool => this is that fun ne(that: box->A): Bool => not eq(that) interface Comparable[A: Comparable[A] #read] is Equatable[A] fun lt(that: box->A): Bool fun le(that: box->A): Bool => lt(that) or eq(that) fun ge(that: box->A): Bool => not lt(that) fun gt(that: box->A): Bool => not le(that) fun compare(that: box->A): Compare => if eq(that) then Equal elseif lt(that) then Less else Greater end","title":"compare.pony"},{"location":"src/builtin/disposable_actor/","text":"interface tag DisposableActor \"\"\" An interface used to asynchronously dispose of an actor. \"\"\" be dispose()","title":"disposable_actor.pony"},{"location":"src/builtin/do_not_optimise/","text":"primitive DoNotOptimise \"\"\" Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. \"\"\" fun apply[A](obj: A) => \"\"\" Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. \"\"\" compile_intrinsic fun observe() => \"\"\" Prevent the compiler from optimising out writes to an object marked by the apply function. \"\"\" compile_intrinsic","title":"do_not_optimise.pony"},{"location":"src/builtin/env/","text":"use @pony_os_stdin_setup[Bool]() use @pony_os_stdout_setup[None]() class val Env \"\"\" An environment holds the command line and other values injected into the program by default by the runtime. \"\"\" let root: (AmbientAuth | None) \"\"\" The root capability. Can be `None` for artificially constructed `Env` instances. \"\"\" let input: InputStream \"\"\" Stdin represented as an actor. \"\"\" let out: OutStream \"\"\"Stdout\"\"\" let err: OutStream \"\"\"Stderr\"\"\" let args: Array[String] val \"\"\"The command line used to start the program.\"\"\" let vars: Array[String] val \"\"\"The program's environment variables.\"\"\" let exitcode: {(I32)} val \"\"\" Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. \"\"\" new _create( argc: U32, argv: Pointer[Pointer[U8]] val, envp: Pointer[Pointer[U8]] val) => \"\"\" Builds an environment from the command line. This is done before the Main actor is created. \"\"\" root = AmbientAuth._create() @pony_os_stdout_setup() input = Stdin._create(@pony_os_stdin_setup()) out = StdStream._out() err = StdStream._err() args = _strings_from_pointers(argv, argc.usize()) vars = _strings_from_pointers(envp, _count_strings(envp)) exitcode = {(code: I32) => @pony_exitcode(code) } new val create( root': (AmbientAuth | None), input': InputStream, out': OutStream, err': OutStream, args': Array[String] val, vars': Array[String] val, exitcode': {(I32)} val) => \"\"\" Build an artificial environment. A root capability may be supplied. \"\"\" root = root' input = input' out = out' err = err' args = args' vars = vars' exitcode = exitcode' fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize => if data.is_null() then return 0 end var i: USize = 0 while let entry = data._apply(i) not entry.is_null() do i = i + 1 end i fun tag _strings_from_pointers( data: Pointer[Pointer[U8]] val, len: USize) : Array[String] iso^ => let array = recover Array[String](len) end var i: USize = 0 while i < len do let entry = data._apply(i = i + 1) array.push(recover String.copy_cstring(entry) end) end array","title":"env.pony"},{"location":"src/builtin/float/","text":"use @\"llvm.fabs.f32\"[F32](x: F32) use @\"llvm.fabs.f64\"[F64](x: F64) use @\"llvm.ceil.f32\"[F32](x: F32) use @\"llvm.ceil.f64\"[F64](x: F64) use @\"llvm.floor.f32\"[F32](x: F32) use @\"llvm.floor.f64\"[F64](x: F64) use @\"llvm.round.f32\"[F32](x: F32) use @\"llvm.round.f64\"[F64](x: F64) use @\"llvm.trunc.f32\"[F32](x: F32) use @\"llvm.trunc.f64\"[F64](x: F64) use @\"llvm.log.f32\"[F32](x: F32) use @\"llvm.log.f64\"[F64](x: F64) use @\"llvm.log2.f32\"[F32](x: F32) use @\"llvm.log2.f64\"[F64](x: F64) use @\"llvm.log10.f32\"[F32](x: F32) use @\"llvm.log10.f64\"[F64](x: F64) use @logbf[F32](x: F32) use @logb[F64](x: F64) use @\"llvm.pow.f32\"[F32](x: F32, y: F32) use @\"llvm.pow.f64\"[F64](x: F64, y: F64) use @\"llvm.powi.f32\"[F32](x: F32, y: I32) if not windows use @\"llvm.powi.f64\"[F64](x: F64, y: I32) if not windows use @\"llvm.sqrt.f32\"[F32](x: F32) use @\"llvm.sqrt.f64\"[F64](x: F64) use @cbrtf[F32](x: F32) use @cbrt[F64](x: F64) use @\"llvm.exp.f32\"[F32](x: F32) use @\"llvm.exp.f64\"[F64](x: F64) use @\"llvm.exp2.f32\"[F32](x: F32) use @\"llvm.exp2.f64\"[F64](x: F64) use @\"llvm.cos.f32\"[F32](x: F32) use @\"llvm.cos.f64\"[F64](x: F64) use @\"llvm.sin.f32\"[F32](x: F32) use @\"llvm.sin.f64\"[F64](x: F64) use @tanf[F32](x: F32) use @coshf[F32](x: F32) use @sinhf[F32](x: F32) use @tanhf[F32](x: F32) use @acosf[F32](x: F32) use @asinf[F32](x: F32) use @atanf[F32](x: F32) use @atan2f[F32](x: F32, y: F32) use @acoshf[F32](x: F32) use @asinhf[F32](x: F32) use @atanhf[F32](x: F32) use @tan[F64](x: F64) use @cosh[F64](x: F64) use @sinh[F64](x: F64) use @tanh[F64](x: F64) use @acos[F64](x: F64) use @asin[F64](x: F64) use @atan[F64](x: F64) use @atan2[F64](x: F64, y: F64) use @acosh[F64](x: F64) use @asinh[F64](x: F64) use @atanh[F64](x: F64) use @\"llvm.copysign.f32\"[F32](x: F32, sign: F32) use @\"llvm.copysign.f64\"[F64](x: F64, sign: F64) use @frexp[F64](value: F64, exponent: Pointer[U32]) use @ldexpf[F32](value: F32, exponent: I32) use @ldexp[F64](value: F64, exponent: I32) primitive F32 is FloatingPoint[F32] new create(value: F32 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U32) => compile_intrinsic fun bits(): U32 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f32() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFF7FFFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7F7FFFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x00800000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x34000000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 24 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 6 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -125 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -37 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 128 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 38 fun abs(): F32 => @\"llvm.fabs.f32\"(this) fun ceil(): F32 => @\"llvm.ceil.f32\"(this) fun floor(): F32 => @\"llvm.floor.f32\"(this) fun round(): F32 => @\"llvm.round.f32\"(this) fun trunc(): F32 => @\"llvm.trunc.f32\"(this) fun min(y: F32): F32 => if this < y then this else y end fun max(y: F32): F32 => if this > y then this else y end fun fld(y: F32): F32 => (this / y).floor() fun fld_unsafe(y: F32): F32 => (this /~ y).floor() fun mod(y: F32): F32 => let r = this % y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F32): F32 => let r = this %~ y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7F800000) != 0x7F800000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) != 0) // mantissa fun ldexp(x: F32, exponent: I32): F32 => @ldexpf(x, exponent) fun frexp(): (F32, U32) => var exponent: U32 = 0 var mantissa = @frexp(f64(), addressof exponent) (mantissa.f32(), exponent) fun log(): F32 => @\"llvm.log.f32\"(this) fun log2(): F32 => @\"llvm.log2.f32\"(this) fun log10(): F32 => @\"llvm.log10.f32\"(this) fun logb(): F32 => @logbf(this) fun pow(y: F32): F32 => @\"llvm.pow.f32\"(this, y) fun powi(y: I32): F32 => ifdef windows then pow(y.f32()) else @\"llvm.powi.f32\"(this, y) end fun sqrt(): F32 => if this < 0.0 then _nan() else @\"llvm.sqrt.f32\"(this) end fun sqrt_unsafe(): F32 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f32\"(this) fun cbrt(): F32 => @cbrtf(this) fun exp(): F32 => @\"llvm.exp.f32\"(this) fun exp2(): F32 => @\"llvm.exp2.f32\"(this) fun cos(): F32 => @\"llvm.cos.f32\"(this) fun sin(): F32 => @\"llvm.sin.f32\"(this) fun tan(): F32 => @tanf(this) fun cosh(): F32 => @coshf(this) fun sinh(): F32 => @sinhf(this) fun tanh(): F32 => @tanhf(this) fun acos(): F32 => @acosf(this) fun asin(): F32 => @asinf(this) fun atan(): F32 => @atanf(this) fun atan2(y: F32): F32 => @atan2f(this, y) fun acosh(): F32 => @acoshf(this) fun asinh(): F32 => @asinhf(this) fun atanh(): F32 => @atanhf(this) fun copysign(sign: F32): F32 => @\"llvm.copysign.f32\"(this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => f64().i128() fun u128(): U128 => f64().u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().i128_unsafe() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().u128_unsafe() primitive F64 is FloatingPoint[F64] new create(value: F64 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U64) => compile_intrinsic fun bits(): U64 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f64() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFFEF_FFFF_FFFF_FFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7FEF_FFFF_FFFF_FFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x0010_0000_0000_0000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x3CB0_0000_0000_0000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 53 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 15 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -1021 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -307 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 1024 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 308 fun abs(): F64 => @\"llvm.fabs.f64\"(this) fun ceil(): F64 => @\"llvm.ceil.f64\"(this) fun floor(): F64 => @\"llvm.floor.f64\"(this) fun round(): F64 => @\"llvm.round.f64\"(this) fun trunc(): F64 => @\"llvm.trunc.f64\"(this) fun min(y: F64): F64 => if this < y then this else y end fun max(y: F64): F64 => if this > y then this else y end fun fld(y: F64): F64 => (this / y).floor() fun fld_unsafe(y: F64): F64 => (this /~ y).floor() fun mod(y: F64): F64 => let r = this.rem(y) if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F64): F64 => let r = this %~ y if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0) // mantissa fun ldexp(x: F64, exponent: I32): F64 => @ldexp(x, exponent) fun frexp(): (F64, U32) => var exponent: U32 = 0 var mantissa = @frexp(this, addressof exponent) (mantissa, exponent) fun log(): F64 => @\"llvm.log.f64\"(this) fun log2(): F64 => @\"llvm.log2.f64\"(this) fun log10(): F64 => @\"llvm.log10.f64\"(this) fun logb(): F64 => @logb(this) fun pow(y: F64): F64 => @\"llvm.pow.f64\"(this, y) fun powi(y: I32): F64 => ifdef windows then pow(y.f64()) else @\"llvm.powi.f64\"(this, y) end fun sqrt(): F64 => if this < 0.0 then _nan() else @\"llvm.sqrt.f64\"(this) end fun sqrt_unsafe(): F64 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f64\"(this) fun cbrt(): F64 => @cbrt(this) fun exp(): F64 => @\"llvm.exp.f64\"(this) fun exp2(): F64 => @\"llvm.exp2.f64\"(this) fun cos(): F64 => @\"llvm.cos.f64\"(this) fun sin(): F64 => @\"llvm.sin.f64\"(this) fun tan(): F64 => @tan(this) fun cosh(): F64 => @cosh(this) fun sinh(): F64 => @sinh(this) fun tanh(): F64 => @tanh(this) fun acos(): F64 => @acos(this) fun asin(): F64 => @asin(this) fun atan(): F64 => @atan(this) fun atan2(y: F64): F64 => @atan2(this, y) fun acosh(): F64 => @acosh(this) fun asinh(): F64 => @asinh(this) fun atanh(): F64 => @atanh(this) fun copysign(sign: F64): F64 => @\"llvm.copysign.f64\"(this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => if this > I128.max_value().f64() then return I128.max_value() elseif this < I128.min_value().f64() then return I128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if ex < 0 then return 0 end let s = ((high and 0x80000000) >> 31).i128() var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end (r xor s) - s fun u128(): U128 => if this > U128.max_value().f64() then return U128.max_value() elseif this < U128.min_value().f64() then return U128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if (ex < 0) or ((high and 0x80000000) != 0) then return 0 end var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end r.u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" i128() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" u128() type Float is (F32 | F64)","title":"float.pony"},{"location":"src/builtin/iterator/","text":"interface Iterator[A] \"\"\" Iterators generate a series of values, one value at a time on each call to `next()`. An Iterator is considered exhausted, once its `has_next()` method returns `false`. Thus every call to `next()` should be preceeded with a call to `has_next()` to check for exhaustiveness. ## Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: ```pony while iterator.has_next() do let elem = iterator.next()? // do something with elem end ``` The `For`-loop provides a more concise way of iteration: ```pony for elem in iterator do // do something with elem end ``` Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors. The `For`-loop does not allow this. ## Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: * If the Iterator is exhausted, `has_next()` needs to return `false`. * Once `has_next()` returned `false` it is not allowed to switch back to `true` (Unless the Iterator supports rewinding) * `has_next()` does not change its returned value if `next()` has not been called. That means, that between two calls to `next()` any number of calls to `has_next()` need to return the same value. (Unless the Iterator supports rewinding) * A call to `next()` erroring does not necessarily denote exhaustiveness. ### Example ```pony // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem ``` \"\"\" fun ref has_next(): Bool \"\"\" Returns `true` if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to `next()` is a valid part of this iterator. Returns `false` if this Iterator is exhausted. The behavior of `next()` after this function returned `false` is undefined, it might throw an error or return values which are not part of this Iterator. \"\"\" fun ref next(): A ? \"\"\" Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. \"\"\"","title":"iterator.pony"},{"location":"src/builtin/none/","text":"primitive None is Stringable fun string(): String iso^ => \"None\".string()","title":"none.pony"},{"location":"src/builtin/nullable_pointer/","text":"struct NullablePointer[A] \"\"\" A NullablePointer[A] is used to encode a possibly-null type. It should _only_ be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). \"\"\" new create(that: A) => \"\"\" This re-encodes the type of `that` from A to NullablePointer[A], allowing `that` to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for `that`. \"\"\" compile_intrinsic new none() => \"\"\" This returns a null pointer typed as a NullablePointer[A]. \"\"\" compile_intrinsic fun apply(): this->A ? => \"\"\" This re-encodes the type of `this` from NullablePointer[A] to A, allowing `this` to be assigned to a field of variable of type A. If `this` is a null pointer, an error is raised. \"\"\" compile_intrinsic fun is_none(): Bool => \"\"\" Returns true if `this` is null (ie apply would raise an error). \"\"\" compile_intrinsic","title":"nullable_pointer.pony"},{"location":"src/builtin/platform/","text":"primitive Platform fun bsd(): Bool => freebsd() or dragonfly() or openbsd() fun freebsd(): Bool => compile_intrinsic fun dragonfly(): Bool => compile_intrinsic fun openbsd(): Bool => compile_intrinsic fun linux(): Bool => compile_intrinsic fun osx(): Bool => compile_intrinsic fun posix(): Bool => bsd() or linux() or osx() fun windows(): Bool => compile_intrinsic fun x86(): Bool => compile_intrinsic fun arm(): Bool => compile_intrinsic fun lp64(): Bool => compile_intrinsic fun llp64(): Bool => compile_intrinsic fun ilp32(): Bool => compile_intrinsic fun bigendian(): Bool => compile_intrinsic fun littleendian(): Bool => compile_intrinsic fun native128(): Bool => compile_intrinsic fun debug(): Bool => compile_intrinsic","title":"platform.pony"},{"location":"src/builtin/pointer/","text":"struct Pointer[A] \"\"\" A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. \"\"\" new create() => \"\"\" A null pointer. \"\"\" compile_intrinsic new _alloc(len: USize) => \"\"\" Space for len instances of A. \"\"\" compile_intrinsic fun ref _realloc(len: USize): Pointer[A] => \"\"\" Keep the contents, but reserve space for len instances of A. \"\"\" compile_intrinsic fun tag _unsafe(): Pointer[A] ref => \"\"\" Unsafe change in reference capability. \"\"\" compile_intrinsic fun _convert[B](): this->Pointer[B] => \"\"\" Convert from Pointer[A] to Pointer[B]. \"\"\" compile_intrinsic fun _apply(i: USize): this->A => \"\"\" Retrieve index i. \"\"\" compile_intrinsic fun ref _update(i: USize, value: A!): A^ => \"\"\" Set index i and return the previous value. \"\"\" compile_intrinsic fun _offset(n: USize): this->Pointer[A] => \"\"\" Return a pointer to the n-th element. \"\"\" compile_intrinsic fun tag offset(n: USize): Pointer[A] tag => \"\"\" Return a tag pointer to the n-th element. \"\"\" _unsafe()._offset(n) fun tag _element_size(): USize => \"\"\" Return the size of a single element in an array of type A. \"\"\" compile_intrinsic fun ref _insert(n: USize, len: USize): Pointer[A] => \"\"\" Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. \"\"\" compile_intrinsic fun ref _delete(n: USize, len: USize): A^ => \"\"\" Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. \"\"\" compile_intrinsic fun _copy_to(that: Pointer[this->A!], n: USize): this->Pointer[A] => \"\"\" Copy n elements from this to that. \"\"\" compile_intrinsic fun tag usize(): USize => \"\"\" Convert the pointer into an integer. \"\"\" compile_intrinsic fun tag is_null(): Bool => \"\"\" Return true for a null pointer, false for anything else. \"\"\" compile_intrinsic fun tag eq(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is that address. \"\"\" compile_intrinsic fun tag lt(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is less than that address. \"\"\" compile_intrinsic fun tag ne(that: Pointer[A] tag): Bool => not eq(that) fun tag le(that: Pointer[A] tag): Bool => lt(that) or eq(that) fun tag ge(that: Pointer[A] tag): Bool => not lt(that) fun tag gt(that: Pointer[A] tag): Bool => not le(that) fun tag hash(): USize => \"\"\" Returns a hash of the address. \"\"\" usize().hash() fun tag hash64(): U64 => \"\"\" Returns a 64-bit hash of the address. \"\"\" usize().hash64()","title":"pointer.pony"},{"location":"src/builtin/read_seq/","text":"interface box ReadSeq[A] \"\"\" The readable interface of a sequence. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. \"\"\" interface box ReadElement[A] \"\"\" Used to show that a ReadSeq can return an element of a specific unmodified type. \"\"\" fun apply(i: USize): A ?","title":"read_seq.pony"},{"location":"src/builtin/real/","text":"trait val _ArithmeticConvertible fun i8(): I8 => compile_intrinsic fun i16(): I16 => compile_intrinsic fun i32(): I32 => compile_intrinsic fun i64(): I64 => compile_intrinsic fun i128(): I128 => compile_intrinsic fun ilong(): ILong => compile_intrinsic fun isize(): ISize => compile_intrinsic fun u8(): U8 => compile_intrinsic fun u16(): U16 => compile_intrinsic fun u32(): U32 => compile_intrinsic fun u64(): U64 => compile_intrinsic fun u128(): U128 => compile_intrinsic fun ulong(): ULong => compile_intrinsic fun usize(): USize => compile_intrinsic fun f32(): F32 => compile_intrinsic fun f64(): F64 => compile_intrinsic fun i8_unsafe(): I8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i16_unsafe(): I16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i32_unsafe(): I32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i64_unsafe(): I64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ilong_unsafe(): ILong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun isize_unsafe(): ISize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u8_unsafe(): U8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u16_unsafe(): U16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u32_unsafe(): U32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u64_unsafe(): U64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ulong_unsafe(): ULong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun usize_unsafe(): USize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic trait val Real[A: Real[A] val] is (Stringable & _ArithmeticConvertible & Comparable[A]) new val create(value: A) new val from[B: (Number & Real[B] val)](a: B) new val min_value() new val max_value() fun add(y: A): A => this + y fun sub(y: A): A => this - y fun mul(y: A): A => this * y fun div(y: A): A => \"\"\" Integer division, rounded towards zero. \"\"\" this / y fun divrem(y: A): (A, A) => (this / y, this % y) fun rem(y: A): A => \"\"\" Calculate the remainder after integer division, rounded towards zero (`div`). The result has the sign of the dividend. \"\"\" this % y fun neg(): A => -this fun fld(y: A): A \"\"\" Floored integer division, rounded towards negative infinity. \"\"\" fun mod(y: A): A \"\"\" Calculate the modulo after floored integer division, rounded towards negative infinity (`fld`). The result has the sign of the divisor. \"\"\" fun eq(y: box->A): Bool => this == y fun ne(y: box->A): Bool => this != y fun lt(y: box->A): Bool => this < y fun le(y: box->A): Bool => this <= y fun ge(y: box->A): Bool => this >= y fun gt(y: box->A): Bool => this > y fun min(y: A): A fun max(y: A): A fun hash(): USize => var x = usize() ifdef ilp32 then x = (not x) + (x << 15) x = x xor (x >> 12) x = x + (x << 2) x = x xor (x >> 4) x = (x + (x << 3)) + (x << 11) x = x xor (x >> 16) x else hash64().usize() end fun hash64(): U64 => var x = u64() x = (not x) + (x << 21) x = x xor (x >> 24) x = (x + (x << 3)) + (x << 8) x = x xor (x >> 14) x = (x + (x << 2)) + (x << 4) x = x xor (x >> 28) x = x + (x << 31) x fun _value(): A => compile_intrinsic trait val Integer[A: Integer[A] val] is Real[A] fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this /~ y fun divrem_unsafe(y: A): (A, A) => \"\"\" Calculates the quotient of this number and `y` and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Calculates the remainder of this number divided by `y`. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this %~ y fun fld_unsafe(y: A): A \"\"\" Floored division, rounded towards negative infinity, as opposed to `div` which rounds towards zero. *Unsafe Operation* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun mod_unsafe(y: A): A \"\"\" Calculates the modulo of this number after floored division by `y`. *Unsafe Operation.* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun add_partial(y: A): A ? \"\"\" Add y to this number. If the operation overflows this function errors. \"\"\" fun sub_partial(y: A): A ? \"\"\" Subtract y from this number. If the operation overflows/underflows this function errors. \"\"\" fun mul_partial(y: A): A ? \"\"\" Multiply y with this number. If the operation overflows this function errors. \"\"\" fun div_partial(y: A): A ? \"\"\" Divides this number by `y`, rounds the result towards zero. If y is `0` or the operation overflows, this function errors. \"\"\" fun rem_partial(y: A): A ? \"\"\" Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is `0` or the operation overflows, this function errors. \"\"\" fun divrem_partial(y: A): (A, A) ? \"\"\" Divides this number by y and calculates the remainder of the operation. If y is `0` or the operation overflows, this function errors. \"\"\" fun fld_partial(y: A): A ? \"\"\" Floored integer division, rounded towards negative infinity. If y is `0` or the operation overflows, this function errors \"\"\" fun mod_partial(y: A): A ? \"\"\" Calculates the modulo of this number and `y` after floored division (`fld`). The result has the sign of the divisor. If y is `0` or the operation overflows, this function errors. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" -~this fun addc(y: A): (A, Bool) \"\"\" Add `y` to this integer and return the result and a flag indicating overflow. \"\"\" fun subc(y: A): (A, Bool) \"\"\" Subtract `y` from this integer and return the result and a flag indicating overflow. \"\"\" fun mulc(y: A): (A, Bool) \"\"\" Multiply `y` with this integer and return the result and a flag indicating overflow. \"\"\" fun divc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result and a flag indicating overflow or division by zero. \"\"\" fun remc(y: A): (A, Bool) \"\"\" Calculate the remainder of this number divided by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. \"\"\" fun fldc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. \"\"\" fun modc(y: A): (A, Bool) \"\"\" Calculate the modulo of this number after floored division by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. \"\"\" fun op_and(y: A): A => this and y fun op_or(y: A): A => this or y fun op_xor(y: A): A => this xor y fun op_not(): A => not this fun bit_reverse(): A \"\"\" Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). \"\"\" fun bswap(): A trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] fun abs(): B fun shl(y: B): A => this << y fun shr(y: B): A => this >> y fun shl_unsafe(y: B): A => \"\"\" Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: B): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun popcount(): B fun clz(): B fun ctz(): B fun clz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): B fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(abs().u64(), i64() < 0) trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] fun abs(): A fun shl(y: A): A => this << y fun shr(y: A): A => this >> y // both fld and mod behave the same as div and rem for unsigned integers fun fld(y: A): A => this / y fun fldc(y: A): (A, Bool) => this.divc(y) fun fld_partial(y: A): A ? => this.div_partial(y)? fun fld_unsafe(y: A): A => this.div_unsafe(y) fun mod(y: A): A => this % y fun modc(y: A): (A, Bool) => this.remc(y) fun mod_partial(y: A): A ? => this.rem_partial(y)? fun mod_unsafe(y: A): A => this.rem_unsafe(y) fun shl_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun rotl(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this << y') or (this >> (bitwidth() - y')) end fun rotr(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this >> y') or (this << (bitwidth() - y')) end fun popcount(): A fun clz(): A fun ctz(): A fun clz_unsafe(): A \"\"\" Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): A \"\"\" Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): A fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(u64(), false) trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] new val min_normalised() new val epsilon() fun tag radix(): U8 fun tag precision2(): U8 fun tag precision10(): U8 fun tag min_exp2(): I16 fun tag min_exp10(): I16 fun tag max_exp2(): I16 fun tag max_exp10(): I16 fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this /~ y fun fld_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun divrem_unsafe(y: A): (A, A) => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this %~ y fun mod_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" -~this fun eq_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this ==~ y fun ne_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this !=~ y fun lt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <~ y fun le_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <=~ y fun ge_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >=~ y fun gt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >~ y fun abs(): A fun ceil(): A fun floor(): A fun round(): A fun trunc(): A fun finite(): Bool fun infinite(): Bool fun nan(): Bool fun ldexp(x: A, exponent: I32): A fun frexp(): (A, U32) fun log(): A fun log2(): A fun log10(): A fun logb(): A fun pow(y: A): A fun powi(y: I32): A fun sqrt(): A fun sqrt_unsafe(): A \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" fun cbrt(): A fun exp(): A fun exp2(): A fun cos(): A fun sin(): A fun tan(): A fun cosh(): A fun sinh(): A fun tanh(): A fun acos(): A fun asin(): A fun atan(): A fun atan2(y: A): A fun acosh(): A fun asinh(): A fun atanh(): A fun copysign(sign: A): A fun string(): String iso^ => _ToString._f64(f64()) type Number is (Int | Float) type Int is (Signed | Unsigned)","title":"real.pony"},{"location":"src/builtin/runtime_options/","text":"struct RuntimeOptions \"\"\" Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program. The way this is done is by adding the following function to your `Main` actor: ``` fun @runtime_override_defaults(rto: RuntimeOptions) => ``` and then overriding the fields of `rto` (the `RuntimeOptions` instance) as needed. NOTE: Command line arguments still any values set via `@runtime_override_defaults`. The following example overrides the `--ponyhelp` argument to default it to `true` instead of `false` causing the compiled program to always display the Pony runtime help: ``` actor Main new create(env: Env) => env.out.print(\"Hello, world.\") fun @runtime_override_defaults(rto: RuntimeOptions) => rto.ponyhelp = true ``` \"\"\" /* NOTE: if you change any of the field docstrings, update `options.h` in * the runtime to keep them in sync. */ var ponymaxthreads: U32 = 0 \"\"\" Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available. \"\"\" var ponyminthreads: U32 = 0 \"\"\" Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available. \"\"\" var ponynoscale: Bool = false \"\"\" Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads. \"\"\" var ponysuspendthreshold: U32 = 0 \"\"\" Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms. \"\"\" var ponycdinterval: U32 = 100 \"\"\" Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms. \"\"\" var ponygcinitial: USize = 14 \"\"\" Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14. \"\"\" var ponygcfactor: F64 = 2.0 \"\"\" After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0. \"\"\" var ponynoyield: Bool = false \"\"\" Do not yield the CPU when no work is available. \"\"\" var ponynoblock: Bool = false \"\"\" Do not send block messages to the cycle detector. \"\"\" var ponypin: Bool = false \"\"\" Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if `--ponypinasio` is set. \"\"\" var ponypinasio: Bool = false \"\"\" Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires `--ponypin` to be set to have any effect. \"\"\" var ponyversion: Bool = false \"\"\" Print the version of the compiler and exit. \"\"\" var ponyhelp: Bool = false \"\"\" Print the runtime usage options and exit. \"\"\"","title":"runtime_options.pony"},{"location":"src/builtin/seq/","text":"interface Seq[A] \"\"\" A sequence of elements. \"\"\" new create(len: USize = 0) \"\"\" Create a sequence, reserving space for len elements. \"\"\" fun ref reserve(len: USize) \"\"\" Reserve space for len elements. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. \"\"\" fun ref update(i: USize, value: A): A^ ? \"\"\" Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. \"\"\" fun ref clear() \"\"\" Removes all elements from the sequence. \"\"\" fun ref push(value: A) \"\"\" Adds an element to the end of the sequence. \"\"\" fun ref pop(): A^ ? \"\"\" Removes an element from the end of the sequence. \"\"\" fun ref unshift(value: A) \"\"\" Adds an element to the beginning of the sequence. \"\"\" fun ref shift(): A^ ? \"\"\" Removes an element from the beginning of the sequence. \"\"\" fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) \"\"\" Add len elements to the end of the list, starting from the given offset. \"\"\" fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) \"\"\" Add len iterated elements to the end of the list, starting from the given offset. \"\"\" fun ref truncate(len: USize) \"\"\" Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. \"\"\"","title":"seq.pony"},{"location":"src/builtin/signed/","text":"use @\"llvm.sadd.with.overflow.i8\"[(I8, Bool)](a: I8, b: I8) use @\"llvm.sadd.with.overflow.i16\"[(I16, Bool)](a: I16, b: I16) use @\"llvm.sadd.with.overflow.i32\"[(I32, Bool)](a: I32, b: I32) use @\"llvm.sadd.with.overflow.i64\"[(I64, Bool)](a: I64, b: I64) use @\"llvm.sadd.with.overflow.i128\"[(I128, Bool)](a: I128, b: I128) use @\"llvm.ssub.with.overflow.i8\"[(I8, Bool)](a: I8, b: I8) use @\"llvm.ssub.with.overflow.i16\"[(I16, Bool)](a: I16, b: I16) use @\"llvm.ssub.with.overflow.i32\"[(I32, Bool)](a: I32, b: I32) use @\"llvm.ssub.with.overflow.i64\"[(I64, Bool)](a: I64, b: I64) use @\"llvm.ssub.with.overflow.i128\"[(I128, Bool)](a: I128, b: I128) use @\"llvm.smul.with.overflow.i8\"[(I8, Bool)](a: I8, b: I8) use @\"llvm.smul.with.overflow.i16\"[(I16, Bool)](a: I16, b: I16) use @\"llvm.smul.with.overflow.i32\"[(I32, Bool)](a: I32, b: I32) use @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](a: I64, b: I64) primitive I8 is SignedInteger[I8, U8] new create(value: I8) => value new from[A: (Number & Real[A] val)](a: A) => a.i8() new min_value() => -0x80 new max_value() => 0x7F fun abs(): U8 => if this < 0 then (-this).u8() else this.u8() end fun bit_reverse(): I8 => @\"llvm.bitreverse.i8\"(this.u8()).i8() fun bswap(): I8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"(this.u8()) fun clz(): U8 => @\"llvm.ctlz.i8\"(this.u8(), false) fun ctz(): U8 => @\"llvm.cttz.i8\"(this.u8(), false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"(this.u8(), true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"(this.u8(), true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I8): I8 => if this < y then this else y end fun max(y: I8): I8 => if this > y then this else y end fun fld(y: I8): I8 => _SignedArithmetic.fld[I8, U8](this, y) fun fld_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.fld_unsafe[I8, U8](this, y) fun mod(y: I8): I8 => _SignedArithmetic.mod[I8, U8](this, y) fun mod_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.mod_unsafe[I8, U8](this, y) fun addc(y: I8): (I8, Bool) => @\"llvm.sadd.with.overflow.i8\"(this, y) fun subc(y: I8): (I8, Bool) => @\"llvm.ssub.with.overflow.i8\"(this, y) fun mulc(y: I8): (I8, Bool) => @\"llvm.smul.with.overflow.i8\"(this, y) fun divc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.div_checked[I8, U8](this, y) fun remc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.rem_checked[I8, U8](this, y) fun fldc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.fld_checked[I8, U8](this, y) fun modc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.mod_checked[I8, U8](this, y) fun add_partial(y: I8): I8 ? => _SignedPartialArithmetic.add_partial[I8](this, y)? fun sub_partial(y: I8): I8 ? => _SignedPartialArithmetic.sub_partial[I8](this, y)? fun mul_partial(y: I8): I8 ? => _SignedPartialArithmetic.mul_partial[I8](this, y)? fun div_partial(y: I8): I8 ? => _SignedPartialArithmetic.div_partial[I8, U8](this, y)? fun rem_partial(y: I8): I8 ? => _SignedPartialArithmetic.rem_partial[I8, U8](this, y)? fun divrem_partial(y: I8): (I8, I8) ? => _SignedPartialArithmetic.divrem_partial[I8, U8](this, y)? fun fld_partial(y: I8): I8 ? => _SignedPartialArithmetic.fld_partial[I8, U8](this, y)? fun mod_partial(y: I8): I8 ? => _SignedPartialArithmetic.mod_partial[I8, U8](this, y)? primitive I16 is SignedInteger[I16, U16] new create(value: I16) => value new from[A: (Number & Real[A] val)](a: A) => a.i16() new min_value() => -0x8000 new max_value() => 0x7FFF fun abs(): U16 => if this < 0 then (-this).u16() else this.u16() end fun bit_reverse(): I16 => @\"llvm.bitreverse.i16\"(this.u16()).i16() fun bswap(): I16 => @\"llvm.bswap.i16\"(this.u16()).i16() fun popcount(): U16 => @\"llvm.ctpop.i16\"(this.u16()) fun clz(): U16 => @\"llvm.ctlz.i16\"(this.u16(), false) fun ctz(): U16 => @\"llvm.cttz.i16\"(this.u16(), false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"(this.u16(), true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"(this.u16(), true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I16): I16 => if this < y then this else y end fun max(y: I16): I16 => if this > y then this else y end fun fld(y: I16): I16 => _SignedArithmetic.fld[I16, U16](this, y) fun fld_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.fld_unsafe[I16, U16](this, y) fun mod(y: I16): I16 => _SignedArithmetic.mod[I16, U16](this, y) fun mod_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.mod_unsafe[I16, U16](this, y) fun addc(y: I16): (I16, Bool) => @\"llvm.sadd.with.overflow.i16\"(this, y) fun subc(y: I16): (I16, Bool) => @\"llvm.ssub.with.overflow.i16\"(this, y) fun mulc(y: I16): (I16, Bool) => @\"llvm.smul.with.overflow.i16\"(this, y) fun divc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.div_checked[I16, U16](this, y) fun remc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.rem_checked[I16, U16](this, y) fun fldc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.fld_checked[I16, U16](this, y) fun modc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.mod_checked[I16, U16](this, y) fun add_partial(y: I16): I16 ? => _SignedPartialArithmetic.add_partial[I16](this, y)? fun sub_partial(y: I16): I16 ? => _SignedPartialArithmetic.sub_partial[I16](this, y)? fun mul_partial(y: I16): I16 ? => _SignedPartialArithmetic.mul_partial[I16](this, y)? fun div_partial(y: I16): I16 ? => _SignedPartialArithmetic.div_partial[I16, U16](this, y)? fun rem_partial(y: I16): I16 ? => _SignedPartialArithmetic.rem_partial[I16, U16](this, y)? fun divrem_partial(y: I16): (I16, I16) ? => _SignedPartialArithmetic.divrem_partial[I16, U16](this, y)? fun fld_partial(y: I16): I16 ? => _SignedPartialArithmetic.fld_partial[I16, U16](this, y)? fun mod_partial(y: I16): I16 ? => _SignedPartialArithmetic.mod_partial[I16, U16](this, y)? primitive I32 is SignedInteger[I32, U32] new create(value: I32) => value new from[A: (Number & Real[A] val)](a: A) => a.i32() new min_value() => -0x8000_0000 new max_value() => 0x7FFF_FFFF fun abs(): U32 => if this < 0 then (-this).u32() else this.u32() end fun bit_reverse(): I32 => @\"llvm.bitreverse.i32\"(this.u32()).i32() fun bswap(): I32 => @\"llvm.bswap.i32\"(this.u32()).i32() fun popcount(): U32 => @\"llvm.ctpop.i32\"(this.u32()) fun clz(): U32 => @\"llvm.ctlz.i32\"(this.u32(), false) fun ctz(): U32 => @\"llvm.cttz.i32\"(this.u32(), false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"(this.u32(), true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"(this.u32(), true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I32): I32 => if this < y then this else y end fun max(y: I32): I32 => if this > y then this else y end fun fld(y: I32): I32 => _SignedArithmetic.fld[I32, U32](this, y) fun fld_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.fld_unsafe[I32, U32](this, y) fun mod(y: I32): I32 => _SignedArithmetic.mod[I32, U32](this, y) fun mod_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.mod_unsafe[I32, U32](this, y) fun addc(y: I32): (I32, Bool) => @\"llvm.sadd.with.overflow.i32\"(this, y) fun subc(y: I32): (I32, Bool) => @\"llvm.ssub.with.overflow.i32\"(this, y) fun mulc(y: I32): (I32, Bool) => @\"llvm.smul.with.overflow.i32\"(this, y) fun divc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.div_checked[I32, U32](this, y) fun remc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.rem_checked[I32, U32](this, y) fun fldc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.fld_checked[I32, U32](this, y) fun modc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.mod_checked[I32, U32](this, y) fun add_partial(y: I32): I32 ? => _SignedPartialArithmetic.add_partial[I32](this, y)? fun sub_partial(y: I32): I32 ? => _SignedPartialArithmetic.sub_partial[I32](this, y)? fun mul_partial(y: I32): I32 ? => _SignedPartialArithmetic.mul_partial[I32](this, y)? fun div_partial(y: I32): I32 ? => _SignedPartialArithmetic.div_partial[I32, U32](this, y)? fun rem_partial(y: I32): I32 ? => _SignedPartialArithmetic.rem_partial[I32, U32](this, y)? fun divrem_partial(y: I32): (I32, I32) ? => _SignedPartialArithmetic.divrem_partial[I32, U32](this, y)? fun fld_partial(y: I32): I32 ? => _SignedPartialArithmetic.fld_partial[I32, U32](this, y)? fun mod_partial(y: I32): I32 ? => _SignedPartialArithmetic.mod_partial[I32, U32](this, y)? primitive I64 is SignedInteger[I64, U64] new create(value: I64) => value new from[A: (Number & Real[A] val)](a: A) => a.i64() new min_value() => -0x8000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF fun abs(): U64 => if this < 0 then (-this).u64() else this.u64() end fun bit_reverse(): I64 => @\"llvm.bitreverse.i64\"(this.u64()).i64() fun bswap(): I64 => @\"llvm.bswap.i64\"(this.u64()).i64() fun popcount(): U64 => @\"llvm.ctpop.i64\"(this.u64()) fun clz(): U64 => @\"llvm.ctlz.i64\"(this.u64(), false) fun ctz(): U64 => @\"llvm.cttz.i64\"(this.u64(), false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"(this.u64(), true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"(this.u64(), true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I64): I64 => if this < y then this else y end fun max(y: I64): I64 => if this > y then this else y end fun fld(y: I64): I64 => _SignedArithmetic.fld[I64, U64](this, y) fun fld_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.fld_unsafe[I64, U64](this, y) fun mod(y: I64): I64 => _SignedArithmetic.mod[I64, U64](this, y) fun mod_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.mod_unsafe[I64, U64](this, y) fun hash(): USize => u64().hash() fun addc(y: I64): (I64, Bool) => @\"llvm.sadd.with.overflow.i64\"(this, y) fun subc(y: I64): (I64, Bool) => @\"llvm.ssub.with.overflow.i64\"(this, y) fun mulc(y: I64): (I64, Bool) => _SignedCheckedArithmetic._mul_checked[U64, I64](this, y) fun divc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.div_checked[I64, U64](this, y) fun remc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.rem_checked[I64, U64](this, y) fun fldc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.fld_checked[I64, U64](this, y) fun modc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.mod_checked[I64, U64](this, y) fun add_partial(y: I64): I64 ? => _SignedPartialArithmetic.add_partial[I64](this, y)? fun sub_partial(y: I64): I64 ? => _SignedPartialArithmetic.sub_partial[I64](this, y)? fun mul_partial(y: I64): I64 ? => _SignedPartialArithmetic.mul_partial[I64](this, y)? fun div_partial(y: I64): I64 ? => _SignedPartialArithmetic.div_partial[I64, U64](this, y)? fun rem_partial(y: I64): I64 ? => _SignedPartialArithmetic.rem_partial[I64, U64](this, y)? fun divrem_partial(y: I64): (I64, I64) ? => _SignedPartialArithmetic.divrem_partial[I64, U64](this, y)? fun fld_partial(y: I64): I64 ? => _SignedPartialArithmetic.fld_partial[I64, U64](this, y)? fun mod_partial(y: I64): I64 ? => _SignedPartialArithmetic.mod_partial[I64, U64](this, y)? primitive ILong is SignedInteger[ILong, ULong] new create(value: ILong) => value new from[A: (Number & Real[A] val)](a: A) => a.ilong() new min_value() => ifdef ilp32 or llp64 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 or llp64 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): ULong => if this < 0 then (-this).ulong() else this.ulong() end fun bit_reverse(): ILong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"(this.u32()).ilong() else @\"llvm.bitreverse.i64\"(this.u64()).ilong() end fun bswap(): ILong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"(this.u32()).ilong() else @\"llvm.bswap.i64\"(this.u64()).ilong() end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"(this.u32()).ulong() else @\"llvm.ctpop.i64\"(this.u64()).ulong() end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"(this.u32(), false).ulong() else @\"llvm.ctlz.i64\"(this.u64(), false).ulong() end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"(this.u32(), false).ulong() else @\"llvm.cttz.i64\"(this.u64(), false).ulong() end fun clz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"(this.u32(), true).ulong() else @\"llvm.ctlz.i64\"(this.u64(), true).ulong() end fun ctz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"(this.u32(), false).ulong() else @\"llvm.cttz.i64\"(this.u64(), true).ulong() end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ILong): ILong => if this < y then this else y end fun max(y: ILong): ILong => if this > y then this else y end fun fld(y: ILong): ILong => _SignedArithmetic.fld[ILong, ULong](this, y) fun fld_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.fld_unsafe[ILong, ULong](this, y) fun mod(y: ILong): ILong => _SignedArithmetic.mod[ILong, ULong](this, y) fun mod_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.mod_unsafe[ILong, ULong](this, y) fun hash(): USize => ulong().hash() fun addc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.sadd.with.overflow.i32\"(this.i32(), y.i32()) (r.ilong(), o) else (let r, let o) = @\"llvm.sadd.with.overflow.i64\"(this.i64(), y.i64()) (r.ilong(), o) end fun subc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.ssub.with.overflow.i32\"(this.i32(), y.i32()) (r.ilong(), o) else (let r, let o) = @\"llvm.ssub.with.overflow.i64\"(this.i64(), y.i64()) (r.ilong(), o) end fun mulc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.smul.with.overflow.i32\"(this.i32(), y.i32()) (r.ilong(), o) else _SignedCheckedArithmetic._mul_checked[ULong, ILong](this, y) end fun divc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.div_checked[ILong, ULong](this, y) fun remc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.rem_checked[ILong, ULong](this, y) fun fldc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.fld_checked[ILong, ULong](this, y) fun modc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.mod_checked[ILong, ULong](this, y) fun add_partial(y: ILong): ILong ? => _SignedPartialArithmetic.add_partial[ILong](this, y)? fun sub_partial(y: ILong): ILong ? => _SignedPartialArithmetic.sub_partial[ILong](this, y)? fun mul_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mul_partial[ILong](this, y)? fun div_partial(y: ILong): ILong ? => _SignedPartialArithmetic.div_partial[ILong, ULong](this, y)? fun rem_partial(y: ILong): ILong ? => _SignedPartialArithmetic.rem_partial[ILong, ULong](this, y)? fun divrem_partial(y: ILong): (ILong, ILong) ? => _SignedPartialArithmetic.divrem_partial[ILong, ULong](this, y)? fun fld_partial(y: ILong): ILong ? => _SignedPartialArithmetic.fld_partial[ILong, ULong](this, y)? fun mod_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mod_partial[ILong, ULong](this, y)? primitive ISize is SignedInteger[ISize, USize] new create(value: ISize) => value new from[A: (Number & Real[A] val)](a: A) => a.isize() new min_value() => ifdef ilp32 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): USize => if this < 0 then (-this).usize() else this.usize() end fun bit_reverse(): ISize => ifdef ilp32 then @\"llvm.bitreverse.i32\"(this.u32()).isize() else @\"llvm.bitreverse.i64\"(this.u64()).isize() end fun bswap(): ISize => ifdef ilp32 then @\"llvm.bswap.i32\"(this.u32()).isize() else @\"llvm.bswap.i64\"(this.u64()).isize() end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"(this.u32()).usize() else @\"llvm.ctpop.i64\"(this.u64()).usize() end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"(this.u32(), false).usize() else @\"llvm.ctlz.i64\"(this.u64(), false).usize() end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"(this.u32(), false).usize() else @\"llvm.cttz.i64\"(this.u64(), false).usize() end fun clz_unsafe(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"(this.u32(), true).usize() else @\"llvm.ctlz.i64\"(this.u64(), true).usize() end fun ctz_unsafe(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"(this.u32(), true).usize() else @\"llvm.cttz.i64\"(this.u64(), true).usize() end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ISize): ISize => if this < y then this else y end fun max(y: ISize): ISize => if this > y then this else y end fun fld(y: ISize): ISize => _SignedArithmetic.fld[ISize, USize](this, y) fun fld_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.fld_unsafe[ISize, USize](this, y) fun mod(y: ISize): ISize => _SignedArithmetic.mod[ISize, USize](this, y) fun mod_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.mod_unsafe[ISize, USize](this, y) fun addc(y: ISize): (ISize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.sadd.with.overflow.i32\"(this.i32(), y.i32()) (r.isize(), o) else (let r, let o) = @\"llvm.sadd.with.overflow.i64\"(this.i64(), y.i64()) (r.isize(), o) end fun subc(y: ISize): (ISize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.ssub.with.overflow.i32\"(this.i32(), y.i32()) (r.isize(), o) else (let r, let o) = @\"llvm.ssub.with.overflow.i64\"(this.i64(), y.i64()) (r.isize(), o) end fun mulc(y: ISize): (ISize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.smul.with.overflow.i32\"(this.i32(), y.i32()) (r.isize(), o) else _SignedCheckedArithmetic._mul_checked[USize, ISize](this, y) end fun divc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.div_checked[ISize, USize](this, y) fun remc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.rem_checked[ISize, USize](this, y) fun fldc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.fld_checked[ISize, USize](this, y) fun modc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.mod_checked[ISize, USize](this, y) fun add_partial(y: ISize): ISize ? => _SignedPartialArithmetic.add_partial[ISize](this, y)? fun sub_partial(y: ISize): ISize ? => _SignedPartialArithmetic.sub_partial[ISize](this, y)? fun mul_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mul_partial[ISize](this, y)? fun div_partial(y: ISize): ISize ? => _SignedPartialArithmetic.div_partial[ISize, USize](this, y)? fun rem_partial(y: ISize): ISize ? => _SignedPartialArithmetic.rem_partial[ISize, USize](this, y)? fun divrem_partial(y: ISize): (ISize, ISize) ? => _SignedPartialArithmetic.divrem_partial[ISize, USize](this, y)? fun fld_partial(y: ISize): ISize ? => _SignedPartialArithmetic.fld_partial[ISize, USize](this, y)? fun mod_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mod_partial[ISize, USize](this, y)? primitive I128 is SignedInteger[I128, U128] new create(value: I128) => value new from[A: (Number & Real[A] val)](a: A) => a.i128() new min_value() => -0x8000_0000_0000_0000_0000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun abs(): U128 => if this < 0 then (-this).u128() else this.u128() end fun bit_reverse(): I128 => @\"llvm.bitreverse.i128\"(this.u128()).i128() fun bswap(): I128 => @\"llvm.bswap.i128\"(this.u128()).i128() fun popcount(): U128 => @\"llvm.ctpop.i128\"(this.u128()) fun clz(): U128 => @\"llvm.ctlz.i128\"(this.u128(), false) fun ctz(): U128 => @\"llvm.cttz.i128\"(this.u128(), false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"(this.u128(), true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"(this.u128(), true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I128): I128 => if this < y then this else y end fun max(y: I128): I128 => if this > y then this else y end fun fld(y: I128): I128 => _SignedArithmetic.fld[I128, U128](this, y) fun fld_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.fld_unsafe[I128, U128](this, y) fun mod(y: I128): I128 => _SignedArithmetic.mod[I128, U128](this, y) fun mod_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.mod_unsafe[I128, U128](this, y) fun hash(): USize => u128().hash() fun hash64(): U64 => u128().hash64() fun string(): String iso^ => _ToString._u128(abs().u128(), this < 0) fun mul(y: I128): I128 => (u128() * y.u128()).i128() fun divrem(y: I128): (I128, I128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var num: I128 = if this >= 0 then this else -this end var den: I128 = if y >= 0 then y else -y end (let q, let r) = num.u128().divrem(den.u128()) (var q', var r') = (q.i128(), r.i128()) if this < 0 then r' = -r' if y > 0 then q' = -q' end elseif y < 0 then q' = -q' end (q', r') end fun div(y: I128): I128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: I128): I128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: I128): (I128, I128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => f64().f32() fun f64(): F64 => if this < 0 then -(-u128()).f64() else u128().f64() end fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.sadd.with.overflow.i128\"(this, y) else let overflow = if y > 0 then (this > (max_value() - y)) else (this < (min_value() - y)) end (this + y, overflow) end fun subc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.ssub.with.overflow.i128\"(this, y) else let overflow = if y > 0 then (this < (min_value() + y)) else (this > (max_value() + y)) end (this - y, overflow) end fun mulc(y: I128): (I128, Bool) => // using llvm.smul.with.overflow.i128 would require to link // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c // See this bug for reference: // the following implementation is more or less exactly was __muloti4 is // doing _SignedCheckedArithmetic._mul_checked[U128, I128](this, y) fun divc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.div_checked[I128, U128](this, y) fun remc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.rem_checked[I128, U128](this, y) fun fldc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.fld_checked[I128, U128](this, y) fun modc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.mod_checked[I128, U128](this, y) fun add_partial(y: I128): I128 ? => _SignedPartialArithmetic.add_partial[I128](this, y)? fun sub_partial(y: I128): I128 ? => _SignedPartialArithmetic.sub_partial[I128](this, y)? fun mul_partial(y: I128): I128 ? => _SignedPartialArithmetic.mul_partial[I128](this, y)? fun div_partial(y: I128): I128 ? => _SignedPartialArithmetic.div_partial[I128, U128](this, y)? fun rem_partial(y: I128): I128 ? => _SignedPartialArithmetic.rem_partial[I128, U128](this, y)? fun divrem_partial(y: I128): (I128, I128) ? => _SignedPartialArithmetic.divrem_partial[I128, U128](this, y)? fun fld_partial(y: I128): I128 ? => _SignedPartialArithmetic.fld_partial[I128, U128](this, y)? fun mod_partial(y: I128): I128 ? => _SignedPartialArithmetic.mod_partial[I128, U128](this, y)? type Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize)","title":"signed.pony"},{"location":"src/builtin/source_loc/","text":"interface val SourceLoc \"\"\" Represents a location in a Pony source file, as reported by `__loc`. \"\"\" fun file(): String \"\"\" Name and path of source file. \"\"\" fun type_name(): String \"\"\" Name of nearest class, actor, primitive, struct, interface, or trait. \"\"\" fun method_name(): String \"\"\" Name of containing method. \"\"\" fun line(): USize \"\"\" Line number within file. Line numbers start at 1. \"\"\" fun pos(): USize \"\"\" Character position on line. Character positions start at 1. \"\"\"","title":"source_loc.pony"},{"location":"src/builtin/std_stream/","text":"use @pony_os_stdout[Pointer[U8]]() use @pony_os_stderr[Pointer[U8]]() use @pony_os_std_flush[None](file: Pointer[None] tag) use @pony_os_std_print[None](file: Pointer[None] tag, buffer: Pointer[U8] tag, size: USize) use @pony_os_std_write[None](file: Pointer[None] tag, buffer: Pointer[U8] tag, size: USize) type ByteSeq is (String | Array[U8] val) interface val ByteSeqIter \"\"\" Accept an iterable collection of String or Array[U8] val. \"\"\" fun values(): Iterator[this->ByteSeq box] interface tag OutStream \"\"\" Asnychronous access to some output stream. \"\"\" be print(data: ByteSeq) \"\"\" Print some bytes and insert a newline afterwards. \"\"\" be write(data: ByteSeq) \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" be printv(data: ByteSeqIter) \"\"\" Print an iterable collection of ByteSeqs. \"\"\" be writev(data: ByteSeqIter) \"\"\" Write an iterable collection of ByteSeqs. \"\"\" be flush() \"\"\" Flush the stream. \"\"\" actor StdStream \"\"\" Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. \"\"\" var _stream: Pointer[U8] new _out() => \"\"\" Create an async stream for stdout. \"\"\" _stream = @pony_os_stdout() new _err() => \"\"\" Create an async stream for stderr. \"\"\" _stream = @pony_os_stderr() be print(data: ByteSeq) => \"\"\" Print some bytes and insert a newline afterwards. \"\"\" _print(data) be write(data: ByteSeq) => \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" _write(data) be printv(data: ByteSeqIter) => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _print(bytes) end be writev(data: ByteSeqIter) => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _write(bytes) end be flush() => \"\"\" Flush any data out to the os (ignoring failures). \"\"\" @pony_os_std_flush(_stream) fun ref _write(data: ByteSeq) => \"\"\" Write the bytes without explicitly flushing. \"\"\" @pony_os_std_write(_stream, data.cpointer(), data.size()) fun ref _print(data: ByteSeq) => \"\"\" Write the bytes and a newline without explicitly flushing. \"\"\" @pony_os_std_print(_stream, data.cpointer(), data.size())","title":"std_stream.pony"},{"location":"src/builtin/stdin/","text":"use @pony_asio_event_create[AsioEventID](owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) use @pony_os_stdin_read[USize]( buffer: Pointer[U8] tag, size: USize, out_again: Pointer[Bool]) interface InputNotify \"\"\" Notification for data arriving via an input stream. \"\"\" fun ref apply(data: Array[U8] iso) => \"\"\" Called when data is available on the stream. \"\"\" None fun ref dispose() => \"\"\" Called when no more data will arrive on the stream. \"\"\" None interface tag InputStream \"\"\" Asynchronous access to some input stream. \"\"\" be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" None actor Stdin \"\"\" Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an `InputNotify`: ```pony actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) ``` **Note:** For reading user input from a terminal, use the [term](term--index.md) package. \"\"\" var _notify: (InputNotify | None) = None var _chunk_size: USize = 32 var _event: AsioEventID = AsioEvent.none() let _use_event: Bool new _create(use_event: Bool) => \"\"\" Create an asynchronous stdin provider. \"\"\" _use_event = use_event be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) => \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" _set_notify(consume notify) _chunk_size = chunk_size be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" _set_notify(None) fun ref _set_notify(notify: (InputNotify iso | None)) => \"\"\" Set the notifier. \"\"\" if notify is None then if _use_event and not _event.is_null() then // Unsubscribe the event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end elseif _notify is None then if _use_event then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true) else // Start the read loop. _loop_read() end end try (_notify as InputNotify).dispose() end _notify = consume notify be _loop_read() => \"\"\" If we are able to read from stdin, schedule another read. \"\"\" if _read() then _loop_read() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When the event fires, read from stdin. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif (_event is event) and AsioEvent.readable(flags) then _read() end be _read_again() => \"\"\" Resume reading. \"\"\" _read() fun ref _read(): Bool => \"\"\" Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. \"\"\" try let notify = _notify as InputNotify var sum: USize = 0 while true do let chunk_size = _chunk_size var data = recover Array[U8] .> undefined(chunk_size) end var again: Bool = false let len = @pony_os_stdin_read(data.cpointer(), data.size(), addressof again) match len | -1 => // Error, possibly would block. Try again. return true | 0 => // EOF. Close everything, stop reading. _close_event() notify.dispose() _notify = None return false end data.truncate(len) notify(consume data) if not again then // Not allowed to call pony_os_stdin_read again yet, exit loop. return true end sum = sum + len if sum > (1 << 12) then if _use_event then _read_again() end break end end true else // No notifier. Stop reading. _close_event() false end fun ref _close_event() => \"\"\" Close the event. \"\"\" if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end","title":"stdin.pony"},{"location":"src/builtin/string/","text":"use @memcmp[I32](dst: Pointer[None] tag, src: Pointer[None] tag, len: USize) use @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize) use @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize) use @strtof[F32](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @strtod[F64](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @pony_os_clear_errno[None]() use @pony_os_errno[I32]() class val String is (Seq[U8] & Comparable[String box] & Stringable) \"\"\" A String is an ordered collection of bytes. Strings don't specify an encoding. Example usage of some common String methods: ```pony actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") ? // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") ? // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end ``` \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[U8] new create(len: USize = 0) => \"\"\" An empty string. Enough space for len bytes is reserved. \"\"\" _size = 0 _alloc = len.min(len.max_value() - 1) + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) new val from_array(data: Array[U8] val) => \"\"\" Create a string from an array, reusing the underlying data pointer. \"\"\" _size = data.size() _alloc = data.space() _ptr = data.cpointer()._unsafe() new iso from_iso_array(data: Array[U8] iso) => \"\"\" Create a string from an array, reusing the underlying data pointer \"\"\" _size = data.size() _alloc = data.space() _ptr = (consume data).cpointer()._unsafe() if _alloc > _size then _set(_size, 0) end new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) => \"\"\" Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = alloc.max(_size.min(len.max_value() - 1)) _ptr = str end new from_cstring(str: Pointer[U8]) => \"\"\" Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = str end new copy_cpointer(str: Pointer[U8] box, len: USize) => \"\"\" Create a string by copying a fixed number of bytes from a pointer. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new copy_cstring(str: Pointer[U8] box) => \"\"\" Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new from_utf32(value: U32) => \"\"\" Create a UTF-8 string from a single UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) _size = encoded._1 _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, encoded._2) if encoded._1 > 1 then _set(1, encoded._3) if encoded._1 > 2 then _set(2, encoded._4) if encoded._1 > 3 then _set(3, encoded._5) end end end _set(_size, 0) fun ref push_utf32(value: U32) => \"\"\" Push a UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) let i = _size _size = _size + encoded._1 reserve(_size) _set(i, encoded._2) if encoded._1 > 1 then _set(i + 1, encoded._3) if encoded._1 > 2 then _set(i + 2, encoded._4) if encoded._1 > 3 then _set(i + 3, encoded._5) end end end _set(_size, 0) fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy `copy_len` bytes from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to the underlying string allocation. \"\"\" _ptr._offset(offset) fun cstring(): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. \"\"\" if is_null_terminated() then return _ptr end let ptr = Pointer[U8]._alloc(_size + 1) _ptr._copy_to(ptr._unsafe(), _size) ptr._update(_size, 0) ptr fun val array(): Array[U8] val => \"\"\" Returns an Array[U8] that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun iso iso_array(): Array[U8] iso^ => \"\"\" Returns an Array[U8] iso that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun size(): USize => \"\"\" Returns the length of the string data in bytes. \"\"\" _size fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize => \"\"\" Returns the number of unicode code points in the string between the two offsets. Index range [`from` .. `to`) is half-open. \"\"\" if _size == 0 then return 0 end var i = offset_to_index(from) let j = offset_to_index(to).min(_size) var n = USize(0) while i < j do if (_ptr._apply(i) and 0xC0) != 0x80 then n = n + 1 end i = i + 1 end n fun space(): USize => \"\"\" Returns the space available for data, not including the null terminator. \"\"\" if is_null_terminated() then _alloc - 1 else _alloc end fun ref reserve(len: USize) => \"\"\" Reserve space for len bytes. An additional byte will be reserved for the null terminator. \"\"\" if _alloc <= len then let max = len.max_value() - 1 let min_alloc = len.min(max) + 1 if min_alloc <= (max / 2) then _alloc = min_alloc.next_pow2() else _alloc = min_alloc.min(max) end _ptr = _ptr._realloc(_alloc) end fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. \"\"\" if (_size + 1) <= 512 then if (_size + 1).next_pow2() != _alloc.next_pow2() then _alloc = (_size + 1).next_pow2() let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end elseif (_size + 1) < _alloc then _alloc = (_size + 1) let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end fun ref recalc() => \"\"\" Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. \"\"\" var s: USize = 0 while (s < _alloc) and (_ptr._apply(s) > 0) do s = s + 1 end if s != _alloc then _size = s end fun ref truncate(len: USize) => \"\"\" Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. \"\"\" if len >= _alloc then _size = len.min(_alloc) reserve(_alloc + 1) else _size = len.min(_alloc - 1) end _set(_size, 0) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the string to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new string nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this string and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[U8] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): String val => \"\"\" Return a shared portion of this string, covering `from` until `to`. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (String iso^, String iso^) => \"\"\" Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: String iso): ((String iso^, String iso^) | String iso^) => \"\"\" Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun is_null_terminated(): Bool => \"\"\" Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. \"\"\" (_alloc > 0) and (_alloc != _size) and (_ptr._apply(_size) == 0) fun utf32(offset: ISize): (U32, U8) ? => \"\"\" Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. \"\"\" let i = offset_to_index(offset) let err: (U32, U8) = (0xFFFD, 1) if i >= _size then error end let c = _ptr._apply(i) if c < 0x80 then // 1-byte (c.u32(), 1) elseif c < 0xC2 then // Stray continuation. err elseif c < 0xE0 then // 2-byte if (i + 1) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) if (c2 and 0xC0) != 0x80 then // Not a continuation byte. err else (((c.u32() << 6) + c2.u32()) - 0x3080, 2) end end elseif c < 0xF0 then // 3-byte. if (i + 2) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xE0) and (c2 < 0xA0)) then err else (((c.u32() << 12) + (c2.u32() << 6) + c3.u32()) - 0xE2080, 3) end end elseif c < 0xF5 then // 4-byte. if (i + 3) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) let c4 = _ptr._apply(i + 3) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or ((c4 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xF0) and (c2 < 0x90)) or // UTF32 would be > 0x10FFFF. ((c == 0xF4) and (c2 >= 0x90)) then err else (((c.u32() << 18) + (c2.u32() << 12) + (c3.u32() << 6) + c4.u32()) - 0x3C82080, 4) end end else // UTF32 would be > 0x10FFFF. err end fun apply(i: USize): U8 ? => \"\"\" Returns the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update(i: USize, value: U8): U8 ? => \"\"\" Change the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _set(i, value) else error end fun at_offset(offset: ISize): U8 ? => \"\"\" Returns the byte at the given offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? fun ref update_offset(offset: ISize, value: U8): U8 ? => \"\"\" Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? = value fun clone(): String iso^ => \"\"\" Returns a copy of the string. The resulting string is null-terminated even if the original is not. \"\"\" let len = _size let str = recover String(len) end _ptr._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str fun repeat_str(num: USize = 1, sep: String = \"\"): String iso^ => \"\"\" Returns a copy of the string repeated `num` times with an optional separator added inbetween repeats. \"\"\" var c = num var str = recover String((_size + sep.size()) * c) end while c > 0 do c = c - 1 str = (consume str)._append(this) if (sep.size() > 0) and (c != 0) then str = (consume str)._append(sep) end end consume str fun mul(num: USize): String iso^ => \"\"\" Returns a copy of the string repeated `num` times. \"\"\" repeat_str(num) fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? => \"\"\" Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i + 1 end error fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? => \"\"\" Return the index of n-th instance of `s` in the string starting from the end. The `offset` represents the highest index to included in the search. Raise an error if there is no n-th occurrence of `s` or `s` is empty. \"\"\" var i = (offset_to_index(offset) + 1) - s._size var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i - 1 end error fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool => \"\"\" Returns true if contains s as a substring, false otherwise. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return true end i = i + 1 end false fun count(s: String box, offset: ISize = 0): USize => \"\"\" Counts the non-overlapping occurrences of s in the string. \"\"\" let j: ISize = (_size - s.size()).isize() var i: USize = 0 var k = offset if j < 0 then return 0 elseif (j == 0) and (this == s) then return 1 end try while k <= j do k = find(s, k)? + s.size().isize() i = i + 1 end end i fun at(s: String box, offset: ISize = 0): Bool => \"\"\" Returns true if the substring s is present at the given offset. \"\"\" let i = offset_to_index(offset) if (i + s.size()) <= _size then @memcmp(_ptr._offset(i), s._ptr, s._size) == 0 else false end fun ref delete(offset: ISize, len: USize = 1) => \"\"\" Delete len bytes at the supplied offset, compacting the string in place. \"\"\" let i = offset_to_index(offset) if i < _size then let n = len.min(_size - i) _size = _size - n _ptr._offset(i)._delete(n, _size - i) _set(_size, 0) end fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a substring. Index range [`from` .. `to`) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see `trim` and `trim_in_place`. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) then let len = finish - start let str = recover String(len) end _ptr._offset(start)._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str else recover String end end fun lower(): String iso^ => \"\"\" Returns a lower case version of the string. \"\"\" let s = clone() s.lower_in_place() s fun ref lower_in_place() => \"\"\" Transforms the string to lower case. Currently only knows ASCII case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x41) and (c <= 0x5A) then _set(i, c + 0x20) end i = i + 1 end fun upper(): String iso^ => \"\"\" Returns an upper case version of the string. Currently only knows ASCII case. \"\"\" let s = clone() s.upper_in_place() s fun ref upper_in_place() => \"\"\" Transforms the string to upper case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x61) and (c <= 0x7A) then _set(i, c - 0x20) end i = i + 1 end fun reverse(): String iso^ => \"\"\" Returns a reversed version of the string. \"\"\" let s = clone() s.reverse_in_place() s fun ref reverse_in_place() => \"\"\" Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _set(i, _ptr._apply(j)) _set(j, x) i = i + 1 j = j - 1 end end fun ref push(value: U8) => \"\"\" Add a byte to the end of the string. \"\"\" reserve(_size + 1) _set(_size, value) _size = _size + 1 _set(_size, 0) fun ref pop(): U8 ? => \"\"\" Remove a byte from the end of the string. \"\"\" if _size > 0 then _size = _size - 1 _ptr._offset(_size)._delete(1, 0) else error end fun ref unshift(value: U8) => \"\"\" Adds a byte to the beginning of the string. \"\"\" if value != 0 then reserve(_size + 1) @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1) _set(0, value) _size = _size + 1 else _set(0, 0) _size = 0 end fun ref shift(): U8 ? => \"\"\" Removes a byte from the beginning of the string. \"\"\" if _size > 0 then let value = _ptr._apply(0) @memmove(_ptr.usize(), _ptr.usize() + 1, _size) _size = _size - 1 value else error end fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) match seq | let s: (String box | Array[U8] box) => s._copy_to(_ptr, copy_len, offset, _size) _size = _size + copy_len _set(_size, 0) else let cap = copy_len + offset var i = offset try while i < cap do push(seq(i)?) i = i + 1 end end end fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated bytes to the end of the string, starting from the given offset. \"\"\" try var n = USize(0) while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end n = 0 while n < len do if iter.has_next() then push(iter.next()?) else return end n = n + 1 end end fun ref clear() => \"\"\" Truncate the string to zero length. \"\"\" _set(0, 0) _size = 0 fun insert(offset: ISize, that: String): String iso^ => \"\"\" Returns a version of the string with the given string inserted at the given offset. \"\"\" let s = clone() s.insert_in_place(offset, that) s fun ref insert_in_place(offset: ISize, that: String box) => \"\"\" Inserts the given string at the given offset. Appends the string if the offset is out of bounds. \"\"\" reserve(_size + that._size) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + that._size, _ptr.usize() + index, _size - index) that._ptr._copy_to(_ptr._offset(index), that._size) _size = _size + that._size _set(_size, 0) fun ref insert_byte(offset: ISize, value: U8) => \"\"\" Inserts a byte at the given offset. Appends if the offset is out of bounds. \"\"\" reserve(_size + 1) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + 1, _ptr.usize() + index, _size - index) _set(index, value) _size = _size + 1 _set(_size, 0) fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a version of the string with the given range deleted. Index range [`from` .. `to`) is half-open. \"\"\" let s = clone() s.cut_in_place(from, to) s fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) => \"\"\" Cuts the given range out of the string. Index range [`from` .. `to`) is half-open. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) and (finish <= _size) then let fragment_len = finish - start let new_size = _size - fragment_len var i = start while i < new_size do _set(i, _ptr._apply(i + fragment_len)) i = i + 1 end _size = _size - fragment_len _set(_size, 0) end fun ref remove(s: String box): USize => \"\"\" Remove all instances of s from the string. Returns the count of removed instances. \"\"\" var i: ISize = 0 var n: USize = 0 try while true do i = find(s, i)? cut_in_place(i, i + s.size().isize()) n = n + 1 end end n fun ref replace(from: String box, to: String box, n: USize = 0): USize => \"\"\" Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. \"\"\" let from_len = from.size().isize() let to_len = to.size().isize() var offset = ISize(0) var occur = USize(0) try while true do offset = find(from, offset)? cut_in_place(offset, offset + from_len) insert_in_place(offset, to) offset = offset + to_len occur = occur + 1 if (n > 0) and (occur >= n) then break end end end occur fun split_by( delim: String, n: USize = USize.max_value()) : Array[String] iso^ => \"\"\" Split the string into an array of strings that are delimited by `delim` in the original string. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"]`. An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of `delim`, use [`split`](#split). \"\"\" let delim_size = ISize.from[USize](delim.size()) let total_size = ISize.from[USize](size()) let result = recover Array[String] end var current = ISize(0) while ((result.size() + 1) < n) and (current < total_size) do try let delim_start = find(delim where offset = current)? result.push(substring(current, delim_start)) current = delim_start + delim_size else break end end result.push(substring(current)) consume result fun split(delim: String = \" \\t\\v\\f\\r\\n\", n: USize = 0): Array[String] iso^ => \"\"\" Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`. If you want to split the string with the entire delimiter string `delim`, use [`split_by`](#split_by). \"\"\" let result = recover Array[String] end if _size > 0 then let chars = Array[U32](delim.size()) for rune in delim.runes() do chars.push(rune) end var cur = recover String end var i = USize(0) var occur = USize(0) try while i < _size do (let c, let len) = utf32(i.isize())? if chars.contains(c) then // If we find a delimiter, add the current string to the array. occur = occur + 1 if (n > 0) and (occur >= n) then break end result.push(cur = recover String end) else // Add bytes to the current string. var j = U8(0) while j < len do cur.push(_ptr._apply(i + j.usize())) j = j + 1 end end i = i + len.usize() end end // Add all remaining bytes to the current string. while i < _size do cur.push(_ptr._apply(i)) i = i + 1 end result.push(consume cur) end consume result fun ref strip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading and trailing characters from the string that are in s. \"\"\" this .> lstrip(s) .> rstrip(s) fun ref rstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = _size - 1 var truncate_at = _size for rune in s.runes() do chars.push(rune) end repeat try match utf32(i.isize())? | (0xFFFD, 1) => None | (let c: U32, _) => if not chars.contains(c) then break end truncate_at = i end else break end until (i = i - 1) == 0 end truncate(truncate_at) end fun ref lstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading characters within the string that are in s. By default, leading whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = USize(0) for rune in s.runes() do chars.push(rune) end while i < _size do try (let c, let len) = utf32(i.isize())? if not chars.contains(c) then break end i = i + len.usize() else break end end if i > 0 then delete(0, i) end end fun iso _append(s: String box): String iso^ => let len = _size + s._size reserve(len) if s.is_null_terminated() then s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size) else s._copy_to(_ptr._unsafe(), s._size, 0, _size) end _size = len consume this fun add(that: String box): String iso^ => \"\"\" Return a string that is a concatenation of this and that. \"\"\" let len = _size + that._size let s = recover String(len) end (consume s)._append(this)._append(that) fun join(data: Iterator[Stringable]): String iso^ => \"\"\" Return a string that is a concatenation of the strings in data, using this as a separator. \"\"\" var buf = recover String end var first = true for v in data do if first then first = false else buf = (consume buf)._append(this) end buf.append(v.string()) end buf fun compare(that: String box): Compare => \"\"\" Lexically compare two strings. \"\"\" compare_sub(that, _size.max(that._size)) fun compare_sub( that: String box, n: USize, offset: ISize = 0, that_offset: ISize = 0, ignore_case: Bool = false) : Compare => \"\"\" Lexically compare at most `n` bytes of the substring of `this` starting at `offset` with the substring of `that` starting at `that_offset`. The comparison is case sensitive unless `ignore_case` is `true`. If the substring of `this` is a proper prefix of the substring of `that`, then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of `this`, then `this` is `Greater` than `that`. Both `offset` and `that_offset` can be negative, in which case the offsets are computed from the end of the string. If `n + offset` is greater than the length of `this`, or `n + that_offset` is greater than the length of `that`, then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. \"\"\" var j: USize = offset_to_index(offset) var k: USize = that.offset_to_index(that_offset) var i = n.min((_size - j).max(that._size - k)) while i > 0 do // this and that are equal up to this point if j >= _size then // this is shorter return Less elseif k >= that._size then // that is shorter return Greater end let c1 = _ptr._apply(j) let c2 = that._ptr._apply(k) if not ((c1 == c2) or (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and ((c1 or 0x20) >= 'a') and ((c1 or 0x20) <= 'z'))) then // this and that differ here return if c1.i32() > c2.i32() then Greater else Less end end j = j + 1 k = k + 1 i = i - 1 end Equal fun eq(that: String box): Bool => \"\"\" Returns true if the two strings have the same contents. \"\"\" if _size == that._size then @memcmp(_ptr, that._ptr, _size) == 0 else false end fun lt(that: String box): Bool => \"\"\" Returns true if this is lexically less than that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size < that._size fun le(that: String box): Bool => \"\"\" Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size <= that._size fun offset_to_index(i: ISize): USize => if i < 0 then i.usize() + _size else i.usize() end fun bool(): Bool ? => match lower() | \"true\" => true | \"false\" => false else error end fun i8(base: U8 = 0): I8 ? => _to_int[I8](base)? fun i16(base: U8 = 0): I16 ? => _to_int[I16](base)? fun i32(base: U8 = 0): I32 ? => _to_int[I32](base)? fun i64(base: U8 = 0): I64 ? => _to_int[I64](base)? fun i128(base: U8 = 0): I128 ? => _to_int[I128](base)? fun ilong(base: U8 = 0): ILong ? => _to_int[ILong](base)? fun isize(base: U8 = 0): ISize ? => _to_int[ISize](base)? fun u8(base: U8 = 0): U8 ? => _to_int[U8](base)? fun u16(base: U8 = 0): U16 ? => _to_int[U16](base)? fun u32(base: U8 = 0): U32 ? => _to_int[U32](base)? fun u64(base: U8 = 0): U64 ? => _to_int[U64](base)? fun u128(base: U8 = 0): U128 ? => _to_int[U128](base)? fun ulong(base: U8 = 0): ULong ? => _to_int[ULong](base)? fun usize(base: U8 = 0): USize ? => _to_int[USize](base)? fun _to_int[A: ((Signed | Unsigned) & Integer[A] val)](base: U8): A ? => \"\"\" Convert the *whole* string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. \"\"\" (let v, let d) = read_int[A](0, base)? // Check the whole string is used if (d == 0) or (d.usize() != _size) then error end v fun read_int[A: ((Signed | Unsigned) & Integer[A] val)]( offset: ISize = 0, base: U8 = 0) : (A, USize /* chars used */) ? => \"\"\" Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. \"\"\" let start_index = offset_to_index(offset) var index = start_index var value: A = 0 var had_digit = false // Check for leading minus let minus = (index < _size) and (_ptr._apply(index) == '-') if minus then if A(-1) > A(0) then // We're reading an unsigned type, negative not allowed, int not found return (0, 0) end index = index + 1 end (let base', let base_chars) = _read_int_base[A](base, index) index = index + base_chars // Process characters while index < _size do let char: A = A(0).from[U8](_ptr._apply(index)) if char == '_' then index = index + 1 continue end let digit = if (char >= '0') and (char <= '9') then char - '0' elseif (char >= 'A') and (char <= 'Z') then (char - 'A') + 10 elseif (char >= 'a') and (char <= 'z') then (char - 'a') + 10 else break end if digit >= base' then break end value = if minus then (value *? base') -? digit else (value *? base') +? digit end had_digit = true index = index + 1 end // Check result if not had_digit then // No integer found return (0, 0) end // Success (value, index - start_index) fun _read_int_base[A: ((Signed | Unsigned) & Integer[A] val)]( base: U8, index: USize) : (A, USize /* chars used */) => \"\"\" Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of single-byte characters in the prefix. \"\"\" if base > 0 then return (A(0).from[U8](base), 0) end // Determine base from prefix if (index + 2) >= _size then // Not enough characters, must be decimal return (10, 0) end let lead_char = _ptr._apply(index) let base_char = _ptr._apply(index + 1) and not 0x20 if (lead_char == '0') and (base_char == 'B') then return (2, 2) end if (lead_char == '0') and (base_char == 'X') then return (16, 2) end // No base specified, default to decimal (10, 0) fun f32(offset: ISize = 0): F32 ? => \"\"\" Convert this string starting at the given offset to a 32-bit floating point number ([F32](builtin-F32.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtof(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun f64(offset: ISize = 0): F64 ? => \"\"\" Convert this string starting at the given offset to a 64-bit floating point number ([F64](builtin-F64.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtod(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun hash(): USize => @ponyint_hash_block(_ptr, _size) fun hash64(): U64 => @ponyint_hash_block64(_ptr, _size) fun string(): String iso^ => clone() fun values(): StringBytes^ => \"\"\" Return an iterator over the bytes in the string. \"\"\" StringBytes(this) fun runes(): StringRunes^ => \"\"\" Return an iterator over the codepoints in the string. \"\"\" StringRunes(this) fun ref _set(i: USize, value: U8): U8 => \"\"\" Unsafe update, used internally. \"\"\" _ptr._update(i, value) class StringBytes is Iterator[U8] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U8 ? => _string(_i = _i + 1)? class StringRunes is Iterator[U32] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U32 ? => (let rune, let len) = _string.utf32(_i.isize())? _i = _i + len.usize() rune primitive _UTF32Encoder fun encode(value: U32): (USize, U8, U8, U8, U8) => \"\"\" Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. \"\"\" if value < 0x80 then (1, value.u8(), 0, 0, 0) elseif value < 0x800 then ( 2, ((value >> 6) or 0xC0).u8(), ((value and 0x3F) or 0x80).u8(), 0, 0 ) elseif value < 0xD800 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0xE000 then // UTF-16 surrogate pairs are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) elseif value < 0x10000 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0x110000 then ( 4, ((value >> 18) or 0xF0).u8(), (((value >> 12) and 0x3F) or 0x80).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8() ) else // Code points beyond 0x10FFFF are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) end","title":"string.pony"},{"location":"src/builtin/stringable/","text":"interface box Stringable \"\"\" Things that can be turned into a String. \"\"\" fun string(): String iso^ \"\"\" Generate a string representation of this object. \"\"\"","title":"stringable.pony"},{"location":"src/builtin/unsigned/","text":"use @\"llvm.bitreverse.i8\"[U8](src: U8) use @\"llvm.bitreverse.i16\"[U16](src: U16) use @\"llvm.bitreverse.i32\"[U32](src: U32) use @\"llvm.bitreverse.i64\"[U64](src: U64) use @\"llvm.bitreverse.i128\"[U128](src: U128) use @\"llvm.bswap.i8\"[U16](src: U8) use @\"llvm.bswap.i16\"[U16](src: U16) use @\"llvm.bswap.i32\"[U32](src: U32) use @\"llvm.bswap.i64\"[U64](src: U64) use @\"llvm.bswap.i128\"[U128](src: U128) use @\"llvm.ctpop.i8\"[U8](src: U8) use @\"llvm.ctpop.i16\"[U16](src: U16) use @\"llvm.ctpop.i32\"[U32](src: U32) use @\"llvm.ctpop.i64\"[U64](src: U64) use @\"llvm.ctpop.i128\"[U128](src: U128) use @\"llvm.ctlz.i8\"[U8](src: U8, is_zero_undef: Bool) use @\"llvm.ctlz.i16\"[U16](src: U16, is_zero_undef: Bool) use @\"llvm.ctlz.i32\"[U32](src: U32, is_zero_undef: Bool) use @\"llvm.ctlz.i64\"[U64](src: U64, is_zero_undef: Bool) use @\"llvm.ctlz.i128\"[U128](src: U128, is_zero_undef: Bool) use @\"llvm.cttz.i8\"[U8](src: U8, zero_undef: Bool) use @\"llvm.cttz.i16\"[U16](src: U16, zero_undef: Bool) use @\"llvm.cttz.i32\"[U32](src: U32, zero_undef: Bool) use @\"llvm.cttz.i64\"[U64](src: U64, zero_undef: Bool) use @\"llvm.cttz.i128\"[U128](src: U128, zero_undef: Bool) use @\"llvm.uadd.with.overflow.i8\"[(U8, Bool)](a: U8, b: U8) use @\"llvm.uadd.with.overflow.i16\"[(U16, Bool)](a: U16, b: U16) use @\"llvm.uadd.with.overflow.i32\"[(U32, Bool)](a: U32, b: U32) use @\"llvm.uadd.with.overflow.i64\"[(U64, Bool)](a: U64, b: U64) use @\"llvm.uadd.with.overflow.i128\"[(U128, Bool)](a: U128, b: U128) use @\"llvm.usub.with.overflow.i8\"[(U8, Bool)](a: U8, b: U8) use @\"llvm.usub.with.overflow.i16\"[(U16, Bool)](a: U16, b: U16) use @\"llvm.usub.with.overflow.i32\"[(U32, Bool)](a: U32, b: U32) use @\"llvm.usub.with.overflow.i64\"[(U64, Bool)](a: U64, b: U64) use @\"llvm.usub.with.overflow.i128\"[(U128, Bool)](a: U128, b: U128) use @\"llvm.umul.with.overflow.i8\"[(U8, Bool)](a: U8, b: U8) use @\"llvm.umul.with.overflow.i16\"[(U16, Bool)](a: U16, b: U16) use @\"llvm.umul.with.overflow.i32\"[(U32, Bool)](a: U32, b: U32) use @\"llvm.umul.with.overflow.i64\"[(U64, Bool)](a: U64, b: U64) use @\"llvm.umul.with.overflow.i128\"[(U128, Bool)](a: U128, b: U128) primitive U8 is UnsignedInteger[U8] new create(value: U8) => value new from[B: (Number & Real[B] val)](a: B) => a.u8() new min_value() => 0 new max_value() => 0xFF fun next_pow2(): U8 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U8 => this fun bit_reverse(): U8 => @\"llvm.bitreverse.i8\"(this) fun bswap(): U8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"(this) fun clz(): U8 => @\"llvm.ctlz.i8\"(this, false) fun ctz(): U8 => @\"llvm.cttz.i8\"(this, false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"(this, true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"(this, true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U8): U8 => if this < y then this else y end fun max(y: U8): U8 => if this > y then this else y end fun addc(y: U8): (U8, Bool) => @\"llvm.uadd.with.overflow.i8\"(this, y) fun subc(y: U8): (U8, Bool) => @\"llvm.usub.with.overflow.i8\"(this, y) fun mulc(y: U8): (U8, Bool) => @\"llvm.umul.with.overflow.i8\"(this, y) fun divc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.div_checked[U8](this, y) fun remc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.rem_checked[U8](this, y) fun add_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.add_partial[U8](this, y)? fun sub_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.sub_partial[U8](this, y)? fun mul_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.mul_partial[U8](this, y)? fun div_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.div_partial[U8](this, y)? fun rem_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.rem_partial[U8](this, y)? fun divrem_partial(y: U8): (U8, U8) ? => _UnsignedPartialArithmetic.divrem_partial[U8](this, y)? primitive U16 is UnsignedInteger[U16] new create(value: U16) => value new from[A: (Number & Real[A] val)](a: A) => a.u16() new min_value() => 0 new max_value() => 0xFFFF fun next_pow2(): U16 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U16 => this fun bit_reverse(): U16 => @\"llvm.bitreverse.i16\"(this) fun bswap(): U16 => @\"llvm.bswap.i16\"(this) fun popcount(): U16 => @\"llvm.ctpop.i16\"(this) fun clz(): U16 => @\"llvm.ctlz.i16\"(this, false) fun ctz(): U16 => @\"llvm.cttz.i16\"(this, false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"(this, true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"(this, true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U16): U16 => if this < y then this else y end fun max(y: U16): U16 => if this > y then this else y end fun addc(y: U16): (U16, Bool) => @\"llvm.uadd.with.overflow.i16\"(this, y) fun subc(y: U16): (U16, Bool) => @\"llvm.usub.with.overflow.i16\"(this, y) fun mulc(y: U16): (U16, Bool) => @\"llvm.umul.with.overflow.i16\"(this, y) fun divc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.div_checked[U16](this, y) fun remc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.rem_checked[U16](this, y) fun add_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.add_partial[U16](this, y)? fun sub_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.sub_partial[U16](this, y)? fun mul_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.mul_partial[U16](this, y)? fun div_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.div_partial[U16](this, y)? fun rem_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.rem_partial[U16](this, y)? fun divrem_partial(y: U16): (U16, U16) ? => _UnsignedPartialArithmetic.divrem_partial[U16](this, y)? primitive U32 is UnsignedInteger[U32] new create(value: U32) => value new from[A: (Number & Real[A] val)](a: A) => a.u32() new min_value() => 0 new max_value() => 0xFFFF_FFFF fun next_pow2(): U32 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U32 => this fun bit_reverse(): U32 => @\"llvm.bitreverse.i32\"(this) fun bswap(): U32 => @\"llvm.bswap.i32\"(this) fun popcount(): U32 => @\"llvm.ctpop.i32\"(this) fun clz(): U32 => @\"llvm.ctlz.i32\"(this, false) fun ctz(): U32 => @\"llvm.cttz.i32\"(this, false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"(this, true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"(this, true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U32): U32 => if this < y then this else y end fun max(y: U32): U32 => if this > y then this else y end fun addc(y: U32): (U32, Bool) => @\"llvm.uadd.with.overflow.i32\"(this, y) fun subc(y: U32): (U32, Bool) => @\"llvm.usub.with.overflow.i32\"(this, y) fun mulc(y: U32): (U32, Bool) => @\"llvm.umul.with.overflow.i32\"(this, y) fun divc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.div_checked[U32](this, y) fun remc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.rem_checked[U32](this, y) fun add_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.add_partial[U32](this, y)? fun sub_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.sub_partial[U32](this, y)? fun mul_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.mul_partial[U32](this, y)? fun div_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.div_partial[U32](this, y)? fun rem_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.rem_partial[U32](this, y)? fun divrem_partial(y: U32): (U32, U32) ? => _UnsignedPartialArithmetic.divrem_partial[U32](this, y)? primitive U64 is UnsignedInteger[U64] new create(value: U64) => value new from[A: (Number & Real[A] val)](a: A) => a.u64() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF fun next_pow2(): U64 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U64 => this fun bit_reverse(): U64 => @\"llvm.bitreverse.i64\"(this) fun bswap(): U64 => @\"llvm.bswap.i64\"(this) fun popcount(): U64 => @\"llvm.ctpop.i64\"(this) fun clz(): U64 => @\"llvm.ctlz.i64\"(this, false) fun ctz(): U64 => @\"llvm.cttz.i64\"(this, false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"(this, true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"(this, true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U64): U64 => if this < y then this else y end fun max(y: U64): U64 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 32).u32() xor this.u32()).hash() else usize().hash() end fun addc(y: U64): (U64, Bool) => @\"llvm.uadd.with.overflow.i64\"(this, y) fun subc(y: U64): (U64, Bool) => @\"llvm.usub.with.overflow.i64\"(this, y) fun mulc(y: U64): (U64, Bool) => @\"llvm.umul.with.overflow.i64\"(this, y) fun divc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.div_checked[U64](this, y) fun remc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.rem_checked[U64](this, y) fun add_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.add_partial[U64](this, y)? fun sub_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.sub_partial[U64](this, y)? fun mul_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.mul_partial[U64](this, y)? fun div_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.div_partial[U64](this, y)? fun rem_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.rem_partial[U64](this, y)? fun divrem_partial(y: U64): (U64, U64) ? => _UnsignedPartialArithmetic.divrem_partial[U64](this, y)? primitive ULong is UnsignedInteger[ULong] new create(value: ULong) => value new from[A: (Number & Real[A] val)](a: A) => a.ulong() new min_value() => 0 new max_value() => ifdef ilp32 or llp64 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): ULong => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): ULong => this fun bit_reverse(): ULong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"(this.u32()).ulong() else @\"llvm.bitreverse.i64\"(this.u64()).ulong() end fun bswap(): ULong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"(this.u32()).ulong() else @\"llvm.bswap.i64\"(this.u64()).ulong() end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"(this.u32()).ulong() else @\"llvm.ctpop.i64\"(this.u64()).ulong() end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"(this.u32(), false).ulong() else @\"llvm.ctlz.i64\"(this.u64(), false).ulong() end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"(this.u32(), false).ulong() else @\"llvm.cttz.i64\"(this.u64(), false).ulong() end fun clz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"(this.u32(), true).ulong() else @\"llvm.ctlz.i64\"(this.u64(), true).ulong() end fun ctz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"(this.u32(), false).ulong() else @\"llvm.cttz.i64\"(this.u64(), true).ulong() end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ULong): ULong => if this < y then this else y end fun max(y: ULong): ULong => if this > y then this else y end fun hash(): USize => ifdef ilp32 or llp64 then u32().hash() else u64().hash() end fun addc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.uadd.with.overflow.i32\"(this.u32(), y.u32()) (r.ulong(), o) else (let r, let o) = @\"llvm.uadd.with.overflow.i64\"(this.u64(), y.u64()) (r.ulong(), o) end fun subc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.usub.with.overflow.i32\"(this.u32(), y.u32()) (r.ulong(), o) else (let r, let o) = @\"llvm.usub.with.overflow.i64\"(this.u64(), y.u64()) (r.ulong(), o) end fun mulc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then (let r, let o) = @\"llvm.umul.with.overflow.i32\"(this.u32(), y.u32()) (r.ulong(), o) else (let r, let o) = @\"llvm.umul.with.overflow.i64\"(this.u64(), y.u64()) (r.ulong(), o) end fun divc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.div_checked[ULong](this, y) fun remc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.rem_checked[ULong](this, y) fun add_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.add_partial[ULong](this, y)? fun sub_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.sub_partial[ULong](this, y)? fun mul_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.mul_partial[ULong](this, y)? fun div_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.div_partial[ULong](this, y)? fun rem_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.rem_partial[ULong](this, y)? fun divrem_partial(y: ULong): (ULong, ULong) ? => _UnsignedPartialArithmetic.divrem_partial[ULong](this, y)? primitive USize is UnsignedInteger[USize] new create(value: USize) => value new from[A: (Number & Real[A] val)](a: A) => a.usize() new min_value() => 0 new max_value() => ifdef ilp32 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): USize => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): USize => this fun bit_reverse(): USize => ifdef ilp32 then @\"llvm.bitreverse.i32\"(this.u32()).usize() else @\"llvm.bitreverse.i64\"(this.u64()).usize() end fun bswap(): USize => ifdef ilp32 then @\"llvm.bswap.i32\"(this.u32()).usize() else @\"llvm.bswap.i64\"(this.u64()).usize() end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"(this.u32()).usize() else @\"llvm.ctpop.i64\"(this.u64()).usize() end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"(this.u32(), false).usize() else @\"llvm.ctlz.i64\"(this.u64(), false).usize() end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"(this.u32(), false).usize() else @\"llvm.cttz.i64\"(this.u64(), false).usize() end fun clz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.ctlz.i32\"(this.u32(), true).usize() else @\"llvm.ctlz.i64\"(this.u64(), true).usize() end fun ctz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.cttz.i32\"(this.u32(), true).usize() else @\"llvm.cttz.i64\"(this.u64(), true).usize() end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: USize): USize => if this < y then this else y end fun max(y: USize): USize => if this > y then this else y end fun addc(y: USize): (USize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.uadd.with.overflow.i32\"(this.u32(), y.u32()) (r.usize(), o) else (let r, let o) = @\"llvm.uadd.with.overflow.i64\"(this.u64(), y.u64()) (r.usize(), o) end fun subc(y: USize): (USize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.usub.with.overflow.i32\"(this.u32(), y.u32()) (r.usize(), o) else (let r, let o) = @\"llvm.usub.with.overflow.i64\"(this.u64(), y.u64()) (r.usize(), o) end fun mulc(y: USize): (USize, Bool) => ifdef ilp32 then (let r, let o) = @\"llvm.umul.with.overflow.i32\"(this.u32(), y.u32()) (r.usize(), o) else (let r, let o) = @\"llvm.umul.with.overflow.i64\"(this.u64(), y.u64()) (r.usize(), o) end fun divc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.div_checked[USize](this, y) fun remc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.rem_checked[USize](this, y) fun add_partial(y: USize): USize ? => _UnsignedPartialArithmetic.add_partial[USize](this, y)? fun sub_partial(y: USize): USize ? => _UnsignedPartialArithmetic.sub_partial[USize](this, y)? fun mul_partial(y: USize): USize ? => _UnsignedPartialArithmetic.mul_partial[USize](this, y)? fun div_partial(y: USize): USize ? => _UnsignedPartialArithmetic.div_partial[USize](this, y)? fun rem_partial(y: USize): USize ? => _UnsignedPartialArithmetic.rem_partial[USize](this, y)? fun divrem_partial(y: USize): (USize, USize) ? => _UnsignedPartialArithmetic.divrem_partial[USize](this, y)? primitive U128 is UnsignedInteger[U128] new create(value: U128) => value new from[A: (Number & Real[A] val)](a: A) => a.u128() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun next_pow2(): U128 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U128 => this fun bit_reverse(): U128 => @\"llvm.bitreverse.i128\"(this) fun bswap(): U128 => @\"llvm.bswap.i128\"(this) fun popcount(): U128 => @\"llvm.ctpop.i128\"(this) fun clz(): U128 => @\"llvm.ctlz.i128\"(this, false) fun ctz(): U128 => @\"llvm.cttz.i128\"(this, false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"(this, true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"(this, true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U128): U128 => if this < y then this else y end fun max(y: U128): U128 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 96).u32() xor (this >> 64).u32() xor (this >> 32).u32() xor this.u32()).hash() else ((this >> 64).u64() xor this.u64()).hash() end fun hash64(): U64 => ((this >> 64).u64() xor this.u64()).hash64() fun string(): String iso^ => _ToString._u128(this, false) fun mul(y: U128): U128 => ifdef native128 then this * y else let x_hi = (this >> 64).u64() let x_lo = this.u64() let y_hi = (y >> 64).u64() let y_lo = y.u64() let mask = U64(0x00000000FFFFFFFF) var lo = (x_lo and mask) * (y_lo and mask) var t = lo >> 32 lo = lo and mask t = t + ((x_lo >> 32) * (y_lo and mask)) lo = lo + ((t and mask) << 32) var hi = t >> 32 t = lo >> 32 lo = lo and mask t = t + ((y_lo >> 32) * (x_lo and mask)) lo = lo + ((t and mask) << 32) hi = hi + (t >> 32) hi = hi + ((x_lo >> 32) * (y_lo >> 32)) hi = hi + (x_hi * y_lo) + (x_lo * y_hi) (hi.u128() << 64) or lo.u128() end fun divrem(y: U128): (U128, U128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var quot: U128 = 0 var qbit: U128 = 1 var num = this var den = y while den.i128() >= 0 do den = den << 1 qbit = qbit << 1 end while qbit != 0 do if den <= num then num = num - den quot = quot + qbit end den = den >> 1 qbit = qbit >> 1 end (quot, num) end fun div(y: U128): U128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: U128): U128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: U128): (U128, U128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => let v = f64() if v > F32.max_value().f64() then F32._inf(false) else v.f32() end fun f64(): F64 => if this == 0 then return 0 end var a = this let sd = bitwidth() - clz() var e = (sd - 1).u64() if sd > 53 then match sd | 54 => a = a << 1 | 55 => None else a = (a >> (sd - 55)) or if (a and (-1 >> ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end end if (a and 4) != 0 then a = a or 1 end a = (a + 1) >> 2 if (a and (1 << 53)) != 0 then a = a >> 1 e = e + 1 end else a = a << (53 - sd) end F64.from_bits(((e + 1023) << 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF)) fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.uadd.with.overflow.i128\"(this, y) else let overflow = this > (max_value() - y) (this + y, overflow) end fun subc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.usub.with.overflow.i128\"(this, y) else let overflow = this < y (this - y, overflow) end fun mulc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.umul.with.overflow.i128\"(this, y) else let result = this * y let overflow = (this != 0) and ((result / this) != y) (result, overflow) end fun divc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.div_checked[U128](this, y) fun remc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.rem_checked[U128](this, y) fun add_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.add_partial[U128](this, y)? fun sub_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.sub_partial[U128](this, y)? fun mul_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.mul_partial[U128](this, y)? fun div_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.div_partial[U128](this, y)? fun rem_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.rem_partial[U128](this, y)? fun divrem_partial(y: U128): (U128, U128) ? => _UnsignedPartialArithmetic.divrem_partial[U128](this, y)? type Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)","title":"unsigned.pony"},{"location":"src/collections/flag/","text":"interface val Flag[A: (Unsigned & Integer[A] val)] \"\"\" A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. \"\"\" fun value(): A class Flags[A: Flag[B] val, B: (Unsigned & Integer[B] val) = U64] is Comparable[Flags[A, B] box] \"\"\" Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. \"\"\" var _value: B = 0 fun value(): B => \"\"\" Returns the bit encoding of the set flags. \"\"\" _value fun apply(flag: A): Bool => \"\"\" Returns true if the flag is set. \"\"\" (_value and flag.value()) > 0 fun ref all() => \"\"\" Sets all bits, including undefined flags. \"\"\" _value = -1 fun ref clear() => \"\"\" Unsets all flags. \"\"\" _value = 0 fun ref set(flag: A) => \"\"\" Sets the flag. \"\"\" _value = _value or flag.value() fun ref unset(flag: A) => \"\"\" Unsets the flag. \"\"\" _value = _value and not flag.value() fun ref flip(flag: A) => \"\"\" Sets the flag if it is unset, unsets the flag if it is set. \"\"\" _value = _value xor flag.value() fun ref union(that: Flags[A, B] box) => \"\"\" The union of this and that. \"\"\" _value = this._value or that._value fun ref intersect(that: Flags[A, B] box) => \"\"\" The intersection of this and that. \"\"\" _value = this._value and that._value fun ref difference(that: Flags[A, B] box) => \"\"\" The symmetric difference of this and that. \"\"\" _value = this._value xor that._value fun ref remove(that: Flags[A, B] box) => \"\"\" Unset flags that are set in that. \"\"\" _value = this._value xor that._value fun add(flag: A): Flags[A, B] iso^ => \"\"\" This with the flag set. \"\"\" let f = recover Flags[A, B] end f._value = this._value or flag.value() f fun sub(flag: A): Flags[A, B] iso^ => \"\"\" This with the flag unset. \"\"\" let f = recover Flags[A, B] end f._value = this._value and not flag.value() f fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The union of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value or that._value f fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The intersection of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value and that._value f fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The symmetric difference of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value xor that._value f fun without(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The flags in this that are not in that. \"\"\" let f = recover Flags[A, B] end f._value = this._value and not that._value f fun clone(): Flags[A, B] iso^ => \"\"\" Create a clone. \"\"\" let f = recover Flags[A, B] end f._value = this._value f fun eq(that: Flags[A, B] box): Bool => \"\"\" Returns true if this has the same flags set as that. \"\"\" _value == that._value fun lt(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. \"\"\" (_value != that._value) and ((_value and not that._value) == 0) fun le(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. \"\"\" ((_value and not that._value) == 0) fun gt(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. \"\"\" (_value != that._value) and ((that._value and not _value) == 0) fun ge(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. \"\"\" ((that._value and not _value) == 0)","title":"flag.pony"},{"location":"src/collections/hashable/","text":"use @memcmp[I32](dst: Pointer[None] tag, src: Pointer[None] tag, len: USize) use @ponyint_hash_block[USize](ptr: Pointer[None] tag, size: USize) use @ponyint_hash_block64[U64](ptr: Pointer[None] tag, size: USize) interface Hashable \"\"\" Anything with a hash method is hashable. \"\"\" fun hash(): USize interface Hashable64 \"\"\" A version of Hashable that returns 64-bit hashes on every platform. \"\"\" fun hash64(): U64 interface val HashFunction[A] \"\"\" A pluggable hash function. \"\"\" new val create() \"\"\" Data structures create instances internally. Use a primitive if possible. \"\"\" fun hash(x: box->A!): USize \"\"\" Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. \"\"\" fun eq(x: box->A!, y: box->A!): Bool \"\"\" Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. \"\"\" interface val HashFunction64[A] \"\"\" A pluggable hash function with 64-bit hashes. \"\"\" new val create() \"\"\" Data structures create instances internally. Use a primitive if possible. \"\"\" fun hash64(x: box->A!): U64 \"\"\" Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. \"\"\" fun eq(x: box->A!, y: box->A!): Bool \"\"\" Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. \"\"\" primitive HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] fun hash(x: box->A): USize => \"\"\" Use the hash function from the type parameter. \"\"\" x.hash() fun eq(x: box->A, y: box->A): Bool => \"\"\" Use the structural equality function from the type parameter. \"\"\" x == y primitive HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] fun hash64(x: box->A): U64 => \"\"\" Use the hash function from the type parameter. \"\"\" x.hash64() fun eq(x: box->A, y: box->A): Bool => \"\"\" Use the structural equality function from the type parameter. \"\"\" x == y primitive HashIs[A] is (HashFunction[A] & HashFunction64[A]) fun hash(x: box->A!): USize => \"\"\" Hash the identity rather than the contents. \"\"\" (digestof x).hash() fun hash64(x: box->A!): U64 => \"\"\" Hash the identity rather than the contents. \"\"\" (digestof x).hash64() fun eq(x: box->A!, y: box->A!): Bool => \"\"\" Determine equality by identity rather than structurally. \"\"\" x is y primitive HashByteSeq is (HashFunction[ByteSeq box] & HashFunction64[ByteSeq box]) \"\"\" Hash and equality functions for arbitrary ByteSeq. \"\"\" fun hash(x: ByteSeq box): USize => @ponyint_hash_block(x.cpointer(), x.size()) fun hash64(x: ByteSeq box): U64 => @ponyint_hash_block64(x.cpointer(), x.size()) fun eq(x: ByteSeq box, y: ByteSeq box): Bool => if x.size() == y.size() then @memcmp(x.cpointer(), y.cpointer(), x.size()) == 0 else false end","title":"hashable.pony"},{"location":"src/collections/heap/","text":"type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A]] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A]] class BinaryHeap[A: Comparable[A] #read, P: BinaryHeapPriority[A]] \"\"\" A priority queue implemented as a binary heap. The `BinaryHeapPriority` type parameter determines whether this is max-heap or a min-heap. \"\"\" embed _data: Array[A] new create(len: USize) => \"\"\" Create an empty heap with space for `len` elements. \"\"\" _data = Array[A](len) fun ref clear() => \"\"\" Remove all elements from the heap. \"\"\" _data.clear() fun size(): USize => \"\"\" Return the number of elements in the heap. \"\"\" _data.size() fun peek(): this->A ? => \"\"\" Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. \"\"\" _data(0)? fun ref push(value: A) => \"\"\" Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. \"\"\" _data.push(value) _sift_up(size() - 1) fun ref pop(): A^ ? => \"\"\" Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. \"\"\" let n = size() - 1 _data.swap_elements(0, n)? _sift_down(0, n) _data.pop()? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append len elements from a sequence, starting from the given offset. \"\"\" _data.append(seq, offset, len) _make_heap() fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements, starting from the given offset. \"\"\" _data.concat(iter, offset, len) _make_heap() fun values(): ArrayValues[A, this->Array[A]]^ => \"\"\" Return an iterator for the elements in the heap. The order of elements is arbitrary. \"\"\" _data.values() fun ref _make_heap() => let n = size() if n < 2 then return end var i = (n / 2) while (i = i - 1) > 0 do _sift_down(i, n) end fun ref _sift_up(n: USize) => var idx = n try while true do let parent_idx = (idx - 1) / 2 if (parent_idx == idx) or not P(_data(idx)?, _data(parent_idx)?) then break end _data.swap_elements(parent_idx, idx)? idx = parent_idx end end fun ref _sift_down(start: USize, n: USize): Bool => var idx = start try while true do var left = (2 * idx) + 1 if (left >= n) or (left < 0) then break end let right = left + 1 if (right < n) and P(_data(right)?, _data(left)?) then left = right end if not P(_data(left)?, _data(idx)?) then break end _data.swap_elements(idx, left)? idx = left end end idx > start fun _apply(i: USize): this->A ? => _data(i)? type BinaryHeapPriority[A: Comparable[A] #read] is ( _BinaryHeapPriority[A] & (MinHeapPriority[A] | MaxHeapPriority[A])) interface val _BinaryHeapPriority[A: Comparable[A] #read] new val create() fun apply(x: A, y: A): Bool primitive MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] fun apply(x: A, y: A): Bool => x < y primitive MaxHeapPriority [A: Comparable[A] #read] is _BinaryHeapPriority[A] fun apply(x: A, y: A): Bool => x > y","title":"heap.pony"},{"location":"src/collections/list/","text":"class List[A] is Seq[A] \"\"\" A doubly linked list. (The following is paraphrased from [Wikipedia](https://en.wikipedia.org/wiki/Doubly_linked_list).) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc. ## Example program There are a _lot_ of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! ```pony use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end ``` \"\"\" var _head: (ListNode[A] | None) = None var _tail: (ListNode[A] | None) = None var _size: USize = 0 new create(len: USize = 0) => \"\"\" Do nothing, but be compatible with Seq. \"\"\" None new unit(a: A) => \"\"\" Builds a new list from an element. \"\"\" push(consume a) new from(seq: Array[A^]) => \"\"\" Builds a new list from the sequence passed in. \"\"\" for value in seq.values() do push(consume value) end fun ref reserve(len: USize) => \"\"\" Do nothing, but be compatible with Seq. \"\"\" None fun size(): USize => \"\"\" Returns the number of items in the list. \"\"\" _size fun apply(i: USize = 0): this->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" index(i)?()? fun ref update(i: USize, value: A): A^ ? => \"\"\" Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. \"\"\" index(i)?()? = consume value fun index(i: USize): this->ListNode[A] ? => \"\"\" Gets the i-th node, raising an error if the index is out of bounds. \"\"\" if i >= _size then error end var node = _head as this->ListNode[A] var j = USize(0) while j < i do node = node.next() as this->ListNode[A] j = j + 1 end node fun ref remove(i: USize): ListNode[A] ? => \"\"\" Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. \"\"\" index(i)? .> remove() fun ref clear() => \"\"\" Empties the list. \"\"\" _head = None _tail = None _size = 0 fun head(): this->ListNode[A] ? => \"\"\" Get the head of the list. \"\"\" _head as this->ListNode[A] fun tail(): this->ListNode[A] ? => \"\"\" Get the tail of the list. \"\"\" _tail as this->ListNode[A] fun ref prepend_node(node: ListNode[A]) => \"\"\" Adds a node to the head of the list. \"\"\" match _head | let head': ListNode[A] => head'.prepend(node) else _set_both(node) end fun ref append_node(node: ListNode[A]) => \"\"\" Adds a node to the tail of the list. \"\"\" match _tail | let tail': ListNode[A] => tail'.append(node) else _set_both(node) end fun ref append_list(that: List[A]) => \"\"\" Remove all nodes from that and append them to this. \"\"\" if this isnt that then while that._size > 0 do try append_node(that.head()?) end end end fun ref prepend_list(that: List[A]) => \"\"\" Remove all nodes from that and prepend them to this. \"\"\" if this isnt that then while that._size > 0 do try prepend_node(that.tail()?) end end end fun ref push(a: A) => \"\"\" Adds a value to the tail of the list. \"\"\" append_node(ListNode[A](consume a)) fun ref pop(): A^ ? => \"\"\" Removes a value from the tail of the list. \"\"\" tail()? .> remove().pop()? fun ref unshift(a: A) => \"\"\" Adds a value to the head of the list. \"\"\" prepend_node(ListNode[A](consume a)) fun ref shift(): A^ ? => \"\"\" Removes a value from the head of the list. \"\"\" head()? .> remove().pop()? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append len elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) let cap = copy_len + offset var i = offset try while i < cap do push(seq(i)?) i = i + 1 end end fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements to the end of the list, starting from the given offset. \"\"\" try for i in Range(0, offset) do if iter.has_next() then iter.next()? else return end end for i in Range(0, len) do if iter.has_next() then push(iter.next()?) else return end end end fun ref truncate(len: USize) => \"\"\" Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. \"\"\" try while _size > len do pop()? end end fun clone(): List[this->A!]^ => \"\"\" Clone the list. \"\"\" let out = List[this->A!] for v in values() do out.push(v) end out fun map[B](f: {(this->A!): B^} box): List[B]^ => \"\"\" Builds a new list by applying a function to every member of the list. \"\"\" try _map[B](head()?, f, List[B]) else List[B] end fun _map[B]( ln: this->ListNode[A], f: {(this->A!): B^} box, acc: List[B]) : List[B]^ => \"\"\" Private helper for map, recursively working with ListNodes. \"\"\" try acc.push(f(ln()?)) end try _map[B](ln.next() as this->ListNode[A], f, acc) else acc end fun flat_map[B](f: {(this->A!): List[B]} box): List[B]^ => \"\"\" Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. \"\"\" try _flat_map[B](head()?, f, List[B]) else List[B] end fun _flat_map[B]( ln: this->ListNode[A], f: {(this->A!): List[B]} box, acc: List[B]): List[B]^ => \"\"\" Private helper for flat_map, recursively working with ListNodes. \"\"\" try acc.append_list(f(ln()?)) end try _flat_map[B](ln.next() as this->ListNode[A], f, acc) else acc end fun filter(f: {(this->A!): Bool} box): List[this->A!]^ => \"\"\" Builds a new list with those elements that satisfy a provided predicate. \"\"\" try _filter(head()?, f, List[this->A!]) else List[this->A!] end fun _filter( ln: this->ListNode[A], f: {(this->A!): Bool} box, acc: List[this->A!]): List[this->A!] => \"\"\" Private helper for filter, recursively working with ListNodes. \"\"\" try let cur = ln()? if f(cur) then acc.push(cur) end end try _filter(ln.next() as this->ListNode[A], f, acc) else acc end fun fold[B](f: {(B!, this->A!): B^} box, acc: B): B => \"\"\" Folds the elements of the list using the supplied function. \"\"\" let h = try head()? else return acc end _fold[B](h, f, consume acc) fun _fold[B]( ln: this->ListNode[A], f: {(B!, this->A!): B^} box, acc: B) : B => \"\"\" Private helper for fold, recursively working with ListNodes. \"\"\" let nextAcc: B = try f(acc, ln()?) else consume acc end let h = try ln.next() as this->ListNode[A] else return nextAcc end _fold[B](h, f, consume nextAcc) fun every(f: {(this->A!): Bool} box): Bool => \"\"\" Returns true if every element satisfies the provided predicate, false otherwise. \"\"\" try _every(head()?, f) else true end fun _every(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool => \"\"\" Private helper for every, recursively working with ListNodes. \"\"\" try if not(f(ln()?)) then false else _every(ln.next() as this->ListNode[A], f) end else true end fun exists(f: {(this->A!): Bool} box): Bool => \"\"\" Returns true if at least one element satisfies the provided predicate, false otherwise. \"\"\" try _exists(head()?, f) else false end fun _exists(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool => \"\"\" Private helper for exists, recursively working with ListNodes. \"\"\" try if f(ln()?) then true else _exists(ln.next() as this->ListNode[A], f) end else false end fun partition( f: {(this->A!): Bool} box) : (List[this->A!]^, List[this->A!]^) => \"\"\" Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. \"\"\" let l1 = List[this->A!] let l2 = List[this->A!] for item in values() do if f(item) then l1.push(item) else l2.push(item) end end (l1, l2) fun drop(n: USize): List[this->A!]^ => \"\"\" Builds a list by dropping the first n elements. \"\"\" let l = List[this->A!] if size() > n then try var node = index(n)? for i in Range(n, size()) do l.push(node()?) node = node.next() as this->ListNode[A] end end end l fun take(n: USize): List[this->A!] => \"\"\" Builds a list of the first n elements. \"\"\" let l = List[this->A!] if size() > 0 then try var node = head()? for i in Range(0, n.min(size())) do l.push(node()?) node = node.next() as this->ListNode[A] end end end l fun take_while(f: {(this->A!): Bool} box): List[this->A!]^ => \"\"\" Builds a list of elements satisfying the provided predicate until one does not. \"\"\" let l = List[this->A!] if size() > 0 then try var node = head()? for i in Range(0, size()) do let item = node()? if f(item) then l.push(item) else return l end node = node.next() as this->ListNode[A] end end end l fun reverse(): List[this->A!]^ => \"\"\" Builds a new list by reversing the elements in the list. \"\"\" try _reverse(head()?, List[this->A!]) else List[this->A!] end fun _reverse(ln: this->ListNode[A], acc: List[this->A!]): List[this->A!]^ => \"\"\" Private helper for reverse, recursively working with ListNodes. \"\"\" try acc.unshift(ln()?) end try _reverse(ln.next() as this->ListNode[A], acc) else acc end fun contains[B: (A & HasEq[A!] #read) = A](a: box->B): Bool => \"\"\" Returns true if the list contains the provided element, false otherwise. \"\"\" try _contains[B](head()?, a) else false end fun _contains[B: (A & HasEq[A!] #read) = A]( ln: this->ListNode[A], a: box->B) : Bool => \"\"\" Private helper for contains, recursively working with ListNodes. \"\"\" try if a == ln()? then true else _contains[B](ln.next() as this->ListNode[A], a) end else false end fun nodes(): ListNodes[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the nodes in the list. \"\"\" ListNodes[A, this->ListNode[A]](_head) fun rnodes(): ListNodes[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the nodes in the list. \"\"\" ListNodes[A, this->ListNode[A]](_head, true) fun values(): ListValues[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the values in the list. \"\"\" ListValues[A, this->ListNode[A]](_head) fun rvalues(): ListValues[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the values in the list. \"\"\" ListValues[A, this->ListNode[A]](_head, true) fun ref _increment() => _size = _size + 1 fun ref _decrement() => _size = _size - 1 fun ref _set_head(head': (ListNode[A] | None)) => _head = head' fun ref _set_tail(tail': (ListNode[A] | None)) => _tail = tail' fun ref _set_both(node: ListNode[A]) => node._set_list(this) _head = node _tail = node _size = 1 class ListNodes[A, N: ListNode[A] #read] is Iterator[N] \"\"\" Iterate over the nodes in a list. \"\"\" var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) => \"\"\" Keep the next list node to be examined. \"\"\" _next = head _reverse = reverse fun has_next(): Bool => \"\"\" If we have a list node, we have more values. \"\"\" _next isnt None fun ref next(): N ? => \"\"\" Get the list node and replace it with the next one. \"\"\" match _next | let next': N => if _reverse then _next = next'.prev() else _next = next'.next() end next' else error end class ListValues[A, N: ListNode[A] #read] is Iterator[N->A] \"\"\" Iterate over the values in a list. \"\"\" var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) => \"\"\" Keep the next list node to be examined. \"\"\" _next = head _reverse = reverse fun has_next(): Bool => \"\"\" If we have a list node, we have more values. \"\"\" _next isnt None fun ref next(): N->A ? => \"\"\" Get the value of the list node and replace it with the next one. \"\"\" match _next | let next': N => if _reverse then _next = next'.prev() else _next = next'.next() end next'()? else error end","title":"list.pony"},{"location":"src/collections/list_node/","text":"class ListNode[A] \"\"\" A node in a doubly linked list. (See Ponylang [collections.List](https://stdlib.ponylang.io/collections-List/) class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang [collections.List](https://stdlib.ponylang.io/collections-List/) class is the correct way to create these. _Do not attempt to create a Linked List using only ListNodes._ ## Example program The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. ```pony use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... \"\"\" var _item: (A | None) var _list: (List[A] | None) = None var _prev: (ListNode[A] | None) = None var _next: (ListNode[A] | None) = None new create(item: (A | None) = None) => \"\"\" Create a node. Initially, it is not in any list. \"\"\" _item = consume item fun apply(): this->A ? => \"\"\" Return the item, if we have one, otherwise raise an error. \"\"\" _item as this->A fun ref update(value: (A | None)): A^ ? => \"\"\" Replace the item and return the previous one. Raise an error if we have no previous value. \"\"\" (_item = consume value) as A^ fun ref pop(): A^ ? => \"\"\" Remove the item from the node, if we have one, otherwise raise an error. \"\"\" (_item = None) as A^ fun ref prepend(that: ListNode[A]): Bool => \"\"\" Prepend a node to this one. If `that` is already in a list, it is removed before it is prepended. Returns true if `that` was removed from another list. If the ListNode is not contained within a List the prepend will fail. \"\"\" if (_prev is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] => in_list = that._list isnt None that.remove() match _prev | let prev': ListNode[A] => prev'._next = that else list'._set_head(that) end that._list = list' that._prev = _prev that._next = this _prev = that list'._increment() end in_list fun ref append(that: ListNode[A]): Bool => \"\"\" Append a node to this one. If `that` is already in a list, it is removed before it is appended. Returns true if `that` was removed from another list. If the ListNode is not contained within a List the append will fail. \"\"\" if (_next is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] => in_list = that._list isnt None that.remove() match _next | let next': ListNode[A] => next'._prev = that else list'._set_tail(that) end that._list = list' that._prev = this that._next = _next _next = that list'._increment() end in_list fun ref remove() => \"\"\" Remove a node from a list. The ListNode must be contained within a List for this to succeed. \"\"\" match _list | let list': List[A] => match (_prev, _next) | (let prev': ListNode[A], let next': ListNode[A]) => // We're in the middle of the list. prev'._next = _next next'._prev = _prev _prev = None _next = None | (let prev': ListNode[A], None) => // We're the tail. prev'._next = None list'._set_tail(prev') _prev = None | (None, let next': ListNode[A]) => // We're the head. next'._prev = None list'._set_head(next') _next = None | (None, None) => // We're the only member list'._set_head(None) list'._set_tail(None) end list'._decrement() _list = None end fun has_prev(): Bool => \"\"\" Return true if there is a previous node. \"\"\" _prev isnt None fun has_next(): Bool => \"\"\" Return true if there is a next node. \"\"\" _next isnt None fun prev(): (this->ListNode[A] | None) => \"\"\" Return the previous node. \"\"\" _prev fun next(): (this->ListNode[A] | None) => \"\"\" Return the next node. \"\"\" _next fun ref _set_list(list: List[A]): ListNode[A]^ => \"\"\" Make this node the only node on the given list. \"\"\" remove() _list = list this","title":"list_node.pony"},{"location":"src/collections/map/","text":"primitive _MapEmpty primitive _MapDeleted type Map[K: (Hashable #read & Equatable[K] #read), V] is HashMap[K, V, HashEq[K]] \"\"\" This is a map that uses structural equality on the key. \"\"\" type MapIs[K, V] is HashMap[K, V, HashIs[K]] \"\"\" This is a map that uses identity comparison on the key. \"\"\" class HashMap[K, V, H: HashFunction[K] val] \"\"\" A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. \"\"\" var _size: USize = 0 var _array: Array[((K, V) | _MapEmpty | _MapDeleted)] new create(prealloc: USize = 6) => \"\"\" Create an array with space for prealloc elements without triggering a resize. Defaults to 6. \"\"\" let len = (prealloc * 4) / 3 let n = len.max(8).next_pow2() _array = _array.init(_MapEmpty, n) fun size(): USize => \"\"\" The number of items in the map. \"\"\" _size fun space(): USize => \"\"\" The available space in the map. Resize will happen when size / space >= 0.75. \"\"\" _array.space() fun apply(key: box->K!): this->V ? => \"\"\" Gets a value from the map. Raises an error if no such item exists. \"\"\" (let i, let found) = _search(key) if found then _array(i)? as (_, this->V) else error end fun ref update(key: K, value: V): (V^ | None) => \"\"\" Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. \"\"\" try (let i, let found) = _search(key) match _array(i)? = (consume key, consume value) | (_, let v: V) => return consume v else _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end end fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V! => \"\"\" Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to \"\"\" (let i, let found) = _search(key) let value' = value try if found then (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^) let new_value = f(consume pvalue, consume value) let new_value' = new_value _array(i)? = (consume pkey, consume new_value) return _array(i)? as (_, V) else let key' = key _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end value' else // This is unreachable, since index will never be out-of-bounds value' end fun ref insert(key: K, value: V): V! => \"\"\" Set a value in the map. Returns the new value, allowing reuse. \"\"\" let value' = value try (let i, let found) = _search(key) let key' = key _array(i)? = (consume key, consume value) if not found then _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end value' else // This is unreachable, since index will never be out-of-bounds. value' end fun ref insert_if_absent(key: K, value: V): V! => \"\"\" Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: ```pony if not my_map.contains(my_key) then my_map(my_key) = my_value end ``` Returns the value, the same as `insert`, allowing 'insert_if_absent' to be used as a drop-in replacement for `insert`. \"\"\" let value' = value try (let i, let found) = _search(key) let key' = key if not found then _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. value' end fun ref remove(key: box->K!): (K^, V^) ? => \"\"\" Delete a value from the map and return it. Raises an error if there was no value for the given key. \"\"\" try (let i, let found) = _search(key) if found then _size = _size - 1 match _array(i)? = _MapDeleted | (let k: K, let v: V) => return (consume k, consume v) end end end error fun get_or_else(key: box->K!, alt: this->V): this->V => \"\"\" Get the value associated with provided key if present. Otherwise, return the provided alternate value. \"\"\" (let i, let found) = _search(key) if found then try _array(i)? as (_, this->V) else // This should never happen as we have already // proven that _array(i) exists consume alt end else consume alt end fun contains(k: box->K!): Bool => \"\"\" Checks whether the map contains the key k \"\"\" (_, let found) = _search(k) found fun ref concat(iter: Iterator[(K^, V^)]) => \"\"\" Add K, V pairs from the iterator to the map. \"\"\" for (k, v) in iter do this(consume k) = consume v end fun add[H2: HashFunction[this->K!] val = H]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2]^ => \"\"\" This with the new (key, value) mapping. \"\"\" let r = clone[H2]() r(key) = value r fun sub[H2: HashFunction[this->K!] val = H](key: this->K!) : HashMap[this->K!, this->V!, H2]^ => \"\"\" This without the given key. \"\"\" let r = clone[H2]() try r.remove(key)? end r fun next_index(prev: USize = -1): USize ? => \"\"\" Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. \"\"\" for i in Range(prev + 1, _array.size()) do match _array(i)? | (_, _) => return i end end error fun index(i: USize): (this->K, this->V) ? => \"\"\" Returns the key and value at a given index. Raise an error if the index is not populated. \"\"\" _array(i)? as (this->K, this->V) fun ref compact() => \"\"\" Minimise the memory used for the map. \"\"\" _resize(((_size * 4) / 3).next_pow2().max(8)) fun clone[H2: HashFunction[this->K!] val = H]() : HashMap[this->K!, this->V!, H2]^ => \"\"\" Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. \"\"\" let r = HashMap[this->K!, this->V!, H2](_size) for (k, v) in pairs() do r(k) = v end r fun ref clear() => \"\"\" Remove all entries. \"\"\" _size = 0 // Our default prealloc of 6 corresponds to an array alloc size of 8. let n: USize = 8 _array = _array.init(_MapEmpty, n) fun _search(key: box->K!): (USize, Bool) => \"\"\" Return a slot number and whether or not it's currently occupied. \"\"\" var idx_del = _array.size() let mask = idx_del - 1 let h = H.hash(key).usize() var idx = h and mask try for i in Range(0, _array.size()) do let entry = _array(idx)? match entry | (let k: this->K!, _) => if H.eq(k, key) then return (idx, true) end | _MapEmpty => if idx_del <= mask then return (idx_del, false) else return (idx, false) end | _MapDeleted => if idx_del > mask then idx_del = idx end end idx = (h + ((i + (i * i)) / 2)) and mask end end (idx_del, false) fun ref _resize(len: USize) => \"\"\" Change the available space. \"\"\" let old = _array let old_len = old.size() _array = _array.init(_MapEmpty, len) _size = 0 try for i in Range(0, old_len) do match old(i)? = _MapDeleted | (let k: K, let v: V) => this(consume k) = consume v end end end fun keys(): MapKeys[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the keys. \"\"\" MapKeys[K, V, H, this->HashMap[K, V, H]](this) fun values(): MapValues[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the values. \"\"\" MapValues[K, V, H, this->HashMap[K, V, H]](this) fun pairs(): MapPairs[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the keys and values. \"\"\" MapPairs[K, V, H, this->HashMap[K, V, H]](this) class MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] \"\"\" An iterator over the keys in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): M->K ? => \"\"\" Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._1 class MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] \"\"\" An iterator over the values in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): M->V ? => \"\"\" Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._2 class MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K, M->V)] \"\"\" An iterator over the keys and values in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): (M->K, M->V) ? => \"\"\" Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?","title":"map.pony"},{"location":"src/collections/range/","text":"class Range[A: (Real[A] val & Number) = USize] is Iterator[A] \"\"\" Produces `[min, max)` with a step of `inc` for any `Number` type. ```pony // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do try handle_u8(range.next()?) end end ``` Supports `min` being smaller than `max` with negative `inc` but only for signed integer types and floats: ```pony var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end ``` If the `step` is not moving `min` towards `max` or if it is `0`, the Range is considered infinite and iterating over it will never terminate: ```pony let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end ``` When using `Range` with floating point types (`F32` and `F64`) `inc` steps < 1.0 are possible. If any of the arguments contains `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on any of them won't move `min` towards `max`. The actual values produced by such a `Range` are determined by what IEEE 754 defines as the result of `min` + `inc`: ```pony for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end ``` \"\"\" let _min: A let _max: A let _inc: A let _forward: Bool let _infinite: Bool var _idx: A new create(min: A, max: A, inc: A = 1) => _min = min _max = max _inc = inc _idx = min _forward = (_min < _max) and (_inc > 0) let is_float_infinite = iftype A <: FloatingPoint[A] then _min.nan() or _min.infinite() or _max.nan() or _max.infinite() or _inc.nan() or _inc.infinite() else false end _infinite = is_float_infinite or ((_inc == 0) and (min != max)) // no progress or ((_min < _max) and (_inc < 0)) // progress into other directions or ((_min > _max) and (_inc > 0)) fun has_next(): Bool => if _forward then _idx < _max else _idx > _max end fun ref next(): A ? => if has_next() then _idx = _idx + _inc else error end fun ref rewind() => _idx = _min fun is_infinite(): Bool => _infinite","title":"range.pony"},{"location":"src/collections/reverse/","text":"class Reverse[A: (Real[A] val & Number) = USize] is Iterator[A] \"\"\" Produces a decreasing range [max, min] with step `dec`, for any `Number` type. (i.e. the reverse of `Range`) Example program: ```pony use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end ``` Which outputs: ``` 10 8 6 4 2 ``` If `dec` is 0, produces an infinite series of `max`. If `dec` is negative, produces a range with `max` as the only value. \"\"\" let _min: A let _max: A let _dec: A var _idx: A new create(max: A, min: A, dec: A = 1) => _min = min _max = max _dec = dec _idx = max fun has_next(): Bool => (_idx >= _min) and (_idx <= _max) fun ref next(): A => if has_next() then _idx = _idx - _dec else _idx + _dec end fun ref rewind() => _idx = _max","title":"reverse.pony"},{"location":"src/collections/ring_buffer/","text":"class RingBuffer[A] \"\"\" A ring buffer. \"\"\" embed _array: Array[A] let _mod: USize var _write: USize = 0 new create(len: USize) => \"\"\" Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. \"\"\" let n = len.max(2).next_pow2() _mod = n - 1 _array = Array[A](n) fun head(): USize ? => \"\"\" The first read that will succeed. If nothing has been written to the ring, this will raise an error. \"\"\" if _write > 0 then if _write > space() then _write - space() else 0 end else error end fun size(): USize => \"\"\" The number of elements that have been added to the ring. \"\"\" _write fun space(): USize => \"\"\" The available space in the ring. \"\"\" _mod + 1 fun apply(i: USize): this->A ? => \"\"\" Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. \"\"\" if (i >= _write) or ((_write - i) > space()) then error end _array(i and _mod)? fun ref push(value: A): Bool => \"\"\" Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. \"\"\" var full = false if _write < space() then _array.push(consume value) else try _array(_write and _mod)? = consume value end full = true end _write = _write + 1 full fun ref clear() => \"\"\" Clear the queue. \"\"\" _array.clear() _write = 0","title":"ring_buffer.pony"},{"location":"src/collections/set/","text":"type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A]] type SetIs[A] is HashSet[A, HashIs[A!]] class HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] \"\"\" A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself \"\"\" embed _map: HashMap[A!, A, H] new create(prealloc: USize = 8) => \"\"\" Defaults to a prealloc of 8. \"\"\" _map = _map.create(prealloc) fun size(): USize => \"\"\" The number of items in the set. \"\"\" _map.size() fun space(): USize => \"\"\" The available space in the set. \"\"\" _map.space() fun apply(value: box->A!): this->A ? => \"\"\" Return the value if its in the set, otherwise raise an error. \"\"\" _map(value)? fun contains(value: box->A!): Bool => \"\"\" Checks whether the set contains the value. \"\"\" _map.contains(value) fun ref clear() => \"\"\" Remove all elements from the set. \"\"\" _map.clear() fun ref set(value: A) => \"\"\" Add a value to the set. \"\"\" _map(value) = consume value fun ref unset(value: box->A!) => \"\"\" Remove a value from the set. \"\"\" try _map.remove(value)? end fun ref extract(value: box->A!): A^ ? => \"\"\" Remove a value from the set and return it. Raises an error if the value wasn't in the set. \"\"\" _map.remove(value)?._2 fun ref union(that: Iterator[A^]) => \"\"\" Add everything in that to the set. \"\"\" for value in that do set(consume value) end fun ref intersect[K: HashFunction[box->A!] val = H]( that: HashSet[box->A!, K]) => \"\"\" Remove everything that isn't in that. \"\"\" let start_size = _map.size() var seen: USize = 0 var i: USize = -1 while seen < start_size do try i = next_index(i)? if not that.contains(index(i)?) then unset(index(i)?) end end seen = seen + 1 end fun ref difference(that: Iterator[A^]) => \"\"\" Remove elements in this which are also in that. Add elements in that which are not in this. \"\"\" for value in that do try extract(value)? else set(consume value) end end fun ref remove(that: Iterator[box->A!]) => \"\"\" Remove everything that is in that. \"\"\" for value in that do unset(value) end fun add[K: HashFunction[this->A!] val = H]( value: this->A!) : HashSet[this->A!, K]^ => \"\"\" Add a value to the set. \"\"\" clone[K]() .> set(value) fun sub[K: HashFunction[this->A!] val = H]( value: box->this->A!) : HashSet[this->A!, K]^ => \"\"\" Remove a value from the set. \"\"\" clone[K]() .> unset(value) fun op_or[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements of both this and that. \"\"\" let r = clone[K]() for value in that.values() do r.set(value) end r fun op_and[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements that are in both this and that. \"\"\" let r = HashSet[this->A!, K](size().min(that.size())) for value in values() do try that(value)? r.set(value) end end r fun op_xor[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements that are in either set but not both. \"\"\" let r = HashSet[this->A!, K](size().max(that.size())) for value in values() do try that(value)? else r.set(value) end end for value in that.values() do try this(value)? else r.set(value) end end r fun without[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements of this that are not in that. \"\"\" let r = HashSet[this->A!, K](size()) for value in values() do try that(value)? else r.set(value) end end r fun clone[K: HashFunction[this->A!] val = H](): HashSet[this->A!, K]^ => \"\"\" Create a clone. The element type may be different due to aliasing and viewpoint adaptation. \"\"\" let r = HashSet[this->A!, K](size()) for value in values() do r.set(value) end r fun eq(that: HashSet[A, H] box): Bool => \"\"\" Returns true if the sets contain the same elements. \"\"\" (size() == that.size()) and (this <= that) fun ne(that: HashSet[A, H] box): Bool => \"\"\" Returns false if the sets contain the same elements. \"\"\" not (this == that) fun lt(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in this is also in that, and this has fewer elements than that. \"\"\" (size() < that.size()) and (this <= that) fun le(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in this is also in that. \"\"\" try for value in values() do that(value)? end true else false end fun gt(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in that is also in this, and this has more elements than that. \"\"\" (size() > that.size()) and (that <= this) fun ge(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in that is also in this. \"\"\" that <= this fun next_index(prev: USize = -1): USize ? => \"\"\" Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. \"\"\" _map.next_index(prev)? fun index(i: USize): this->A ? => \"\"\" Returns the value at a given index. Raise an error if the index is not populated. \"\"\" _map.index(i)?._2 fun values(): SetValues[A, H, this->HashSet[A, H]]^ => \"\"\" Return an iterator over the values. \"\"\" SetValues[A, H, this->HashSet[A, H]](this) class SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] \"\"\" An iterator over the values in a set. \"\"\" let _set: S var _i: USize = -1 var _count: USize = 0 new create(set: S) => \"\"\" Creates an iterator for the given set. \"\"\" _set = set fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the set. \"\"\" _count < _set.size() fun ref next(): S->A ? => \"\"\" Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. \"\"\" _i = _set.next_index(_i)? _count = _count + 1 _set.index(_i)?","title":"set.pony"},{"location":"src/collections/sort/","text":"primitive Sort[A: Seq[B] ref, B: Comparable[B] #read] \"\"\" Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from [Wikipedia](https://en.wikipedia.org/wiki/Quicksort).) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches. ## Example program The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: > first > second > third ```pony use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end ``` \"\"\" fun apply(a: A): A^ => \"\"\" Sort the given seq. \"\"\" try _sort(a, 0, a.size().isize() - 1)? end a fun _sort(a: A, lo: ISize, hi: ISize) ? => if hi <= lo then return end // choose outermost elements as pivots if a(lo.usize())? > a(hi.usize())? then _swap(a, lo, hi)? end (var p, var q) = (a(lo.usize())?, a(hi.usize())?) // partition according to invariant (var l, var g) = (lo + 1, hi - 1) var k = l while k <= g do if a(k.usize())? < p then _swap(a, k, l)? l = l + 1 elseif a(k.usize())? >= q then while (a(g.usize())? > q) and (k < g) do g = g - 1 end _swap(a, k, g)? g = g - 1 if a(k.usize())? < p then _swap(a, k, l)? l = l + 1 end end k = k + 1 end (l, g) = (l - 1, g + 1) // swap pivots to final positions _swap(a, lo, l)? _swap(a, hi, g)? // recursively sort 3 partitions _sort(a, lo, l - 1)? _sort(a, l + 1, g - 1)? _sort(a, g + 1, hi)? fun _swap(a: A, i: ISize, j: ISize) ? => a(j.usize())? = a(i.usize())? = a(j.usize())?","title":"sort.pony"},{"location":"src/debug/debug/","text":"\"\"\" # Debug package Provides facilities to create output to either `STDOUT` or `STDERR` that will only appear when the platform is debug configured. To create a binary with debug configured, pass the `-d` flag to `ponyc` when compiling e.g.: `ponyc -d` ## Example code ```pony actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\") ``` \"\"\" use @fprintf[I32](stream: Pointer[U8] tag, fmt: Pointer[U8] tag, ...) use @pony_os_stdout[Pointer[U8]]() use @pony_os_stderr[Pointer[U8]]() primitive DebugOut primitive DebugErr type DebugStream is (DebugOut | DebugErr) primitive Debug \"\"\" This is a debug only print utility. \"\"\" fun apply( msg: (Stringable | ReadSeq[Stringable]), sep: String = \", \", stream: DebugStream = DebugOut) => \"\"\" If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. \"\"\" ifdef debug then match msg | let m: Stringable => _print(m.string(), stream) | let m: ReadSeq[Stringable] => _print(sep.join(m.values()), stream) end end fun out(msg: Stringable = \"\") => \"\"\" If platform is debug configured, print message to standard output \"\"\" _print(msg.string(), DebugOut) fun err(msg: Stringable = \"\") => \"\"\" If platform is debug configured, print message to standard error \"\"\" _print(msg.string(), DebugErr) fun _print(msg: String, stream: DebugStream) => ifdef debug then @fprintf(_stream(stream), \"%s\\n\".cstring(), msg.cstring()) end fun _stream(stream: DebugStream): Pointer[U8] => match stream | DebugOut => @pony_os_stdout() | DebugErr => @pony_os_stderr() end","title":"debug.pony"},{"location":"src/ponytest/pony_test/","text":"\"\"\" # PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: * builtin * time * collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. ## Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. ```pony use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) ``` The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. ## Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the `--exclude=[prefix]` command line option. You can run only tests whose names start with a given string by using the `--only=[prefix]` command line option. ## Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages `foo` and `bar`. ```pony use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) ``` Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. ## Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. ## Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. ## Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument `--label=[some custom label]`. It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding `label(): String` method in unit test. ```pony use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1) ``` ## Setting up and tearing down a test environment ### Set Up Any kind of fixture or environment necessary for executing a [UnitTest](ponytest-UnitTest.md) can be set up either in the tests constructor or in a function called [set_up()](ponytest-UnitTest.md#set_up). [set_up()](ponytest-UnitTest.md#set_up) is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's [TestHelper](ponytest-TestHelper.md) is handed to [set_up()](ponytest-UnitTest.md#set_up) in order to log messages or access the tests [Env](builtin-Env.md) via [TestHelper.env](ponytest-TestHelper.md#let-env-env-val). ### Tear Down Each unit test object may define a [tear_down()](ponytest-UnitTest.md#tear_down) function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The [tear_down()](ponytest-UnitTest.md#tear_down) function is called for each test regardless of whether it passed or failed. If a test times out [tear_down()](ponytest-UnitTest.md#tear_down) will be called after timed_out() returns. When a test is in an exclusion group, the [tear_down()](ponytest-UnitTest.md#tear_down) call is considered part of the tests run. The next test in the exclusion group will not start until after [tear_down()](ponytest-UnitTest.md#tear_down) returns on the current test. The test's [TestHelper](ponytest-TestHelper.md) is handed to [tear_down()](ponytest-UnitTest.md#tear_down) and it is permitted to log messages and call assert functions during tear down. ### Example The following example creates a temporary directory in the [set_up()](ponytest-UnitTest.md#set_up) function and removes it in the [tear_down()](ponytest-UnitTest.md#tear_down) function, thus simplifying the test function itself: ```pony use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory ``` \"\"\" use \"time\" use @ponyint_assert_disable_popups[None]() actor PonyTest \"\"\" Main test framework actor that organises tests, collates information and prints results. \"\"\" embed _groups: Array[(String, _Group)] = Array[(String, _Group)] embed _records: Array[_TestRecord] = Array[_TestRecord] let _env: Env let _timers: Timers = Timers var _do_nothing: Bool = false var _verbose: Bool = false var _sequential: Bool = false var _no_prog: Bool = false var _list_only: Bool = false var _started: USize = 0 var _finished: USize = 0 var _any_found: Bool = false var _all_started: Bool = false // Filtering options var _exclude: String = \"\" var _label: String = \"\" var _only: String = \"\" new create(env: Env, list: TestList tag) => \"\"\" Create a PonyTest object and use it to run the tests from the given TestList \"\"\" _env = env _process_opts() _groups.push((\"\", _SimultaneousGroup)) @ponyint_assert_disable_popups() list.tests(this) _all_tests_applied() be apply(test: UnitTest iso) => \"\"\" Run the given test, subject to our filters and options. \"\"\" if _do_nothing then return end var name = test.name() // Ignore any tests that satisfy our \"exclude\" filter if (_exclude != \"\") and name.at(_exclude, 0) then return end // Ignore any tests that don't satisfy our \"only\" filter if (_only != \"\") and (not name.at(_only, 0)) then return end // Ignore tests when label arg is set and test label doesn't match if (_label != \"\") and (_label != test.label()) then return end _any_found = true if _list_only then // Don't actually run tests, just list them _env.out.print(name) return end var index = _records.size() _records.push(_TestRecord(_env, name)) var group = _find_group(test.exclusion_group()) group(_TestRunner(this, index, consume test, group, _verbose, _env, _timers)) fun ref _find_group(group_name: String): _Group => \"\"\" Find the group to use for the given group name, subject to the --sequential flag. \"\"\" var name = group_name if _sequential then // Use the same group for all tests. name = \"all\" end for g in _groups.values() do if g._1 == name then return g._2 end end // Group doesn't exist yet, make it. // We only need one simultaneous group, which we've already made. All new // groups are exclusive. let g = _ExclusiveGroup _groups.push((name, g)) g be _test_started(id: USize) => \"\"\" A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. \"\"\" _started = _started + 1 try if not _no_prog then _env.out.print( _started.string() + \" test\" + _plural(_started) + \" started, \" + _finished.string() + \" complete: \" + _records(id)?.name + \" started\") end end be _test_complete(id: USize, pass: Bool, log: Array[String] val) => \"\"\" A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. \"\"\" _finished = _finished + 1 try _records(id)?._result(pass, log) if not _no_prog then _env.out.print( _started.string() + \" test\" + _plural(_started) + \" started, \" + _finished.string() + \" complete: \" + _records(id)?.name + \" complete\") end end if _all_started and (_finished == _records.size()) then // All tests have completed _print_report() end be _all_tests_applied() => \"\"\" All our tests have been handed to apply(), setup for finishing \"\"\" if _do_nothing then return end if not _any_found then // No tests left after applying our filters _env.out.print(\"No tests found\") return end if _list_only then // No tests to run return end _all_started = true if _finished == _records.size() then // All tests have completed _print_report() end fun ref _process_opts() => \"\"\" Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. \"\"\" var exe_name = \"\" for arg in _env.args.values() do if exe_name == \"\" then exe_name = arg continue end if arg == \"--sequential\" then _sequential = true elseif arg == \"--verbose\" then _verbose = true elseif arg == \"--noprog\" then _no_prog = true elseif arg == \"--list\" then _list_only = true elseif arg.compare_sub(\"--exclude=\", 10) is Equal then _exclude = arg.substring(10) elseif arg.compare_sub(\"--label=\", 8) is Equal then _label = arg.substring(8) elseif arg.compare_sub(\"--only=\", 7) is Equal then _only = arg.substring(7) else _env.out.print(\"Unrecognised argument \\\"\" + arg + \"\\\"\") _env.out.print(\"\") _env.out.print(\"Usage:\") _env.out.print(\" \" + exe_name + \" [options]\") _env.out.print(\"\") _env.out.print(\"Options:\") _env.out.print(\" --exclude=prefix - Don't run tests whose names \" + \"start with the given prefix.\") _env.out.print(\" --only=prefix - Only run tests whose names \" + \"start with the given prefix.\") _env.out.print(\" --verbose - Show all test output.\") _env.out.print(\" --sequential - Run tests sequentially.\") _env.out.print(\" --noprog - Do not print progress messages.\") _env.out.print(\" --list - List but do not run tests.\") _env.out.print(\" --label=label - Only run tests with given label\") _do_nothing = true return end end fun _print_report() => \"\"\" The tests are all complete, print out the results. \"\"\" var pass_count: USize = 0 var fail_count: USize = 0 // First we print the result summary for each test, in the order that they // were given to us. for rec in _records.values() do if rec._report(_verbose) then pass_count = pass_count + 1 else fail_count = fail_count + 1 end end // Next we print the pass / fail stats. _env.out.print(\"----\") _env.out.print(\"---- \" + _records.size().string() + \" test\" + _plural(_records.size()) + \" ran.\") _env.out.print(_Color.green() + \"---- Passed: \" + pass_count.string() + _Color.reset()) if fail_count == 0 then // Success, nothing failed. return end // Not everything passed. _env.out.print(_Color.red() + \"**** FAILED: \" + fail_count.string() + \" test\" + _plural(fail_count) + \", listed below:\" + _Color.reset()) // Finally print our list of failed tests. for rec in _records.values() do rec._list_failed() end _env.exitcode(-1) fun _plural(n: USize): String => \"\"\" Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". \"\"\" if n == 1 then \"\" else \"s\" end","title":"pony_test.pony"},{"location":"src/ponytest/test_helper/","text":"interface ITest fun apply() ? class val TestHelper \"\"\" Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. \"\"\" let _runner: _TestRunner let env: Env \"\"\" The process environment. This is useful for getting the [root authority](builtin-AmbientAuth.md) in order to access the filesystem (See [files](files--index.md)) or the network (See [net](net--index.md)) in your tests. \"\"\" new val _create(runner: _TestRunner, env': Env) => \"\"\" Create a new TestHelper. \"\"\" env = env' _runner = runner fun log(msg: String, verbose: Bool = false) => \"\"\" Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. \"\"\" _runner.log(msg, verbose) fun fail(msg: String = \"Test failed\") => \"\"\" Flag the test as having failed. \"\"\" _runner.fail(msg) fun assert_true(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given expression is true. \"\"\" if not actual then fail(_format_loc(loc) + \"Assert true failed. \" + msg) return false end log(_format_loc(loc) + \"Assert true passed. \" + msg, true) true fun assert_false(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given expression is false. \"\"\" if actual then fail(_format_loc(loc) + \"Assert false failed. \" + msg) return false end log(_format_loc(loc) + \"Assert false passed. \" + msg, true) true fun assert_error(test: ITest box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given test function throws an error when run. \"\"\" try test()? fail(_format_loc(loc) + \"Assert error failed. \" + msg) false else log(_format_loc(loc) + \"Assert error passed. \" + msg, true) true end fun assert_no_error( test: ITest box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the gived test function does not throw an error when run. \"\"\" try test()? log(_format_loc(loc) + \"Assert no error passed. \" + msg, true) true else fail(_format_loc(loc) + \"Assert no error failed. \" + msg) true end fun assert_is[A]( expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to the same instance \"\"\" _check_is[A](\"is\", consume expect, consume actual, msg, loc) fun _check_is[A]( check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions resolve to the same instance \"\"\" if expect isnt actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\", true) true fun assert_eq[A: (Equatable[A] #read & Stringable #read)] (expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool => \"\"\" Assert that the 2 given expressions are equal. \"\"\" _check_eq[A](\"eq\", expect, actual, msg, loc) fun _check_eq[A: (Equatable[A] #read & Stringable)] (check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions are equal. \"\"\" if expect != actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + expect.string() + \") == (\" + actual.string() + \")\") return false end log(_format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + expect.string() + \") == (\" + actual.string() + \")\", true) true fun assert_isnt[A]( not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to different instances. \"\"\" _check_isnt[A](\"isn't\", consume not_expect, consume actual, msg, loc) fun _check_isnt[A]( check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions resolve to different instances. \"\"\" if not_expect is actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\", true) true fun assert_ne[A: (Equatable[A] #read & Stringable #read)] (not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool => \"\"\" Assert that the 2 given expressions are not equal. \"\"\" _check_ne[A](\"ne\", not_expect, actual, msg, loc) fun _check_ne[A: (Equatable[A] #read & Stringable)] (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions are not equal. \"\"\" if not_expect == actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + not_expect.string() + \") != (\" + actual.string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + not_expect.string() + \") != (\" + actual.string() + \")\", true) true fun assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two `Array[U8]`, you should call this method as follows: ```pony fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) ``` \"\"\" var ok = true if expect.size() != actual.size() then ok = false else try var i: USize = 0 while i < expect.size() do if expect(i)? != actual(i)? then ok = false break end i = i + 1 end else ok = false end end if not ok then fail(_format_loc(loc) + \"Assert EQ failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\") return false end log( _format_loc(loc) + \"Assert EQ passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\", true) true fun assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two `Array[U8]`, you should call this method as follows: ```pony fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) ``` \"\"\" try let missing = Array[box->A] let consumed = Array[Bool].init(false, actual.size()) for e in expect.values() do var found = false var i: USize = -1 for a in actual.values() do i = i + 1 if consumed(i)? then continue end if e == a then consumed.update(i, true)? found = true break end end if not found then missing.push(e) end end let extra = Array[box->A] for (i, c) in consumed.pairs() do if not c then extra.push(actual(i)?) end end if (extra.size() != 0) or (missing.size() != 0) then fail( _format_loc(loc) + \"Assert EQ_UNORDERED failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \"):\" + \"\\nMissing: \" + _print_array[box->A](missing) + \"\\nExtra: \" + _print_array[box->A](extra)) return false end log( _format_loc(loc) + \"Assert EQ_UNORDERED passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\", true) true else fail(\"Assert EQ_UNORDERED failed from an internal error.\") false end fun _format_loc(loc: SourceLoc): String => loc.file() + \":\" + loc.line().string() + \": \" fun _print_array[A: Stringable #read](array: ReadSeq[A]): String => \"\"\" Generate a printable string of the contents of the given readseq to use in error messages. The type parameter of this function is the type parameter of the elements in the ReadSeq. \"\"\" \"[len=\" + array.size().string() + \": \" + \", \".join(array.values()) + \"]\" fun long_test(timeout: U64) => \"\"\" Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. \"\"\" _runner.long_test(timeout) fun complete(success: Bool) => \"\"\" MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. \"\"\" _runner.complete(success) fun expect_action(name: String) => \"\"\" Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. \"\"\" _runner.expect_action(name) fun complete_action(name: String) => \"\"\" MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. \"\"\" _runner.complete_action(name, true) fun fail_action(name: String) => \"\"\" Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. \"\"\" _runner.complete_action(name, false) fun dispose_when_done(disposable: DisposableActor) => \"\"\" Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. \"\"\" _runner.dispose_when_done(disposable)","title":"test_helper.pony"},{"location":"src/ponytest/test_list/","text":"trait TestList \"\"\" Source of unit tests for a PonyTest object. See package doc string for further information and example use. \"\"\" fun tag tests(test: PonyTest) \"\"\" Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: ```pony fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) ``` \"\"\"","title":"test_list.pony"},{"location":"src/ponytest/unit_test/","text":"trait UnitTest \"\"\" Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. \"\"\" fun name(): String \"\"\" Report the test name, which is used when printing test results and on the command line to select tests to run. \"\"\" fun exclusion_group(): String => \"\"\" Report the test exclusion group, returning an empty string for none. The default body returns an empty string. \"\"\" \"\" fun ref apply(h: TestHelper) ? \"\"\" Run the test. Raising an error is interpreted as a test failure. \"\"\" fun ref timed_out(h: TestHelper) => \"\"\" Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. \"\"\" None fun ref set_up(h: TestHelper) ? => \"\"\" Set up the testing environment before a test method is called. Default is to do nothing. \"\"\" None fun ref tear_down(h: TestHelper) => \"\"\" Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. \"\"\" None fun label(): String => \"\"\" Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. \"\"\" \"\"","title":"unit_test.pony"},{"location":"src/ponyzip/_test/","text":"actor Main new create(env: Env) => env.out.print(\"Starting\") let filename: String = \"test.zip\" let zip: PonyZip = PonyZip(filename, [ZipRDOnly;ZipCheckcons]) if (zip.valid()) then env.out.print(\"Successfully Opened \" + filename) else env.out.print(\"Failed to open \" + filename + \", Error: \" + zip.errorstr + \" (\" + zip.errorno.string() + \")\") end try env.out.print(\"There are \" + zip.count()?.string() + \" entries\") end try let s: Array[Zipstat] = zip.filesdata()? for t in s.values() do env.out.print(t.name()) end let zs: Zipstat = s.apply(14)? let data: String iso = String.from_iso_array(zip.readfile(zs)?) env.out.print(consume data) else env.out.print(\"BOOM\") end","title":"_test.pony"},{"location":"src/ponyzip/defines/","text":"/* Manually written alas */ // Flags for zip_open type ZipFlags is (ZipCreate|ZipExcl|ZipCheckcons|ZipTruncate|ZipRDOnly) primitive ZipCreate fun apply(): I32 => 1 primitive ZipExcl fun apply(): I32 => 2 primitive ZipCheckcons fun apply(): I32 => 4 primitive ZipTruncate fun apply(): I32 => 8 primitive ZipRDOnly fun apply(): I32 => 16 /* flags for zip_name_locate, zip_fopen, zip_stat, ... */ type ZipFLFlags is (ZipFLNocase|ZipFLNodir|ZipFLCompressed|ZipFLUnchanged|ZipFLRecompress|ZipFLEncrypted|ZipFLEncGuess|ZipFLEncRaw|ZipFLEncStrict|ZipFLLocal|ZipFLCentral|ZipFLEncUtf8|ZipFLEncCp437|ZipFLOverwrite) primitive ZipFLNocase fun apply(): U32 => 1 /* ignore case on name lookup */ primitive ZipFLNodir fun apply(): U32 => 2 /* ignore directory component */ primitive ZipFLCompressed fun apply(): U32 => 4 /* read compressed data */ primitive ZipFLUnchanged fun apply(): U32 => 8 /* use original data, ignoring changes */ primitive ZipFLRecompress fun apply(): U32 => 16 /* force recompression of data */ primitive ZipFLEncrypted fun apply(): U32 => 32 /* read encrypted data (implies ZipFLCOMPRESSED) */ primitive ZipFLEncGuess fun apply(): U32 => 0 /* guess string encoding (is default) */ primitive ZipFLEncRaw fun apply(): U32 => 64 /* get unmodified string */ primitive ZipFLEncStrict fun apply(): U32 => 128 /* follow specification strictly */ primitive ZipFLLocal fun apply(): U32 => 256 /* in local header */ primitive ZipFLCentral fun apply(): U32 => 512 /* in central directory */ /* 1024u reserved for internal use */ primitive ZipFLEncUtf8 fun apply(): U32 => 2048 /* string is UTF-8 encoded */ primitive ZipFLEncCp437 fun apply(): U32 => 4096 /* string is CP437 encoded */ primitive ZipFLOverwrite fun apply(): U32 => 8192 /* zip_file_add: if file with name exists, overwrite (replace) it */ /* archive global flags flags */ type ZipAflFlags is (ZipAFLRDOnly) primitive ZipAFLRDOnly fun apply(): U32 => 2 /* libzip error codes */ type ZipER is (ZipEROK|ZipERMultidisk|ZipERRename|ZipERClose|ZipERSeek|ZipERRead|ZipERWrite|ZipERCRC|ZipERZipclosed|ZipERNoent|ZipERExists|ZipEROpen|ZipERTmpopen|ZipERZlib|ZipERMemory|ZipERChanged|ZipERCompnotsupp|ZipEREof|ZipERInval|ZipERNozip|ZipERInternal|ZipERIncons|ZipERRemove|ZipERDeleted|ZipEREncrnotsupp|ZipERRDOnly|ZipERNopasswd|ZipERWrongpasswd|ZipEROpnotsupp|ZipERInuse|ZipERTell|ZipERCompresseddata|ZipERCancelled) primitive ZipEROK fun apply(): I32 => 0 /* N No error */ primitive ZipERMultidisk fun apply(): I32 => 1 /* N Multi-disk zip archives not supported */ primitive ZipERRename fun apply(): I32 => 2 /* S Renaming temporary file failed */ primitive ZipERClose fun apply(): I32 => 3 /* S Closing zip archive failed */ primitive ZipERSeek fun apply(): I32 => 4 /* S Seek error */ primitive ZipERRead fun apply(): I32 => 5 /* S Read error */ primitive ZipERWrite fun apply(): I32 => 6 /* S Write error */ primitive ZipERCRC fun apply(): I32 => 7 /* N CRC error */ primitive ZipERZipclosed fun apply(): I32 => 8 /* N Containing zip archive was closed */ primitive ZipERNoent fun apply(): I32 => 9 /* N No such file */ primitive ZipERExists fun apply(): I32 => 10 /* N File already exists */ primitive ZipEROpen fun apply(): I32 => 11 /* S Can't open file */ primitive ZipERTmpopen fun apply(): I32 => 12 /* S Failure to create temporary file */ primitive ZipERZlib fun apply(): I32 => 13 /* Z Zlib error */ primitive ZipERMemory fun apply(): I32 => 14 /* N Malloc failure */ primitive ZipERChanged fun apply(): I32 => 15 /* N Entry has been changed */ primitive ZipERCompnotsupp fun apply(): I32 => 16 /* N Compression method not supported */ primitive ZipEREof fun apply(): I32 => 17 /* N Premature end of file */ primitive ZipERInval fun apply(): I32 => 18 /* N Invalid argument */ primitive ZipERNozip fun apply(): I32 => 19 /* N Not a zip archive */ primitive ZipERInternal fun apply(): I32 => 20 /* N Internal error */ primitive ZipERIncons fun apply(): I32 => 21 /* N Zip archive inconsistent */ primitive ZipERRemove fun apply(): I32 => 22 /* S Can't remove file */ primitive ZipERDeleted fun apply(): I32 => 23 /* N Entry has been deleted */ primitive ZipEREncrnotsupp fun apply(): I32 => 24 /* N Encryption method not supported */ primitive ZipERRDOnly fun apply(): I32 => 25 /* N Read-only archive */ primitive ZipERNopasswd fun apply(): I32 => 26 /* N No password provided */ primitive ZipERWrongpasswd fun apply(): I32 => 27 /* N Wrong password provided */ primitive ZipEROpnotsupp fun apply(): I32 => 28 /* N Operation not supported */ primitive ZipERInuse fun apply(): I32 => 29 /* N Resource still in use */ primitive ZipERTell fun apply(): I32 => 30 /* S Tell error */ primitive ZipERCompresseddata fun apply(): I32 => 31 /* N Compressed data invalid */ primitive ZipERCancelled fun apply(): I32 => 32 /* N Operation cancelled */ /* type of system error value */ primitive ZipETNone fun apply(): I32 => 0 /* sys_err unused */ primitive ZipETSys fun apply(): I32 => 1 /* sys_err is errno */ primitive ZipETZlib fun apply(): I32 => 2 /* sys_err is zlib error code */ /* compression methods */ primitive ZipCMDefault fun apply(): I32 => -1 /* better of deflate or store */ primitive ZipCMStore fun apply(): I32 => 0 /* stored (uncompressed) */ primitive ZipCMShrink fun apply(): I32 => 1 /* shrunk */ primitive ZipCMReduce1 fun apply(): I32 => 2 /* reduced with factor 1 */ primitive ZipCMReduce2 fun apply(): I32 => 3 /* reduced with factor 2 */ primitive ZipCMReduce3 fun apply(): I32 => 4 /* reduced with factor 3 */ primitive ZipCMReduce4 fun apply(): I32 => 5 /* reduced with factor 4 */ primitive ZipCMImplode fun apply(): I32 => 6 /* imploded */ /* 7 - Reserved for Tokenizing compression algorithm */ primitive ZipCMDeflate fun apply(): I32 => 8 /* deflated */ primitive ZipCMDeflate64 fun apply(): I32 => 9 /* deflate64 */ primitive ZipCMPkwareimplode fun apply(): I32 => 10 /* PKWARE imploding */ /* 11 - Reserved by PKWARE */ primitive ZipCMBzip2 fun apply(): I32 => 12 /* compressed using BZIP2 algorithm */ /* 13 - Reserved by PKWARE */ primitive ZipCMLzma fun apply(): I32 => 14 /* LZMA (EFS) */ /* 15-17 - Reserved by PKWARE */ primitive ZipCMTerse fun apply(): I32 => 18 /* compressed using IBM TERSE (new) */ primitive ZipCMLz77 fun apply(): I32 => 19 /* IBM LZ77 z Architecture (PFS) */ primitive ZipCMLzma2 fun apply(): I32 => 33 primitive ZipCMxz fun apply(): I32 => 95 /* XZ compressed data */ primitive ZipCMJpeg fun apply(): I32 => 96 /* Compressed Jpeg data */ primitive ZipCMWavpack fun apply(): I32 => 97 /* WavPack compressed data */ primitive ZipCMPpmd fun apply(): I32 => 98 /* PPMd version I, Rev 1 */ /* encryption methods */ type ZipEMType is (ZipEMNone|ZipEMTradpkware|ZipEMDes|ZipEMRc2old|ZipEM3des168|ZipEM3des112|ZipEMPkzipaes128|ZipEMPkzipaes192|ZipEMPkzipaes256|ZipEMRc2|ZipEMRc4|ZipEMAes128|ZipEMAes192|ZipEMAes256|ZipEMUnknown) primitive ZipEMNone fun apply(): U16 => 0 /* not encrypted */ primitive ZipEMTradpkware fun apply(): U16 => 1 /* traditional PKWARE encryption */ primitive ZipEMDes fun apply(): U16 => 0x6601 /* strong encryption: DES */ primitive ZipEMRc2old fun apply(): U16 => 0X6602 /* strong encryption: RC2, version < 5.2 */ primitive ZipEM3des168 fun apply(): U16 => 0x6603 primitive ZipEM3des112 fun apply(): U16 => 0X6609 primitive ZipEMPkzipaes128 fun apply(): U16 => 0X660e primitive ZipEMPkzipaes192 fun apply(): U16 => 0x660f primitive ZipEMPkzipaes256 fun apply(): U16 => 0x6610 primitive ZipEMRc2 fun apply(): U16 => 0x6702 /* strong encryption: RC2, version >= 5.2 */ primitive ZipEMRc4 fun apply(): U16 => 0x6801 primitive ZipEMAes128 fun apply(): U16 => 0X0101 /* Winzip AES encryption */ primitive ZipEMAes192 fun apply(): U16 => 0x0102 primitive ZipEMAes256 fun apply(): U16 => 0x0103 primitive ZipEMUnknown fun apply(): U16 => 0xffff /* unknown algorithm */ primitive ZipOPSYSDos fun apply(): U8 => 0x00 primitive ZipOPSYSAmiga fun apply(): U8 => 0x01 primitive ZipOPSYSOpenvms fun apply(): U8 => 0x02 primitive ZipOPSYSUnix fun apply(): U8 => 0x03 primitive ZipOPSYSVmcms fun apply(): U8 => 0x04 primitive ZipOPSYSAtarist fun apply(): U8 => 0x05 primitive ZipOPSYSOs2 fun apply(): U8 => 0x06 primitive ZipOPSYSMacintosh fun apply(): U8 => 0x07 primitive ZipOPSYSZsystem fun apply(): U8 => 0X08 primitive ZipOPSYSCpm fun apply(): U8 => 0x09 primitive ZipOPSYSWindowsntfs fun apply(): U8 => 0x0a primitive ZipOPSYSMvs fun apply(): U8 => 0x0b primitive ZipOPSYSVse fun apply(): U8 => 0x0c primitive ZipOPSYSAcornrisc fun apply(): U8 => 0X0d primitive ZipOPSYSVfat fun apply(): U8 => 0x0e primitive ZipOPSYSAlternatemvs fun apply(): U8 => 0x0f primitive ZipOPSYSBeos fun apply(): U8 => 0x10 primitive ZipOPSYSTandem fun apply(): U8 => 0X11 primitive ZipOPSYSOs400 fun apply(): U8 => 0x12 primitive ZipOPSYSOsx fun apply(): U8 => 0x13 type ZipOPSYSDefault is ZipOPSYSUnix type ZipSOURCESupportsReadable is (ZipSOURCEOpen|ZipSOURCERead|ZipSOURCEClose|ZipSOURCEStat|ZipSOURCEError|ZipSOURCEFree) primitive ZipSOURCEOpen fun apply(): U32 => 1 << 0 /* prepare for reading */ primitive ZipSOURCERead fun apply(): U32 => 1 << 1 /* read data */ primitive ZipSOURCEClose fun apply(): U32 => 1 << 2 /* reading is done */ primitive ZipSOURCEStat fun apply(): U32 => 1 << 3 /* get meta information */ primitive ZipSOURCEError fun apply(): U32 =>1 << 4 /* get error information */ primitive ZipSOURCEFree fun apply(): U32 => 1 << 5 /* cleanup and free resources */ type ZipSOURCESupportsSeekable is (ZipSOURCESupportsReadable|ZipSOURCESeek|ZipSOURCETell|ZipSOURCESupports) primitive ZipSOURCESeek fun apply(): U32 => 1 << 6 /* set position for reading */ primitive ZipSOURCETell fun apply(): U32 => 1 << 7 /* get read position */ primitive ZipSOURCESupports fun apply(): U32 => 1 << 14 /* check whether source supports command */ type ZipSOURCESupportsWritable is (ZipSOURCESupportsSeekable|ZipSOURCEBeginWrite|ZipSOURCECommitWrite|ZipSOURCERollbackWrite|ZipSOURCEWrite|ZipSOURCESeekWrite|ZipSOURCETellWrite|ZipSOURCERemove) primitive ZipSOURCEBeginWrite fun apply(): U32 => 1 << 8 /* prepare for writing */ primitive ZipSOURCECommitWrite fun apply(): U32 => 1 << 9 /* writing is done */ primitive ZipSOURCERollbackWrite fun apply(): U32 => 1 << 10 /* discard written changes */ primitive ZipSOURCEWrite fun apply(): U32 => 1 << 11 /* write data */ primitive ZipSOURCESeekWrite fun apply(): U32 => 1 << 12 /* set position for writing */ primitive ZipSOURCETellWrite fun apply(): U32 => 1 << 13 /* get write position */ primitive ZipSOURCERemove fun apply(): U32 => 1 << 15 /* remove file */ primitive ZipSOURCEReserved1 fun apply(): U32 => 1 << 16 /* previously used internally */ primitive ZipSOURCEBeginWriteCloning fun apply(): U32 => 1 << 17 /* like ZIP_SOURCE_BEGIN_WRITE, but keep part of original file */ primitive ZipSOURCEAcceptEmpty fun apply(): U32 => 1 << 18 /* whether empty files are valid archives */ primitive ZipSOURCEGetFileAttributes fun apply(): U32 => 1 << 19 /* get additional file attributes */ type ZipStatFlags is (ZipSTATName|ZipSTATIndex|ZipSTATSize|ZipSTATCompSize|ZipSTATMtime|ZipSTATCrc|ZipSTATCompMethod|ZipSTATEncryptionMethod|ZipSTATFlag) primitive ZipSTATName fun apply(): U16 => 0x0001 primitive ZipSTATIndex fun apply(): U16 => 0x0002 primitive ZipSTATSize fun apply(): U16 => 0x0004 primitive ZipSTATCompSize fun apply(): U16 => 0x0008 primitive ZipSTATMtime fun apply(): U16 => 0x0010 primitive ZipSTATCrc fun apply(): U16 => 0x0020 primitive ZipSTATCompMethod fun apply(): U16 => 0x0040 primitive ZipSTATEncryptionMethod fun apply(): U16 => 0x0080 primitive ZipSTATFlag fun apply(): U16 => 0x0100 type ZipFileAttributesFlags is (ZipFileAttributesHostSystem|ZipFileAttributesAscii|ZipFileAttributesVersionNeeded|ZipFileAttributesExternalFileAttributes|ZipFileAttributesGeneralPurposeBitFlags) primitive ZipFileAttributesHostSystem fun apply(): U16 => 0x0001 primitive ZipFileAttributesAscii fun apply(): U16 => 0x0002 primitive ZipFileAttributesVersionNeeded fun apply(): U16 => 0x0004 primitive ZipFileAttributesExternalFileAttributes fun apply(): U16 => 0x0008 primitive ZipFileAttributesGeneralPurposeBitFlags fun apply(): U16 => 0x0010","title":"defines.pony"},{"location":"src/ponyzip/functions/","text":"use \"lib:zip\" struct IOFILE primitive ABLibZIP // fun pzipregisterprogresscallback(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[FUNCTIONTYPE] tag): None => // @zip_register_progress_callback(pparg0, pparg1) fun pzipadd(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: NullablePointer[Zipsource] tag): I64 => @zip_add(pparg0, pparg1.cstring(), pparg2) fun pzipadddir(pparg0: NullablePointer[Zip] tag, pparg1: String): I64 => @zip_add_dir(pparg0, pparg1.cstring()) fun pzipgetfilecomment(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: Pointer[I32] tag, pparg3: I32): String => var pcstring: Pointer[U8] = @zip_get_file_comment(pparg0, pparg1, pparg2, pparg3) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipgetnumfiles(pparg0: NullablePointer[Zip] tag): I32 => @zip_get_num_files(pparg0) fun pziprename(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: String): I32 => @zip_rename(pparg0, pparg1, pparg2.cstring()) fun pzipreplace(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: NullablePointer[Zipsource] tag): I32 => @zip_replace(pparg0, pparg1, pparg2) fun pzipsetfilecomment(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: String, pparg3: I32): I32 => @zip_set_file_comment(pparg0, pparg1, pparg2.cstring(), pparg3) fun pziperrorgetsystype(pparg0: I32): I32 => @zip_error_get_sys_type(pparg0) fun pziperrorget(pparg0: NullablePointer[Zip] tag, pparg1: Pointer[I32] tag, pparg2: Pointer[I32] tag): None => @zip_error_get(pparg0, pparg1, pparg2) fun pziperrortostr(pparg0: String, pparg1: U64, pparg2: I32, pparg3: I32): I32 => @zip_error_to_str(pparg0.cstring(), pparg1, pparg2, pparg3) fun pzipfileerrorget(pparg0: NullablePointer[Zipfile] tag, pparg1: Pointer[I32] tag, pparg2: Pointer[I32] tag): None => @zip_file_error_get(pparg0, pparg1, pparg2) fun pzipclose(pparg0: NullablePointer[Zip] tag): I32 => @zip_close(pparg0) fun pzipdelete(pparg0: NullablePointer[Zip] tag, pparg1: U64): I32 => @zip_delete(pparg0, pparg1) fun pzipdiradd(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U32): I64 => @zip_dir_add(pparg0, pparg1.cstring(), pparg2) fun pzipdiscard(pparg0: NullablePointer[Zip] tag): None => @zip_discard(pparg0) fun pzipgeterror(pparg0: NullablePointer[Zip] tag): NullablePointer[Ziperror] => @zip_get_error(pparg0) fun pziperrorclear(pparg0: NullablePointer[Zip] tag): None => @zip_error_clear(pparg0) fun pziperrorcodezip(pparg0: NullablePointer[Ziperror] tag): I32 => @zip_error_code_zip(pparg0) fun pziperrorcodesystem(pparg0: NullablePointer[Ziperror] tag): I32 => @zip_error_code_system(pparg0) fun pziperrorfini(pparg0: NullablePointer[Ziperror] tag): None => @zip_error_fini(pparg0) fun pziperrorinit(pparg0: NullablePointer[Ziperror] tag): None => @zip_error_init(pparg0) fun pziperrorinitwithcode(pparg0: NullablePointer[Ziperror] tag, pparg1: I32): None => @zip_error_init_with_code(pparg0, pparg1) fun pziperrorset(pparg0: NullablePointer[Ziperror] tag, pparg1: I32, pparg2: I32): None => @zip_error_set(pparg0, pparg1, pparg2) fun pziperrorstrerror(pparg0: NullablePointer[Ziperror] tag): String => var pcstring: Pointer[U8] = @zip_error_strerror(pparg0) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pziperrorsystemtype(pparg0: NullablePointer[Ziperror] tag): I32 => @zip_error_system_type(pparg0) fun pziperrortodata(pparg0: NullablePointer[Ziperror] tag, pparg1: Pointer[None] tag, pparg2: U64): I64 => @zip_error_to_data(pparg0, pparg1, pparg2) fun pzipfclose(pparg0: NullablePointer[Zipfile] tag): I32 => @zip_fclose(pparg0) fun pzipfdopen(pparg0: I32, pparg1: I32, pparg2: Pointer[I32] tag): NullablePointer[Zip] => @zip_fdopen(pparg0, pparg1, pparg2) fun pzipfileadd(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: NullablePointer[Zipsource] tag, pparg3: U32): I64 => @zip_file_add(pparg0, pparg1.cstring(), pparg2, pparg3) fun pzipfileattributesinit(pparg0: NullablePointer[Zipfileattributes] tag): None => @zip_file_attributes_init(pparg0) fun pzipfileerrorclear(pparg0: NullablePointer[Zipfile] tag): None => @zip_file_error_clear(pparg0) fun pzipfileextrafielddelete(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U32): I32 => @zip_file_extra_field_delete(pparg0, pparg1, pparg2, pparg3) fun pzipfileextrafielddeletebyid(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U16, pparg4: U32): I32 => @zip_file_extra_field_delete_by_id(pparg0, pparg1, pparg2, pparg3, pparg4) fun pzipfileextrafieldset(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U16, pparg4: String, pparg5: U16, pparg6: U32): I32 => @zip_file_extra_field_set(pparg0, pparg1, pparg2, pparg3, pparg4.cstring(), pparg5, pparg6) fun pzipfileextrafieldscount(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32): I16 => @zip_file_extra_fields_count(pparg0, pparg1, pparg2) fun pzipfileextrafieldscountbyid(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U32): I16 => @zip_file_extra_fields_count_by_id(pparg0, pparg1, pparg2, pparg3) fun pzipfileextrafieldget(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: Pointer[U16] tag, pparg4: Pointer[U16] tag, pparg5: U32): String => var pcstring: Pointer[U8] = @zip_file_extra_field_get(pparg0, pparg1, pparg2, pparg3, pparg4, pparg5) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipfileextrafieldgetbyid(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U16, pparg4: Pointer[U16] tag, pparg5: U32): String => var pcstring: Pointer[U8] = @zip_file_extra_field_get_by_id(pparg0, pparg1, pparg2, pparg3, pparg4, pparg5) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipfilegetcomment(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: Pointer[U32] tag, pparg3: U32): String => var pcstring: Pointer[U8] = @zip_file_get_comment(pparg0, pparg1, pparg2, pparg3) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipfilegeterror(pparg0: NullablePointer[Zipfile] tag): NullablePointer[Ziperror] => @zip_file_get_error(pparg0) fun pzipfilegetexternalattributes(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32, pparg3: String, pparg4: Pointer[U32] tag): I32 => @zip_file_get_external_attributes(pparg0, pparg1, pparg2, pparg3.cstring(), pparg4) fun pzipfilerename(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: String, pparg3: U32): I32 => @zip_file_rename(pparg0, pparg1, pparg2.cstring(), pparg3) fun pzipfilereplace(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: NullablePointer[Zipsource] tag, pparg3: U32): I32 => @zip_file_replace(pparg0, pparg1, pparg2, pparg3) fun pzipfilesetcomment(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: String, pparg3: U16, pparg4: U32): I32 => @zip_file_set_comment(pparg0, pparg1, pparg2.cstring(), pparg3, pparg4) fun pzipfilesetdostime(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: U16, pparg4: U32): I32 => @zip_file_set_dostime(pparg0, pparg1, pparg2, pparg3, pparg4) fun pzipfilesetencryption(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U16, pparg3: String): I32 => @zip_file_set_encryption(pparg0, pparg1, pparg2, pparg3.cstring()) fun pzipfilesetexternalattributes(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32, pparg3: U8, pparg4: U32): I32 => @zip_file_set_external_attributes(pparg0, pparg1, pparg2, pparg3, pparg4) fun pzipfilesetmtime(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: I64, pparg3: U32): I32 => @zip_file_set_mtime(pparg0, pparg1, pparg2, pparg3) fun pzipfilestrerror(pparg0: NullablePointer[Zipfile] tag): String => var pcstring: Pointer[U8] = @zip_file_strerror(pparg0) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipfopen(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U32): NullablePointer[Zipfile] => @zip_fopen(pparg0, pparg1.cstring(), pparg2) fun pzipfopenencrypted(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U32, pparg3: String): NullablePointer[Zipfile] => @zip_fopen_encrypted(pparg0, pparg1.cstring(), pparg2, pparg3.cstring()) fun pzipfopenindex(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32): NullablePointer[Zipfile] => @zip_fopen_index(pparg0, pparg1, pparg2) fun pzipfopenindexencrypted(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32, pparg3: String): NullablePointer[Zipfile] => @zip_fopen_index_encrypted(pparg0, pparg1, pparg2, pparg3.cstring()) fun pzipfread(pparg0: NullablePointer[Zipfile] tag, pparg1: Pointer[U8] tag, pparg2: U64): I64 => @zip_fread(pparg0, pparg1, pparg2) fun pzipfseek(pparg0: NullablePointer[Zipfile] tag, pparg1: I64, pparg2: I32): I8 => @zip_fseek(pparg0, pparg1, pparg2) fun pzipftell(pparg0: NullablePointer[Zipfile] tag): I64 => @zip_ftell(pparg0) fun pzipgetarchivecomment(pparg0: NullablePointer[Zip] tag, pparg1: Pointer[I32] tag, pparg2: U32): String => var pcstring: Pointer[U8] = @zip_get_archive_comment(pparg0, pparg1, pparg2) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipgetarchiveflag(pparg0: NullablePointer[Zip] tag, pparg1: U32, pparg2: U32): I32 => @zip_get_archive_flag(pparg0, pparg1, pparg2) fun pzipgetname(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32): String => var pcstring: Pointer[U8] = @zip_get_name(pparg0, pparg1, pparg2) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipgetnumentries(pparg0: NullablePointer[Zip] tag, pparg1: U32): I64 => @zip_get_num_entries(pparg0, pparg1) fun pziplibzipversion(): String => var pcstring: Pointer[U8] = @zip_libzip_version() let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipnamelocate(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U32): I64 => @zip_name_locate(pparg0, pparg1.cstring(), pparg2) fun pzipopen(pparg0: String, pparg1: I32, pparg2: Pointer[I32] tag): NullablePointer[Zip] => @zip_open(pparg0.cstring(), pparg1, pparg2) fun pzipopenfromsource(pparg0: NullablePointer[Zipsource] tag, pparg1: I32, pparg2: NullablePointer[Ziperror] tag): NullablePointer[Zip] => @zip_open_from_source(pparg0, pparg1, pparg2) // fun pzipregisterprogresscallbackwithstate(pparg0: NullablePointer[Zip] tag, pparg1: F64, pparg2: NullablePointer[FUNCTIONTYPE] tag, pparg3: NullablePointer[FUNCTIONTYPE] tag, pparg4: Pointer[None] tag): I32 => // @zip_register_progress_callback_with_state(pparg0, pparg1, pparg2, pparg3, pparg4) // fun pzipregistercancelcallbackwithstate(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[FUNCTIONTYPE] tag, pparg2: NullablePointer[FUNCTIONTYPE] tag, pparg3: Pointer[None] tag): I32 => // @zip_register_cancel_callback_with_state(pparg0, pparg1, pparg2, pparg3) fun pzipsetarchivecomment(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U16): I32 => @zip_set_archive_comment(pparg0, pparg1.cstring(), pparg2) fun pzipsetarchiveflag(pparg0: NullablePointer[Zip] tag, pparg1: U32, pparg2: I32): I32 => @zip_set_archive_flag(pparg0, pparg1, pparg2) fun pzipsetdefaultpassword(pparg0: NullablePointer[Zip] tag, pparg1: String): I32 => @zip_set_default_password(pparg0, pparg1.cstring()) fun pzipsetfilecompression(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: I32, pparg3: U32): I32 => @zip_set_file_compression(pparg0, pparg1, pparg2, pparg3) fun pzipsourcebeginwrite(pparg0: NullablePointer[Zipsource] tag): I32 => @zip_source_begin_write(pparg0) fun pzipsourcebeginwritecloning(pparg0: NullablePointer[Zipsource] tag, pparg1: U64): I32 => @zip_source_begin_write_cloning(pparg0, pparg1) fun pzipsourcebuffer(pparg0: NullablePointer[Zip] tag, pparg1: Pointer[None] tag, pparg2: U64, pparg3: I32): NullablePointer[Zipsource] => @zip_source_buffer(pparg0, pparg1, pparg2, pparg3) fun pzipsourcebuffercreate(pparg0: Pointer[U8] tag, pparg1: U64, pparg2: I32, pparg3: NullablePointer[Ziperror] tag): NullablePointer[Zipsource] => @zip_source_buffer_create(pparg0, pparg1, pparg2, pparg3) fun pzipsourcebufferfragment(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[Zipbufferfragment] tag, pparg2: U64, pparg3: I32): NullablePointer[Zipsource] => @zip_source_buffer_fragment(pparg0, pparg1, pparg2, pparg3) fun pzipsourcebufferfragmentcreate(pparg0: NullablePointer[Zipbufferfragment] tag, pparg1: U64, pparg2: I32, pparg3: NullablePointer[Ziperror] tag): NullablePointer[Zipsource] => @zip_source_buffer_fragment_create(pparg0, pparg1, pparg2, pparg3) fun pzipsourceclose(pparg0: NullablePointer[Zipsource] tag): I32 => @zip_source_close(pparg0) fun pzipsourcecommitwrite(pparg0: NullablePointer[Zipsource] tag): I32 => @zip_source_commit_write(pparg0) fun pzipsourceerror(pparg0: NullablePointer[Zipsource] tag): NullablePointer[Ziperror] => @zip_source_error(pparg0) fun pzipsourcefile(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U64, pparg3: I64): NullablePointer[Zipsource] => @zip_source_file(pparg0, pparg1.cstring(), pparg2, pparg3) fun pzipsourcefilecreate(pparg0: String, pparg1: U64, pparg2: I64, pparg3: NullablePointer[Ziperror] tag): NullablePointer[Zipsource] => @zip_source_file_create(pparg0.cstring(), pparg1, pparg2, pparg3) fun pzipsourcefilep(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[IOFILE] tag, pparg2: U64, pparg3: I64): NullablePointer[Zipsource] => @zip_source_filep(pparg0, pparg1, pparg2, pparg3) fun pzipsourcefilepcreate(pparg0: NullablePointer[IOFILE] tag, pparg1: U64, pparg2: I64, pparg3: NullablePointer[Ziperror] tag): NullablePointer[Zipsource] => @zip_source_filep_create(pparg0, pparg1, pparg2, pparg3) fun pzipsourcefree(pparg0: NullablePointer[Zipsource] tag): None => @zip_source_free(pparg0) // fun pzipsourcefunction(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[FUNCTIONTYPE] tag, pparg2: Pointer[None] tag): NullablePointer[Zipsource] => // @zip_source_function(pparg0, pparg1, pparg2) // fun pzipsourcefunctioncreate(pparg0: NullablePointer[FUNCTIONTYPE] tag, pparg1: Pointer[None] tag, pparg2: NullablePointer[Ziperror] tag): NullablePointer[Zipsource] => // @zip_source_function_create(pparg0, pparg1, pparg2) fun pzipsourcegetfileattributes(pparg0: NullablePointer[Zipsource] tag, pparg1: NullablePointer[Zipfileattributes] tag): I32 => @zip_source_get_file_attributes(pparg0, pparg1) fun pzipsourceisdeleted(pparg0: NullablePointer[Zipsource] tag): I32 => @zip_source_is_deleted(pparg0) fun pzipsourcekeep(pparg0: NullablePointer[Zipsource] tag): None => @zip_source_keep(pparg0) fun pzipsourceopen(pparg0: NullablePointer[Zipsource] tag): I32 => @zip_source_open(pparg0) fun pzipsourceread(pparg0: NullablePointer[Zipsource] tag, pparg1: Pointer[None] tag, pparg2: U64): I64 => @zip_source_read(pparg0, pparg1, pparg2) fun pzipsourcerollbackwrite(pparg0: NullablePointer[Zipsource] tag): None => @zip_source_rollback_write(pparg0) fun pzipsourceseek(pparg0: NullablePointer[Zipsource] tag, pparg1: I64, pparg2: I32): I32 => @zip_source_seek(pparg0, pparg1, pparg2) fun pzipsourceseekcomputeoffset(pparg0: U64, pparg1: U64, pparg2: Pointer[None] tag, pparg3: U64, pparg4: NullablePointer[Ziperror] tag): I64 => @zip_source_seek_compute_offset(pparg0, pparg1, pparg2, pparg3, pparg4) fun pzipsourceseekwrite(pparg0: NullablePointer[Zipsource] tag, pparg1: I64, pparg2: I32): I32 => @zip_source_seek_write(pparg0, pparg1, pparg2) fun pzipsourcestat(pparg0: NullablePointer[Zipsource] tag, pparg1: NullablePointer[Zipstat] tag): I32 => @zip_source_stat(pparg0, pparg1) fun pzipsourcetell(pparg0: NullablePointer[Zipsource] tag): I64 => @zip_source_tell(pparg0) fun pzipsourcetellwrite(pparg0: NullablePointer[Zipsource] tag): I64 => @zip_source_tell_write(pparg0) fun pzipsourcewrite(pparg0: NullablePointer[Zipsource] tag, pparg1: Pointer[None] tag, pparg2: U64): I64 => @zip_source_write(pparg0, pparg1, pparg2) fun pzipsourcezip(pparg0: NullablePointer[Zip] tag, pparg1: NullablePointer[Zip] tag, pparg2: U64, pparg3: U32, pparg4: U64, pparg5: I64): NullablePointer[Zipsource] => @zip_source_zip(pparg0, pparg1, pparg2, pparg3, pparg4, pparg5) fun pzipstat(pparg0: NullablePointer[Zip] tag, pparg1: String, pparg2: U32, pparg3: NullablePointer[Zipstat] tag): I32 => @zip_stat(pparg0, pparg1.cstring(), pparg2, pparg3) fun pzipstatindex(pparg0: NullablePointer[Zip] tag, pparg1: U64, pparg2: U32, pparg3: NullablePointer[Zipstat] tag): I32 => @zip_stat_index(pparg0, pparg1, pparg2, pparg3) fun pzipstatinit(pparg0: NullablePointer[Zipstat] tag): None => @zip_stat_init(pparg0) fun pzipstrerror(pparg0: NullablePointer[Zip] tag): String => var pcstring: Pointer[U8] = @zip_strerror(pparg0) let p: String iso = String.from_cstring(pcstring).clone() consume p fun pzipunchange(pparg0: NullablePointer[Zip] tag, pparg1: U64): I32 => @zip_unchange(pparg0, pparg1) fun pzipunchangeall(pparg0: NullablePointer[Zip] tag): I32 => @zip_unchange_all(pparg0) fun pzipunchangearchive(pparg0: NullablePointer[Zip] tag): I32 => @zip_unchange_archive(pparg0) fun pzipcompressionmethodsupported(pmethod: I32, pcompress: I32): I32 => @zip_compression_method_supported(pmethod, pcompress) fun pzipencryptionmethodsupported(pmethod: U16, pencode: I32): I32 => @zip_encryption_method_supported(pmethod, pencode)","title":"functions.pony"},{"location":"src/ponyzip/ponyzip/","text":"use \"debug\" use \"collections\" use @printf[I32](...) class PonyZip var zip: NullablePointer[Zip] = NullablePointer[Zip].none() var errorno: I32 = 0 var errorstr: String = \"\" var initflags: I32 = 0 new create(filename: String, flags: Array[ZipFlags]) => initflags = zfflags(flags) var errno: Array[I32] = [I32(42)] zip = ABLibZIP.pzipopen(filename, initflags, errno.cpointer()) if (zip.is_none()) then try errorno = errno.apply(0)? var ziperr: Ziperror = Ziperror var ziperrp: NullablePointer[Ziperror] = NullablePointer[Ziperror](ziperr) ABLibZIP.pziperrorinitwithcode(ziperrp, errorno) errorstr = ABLibZIP.pziperrorstrerror(ziperrp) end end fun valid(): Bool => if (zip.is_none()) then false else true end fun zfflags(flags: Array[ZipFlags]): I32 => var rv: I32 = 0 for f in flags.values() do rv = rv+f.apply() end rv fun zfflflags(flags: Array[ZipFLFlags]): U32 => var rv: U32 = 0 for f in flags.values() do rv = rv+f.apply() end rv fun ref count(flags: Array[ZipFLFlags] = []): USize ? => if (zip.is_none()) then error else ABLibZIP.pzipgetnumentries(zip, zfflflags(flags)).usize() end fun ref filesdata(): Array[Zipstat] ? => var cnt: USize = this.count([])? // FIXME ? var rv: Array[Zipstat] = Array[Zipstat] for i in Range(0,cnt) do rv.push(zip_stat_index(i)?) end rv fun zip_stat_index(index: USize): Zipstat ? => if (zip.is_none()) then error end var zfile: Zipstat = Zipstat var zfilep: NullablePointer[Zipstat] = NullablePointer[Zipstat](zfile) var ii: I32 = ABLibZIP.pzipstatindex(zip, index.u64(), U32(0), zfilep) if (zfilep.is_none()) then error else zfile end fun ref readfile(zipstat: Zipstat): Array[U8] iso^ ? => if (zipstat.pencryptionmethod != ZipEMNone.apply()) then error // We should probably automatically call // a decrypt function here... cos we're nice end let bytes: USize = zipstat.size() Debug.out(\"CompressedFilesize: \" + zipstat.compsize().string()) Debug.out(\"Filesize: \" + bytes.string()) var zf: NullablePointer[Zipfile] = ABLibZIP.pzipfopenindex(zip, zipstat.index().u64(), U32(0)) if (zf.is_none()) then error end var data: Array[U8] iso = recover iso Array[U8].>undefined(bytes) end var cnt: I64 = ABLibZIP.pzipfread(zf, data.cpointer(), bytes.u64()) Debug.out(\"Read: \" + cnt.string() + \" bytes out of \" + bytes.string()) consume data fun ref add_file(filename: String, data: Array[U8] val, flags: Array[ZipFLFlags]): USize ? => if (zip.is_none()) then error end var ziperr: Ziperror = Ziperror var ziperrp: NullablePointer[Ziperror] = NullablePointer[Ziperror](ziperr) let zs: NullablePointer[Zipsource] = ABLibZIP.pzipsourcebuffercreate(data.cpointer(), data.size().u64(), I32(1), ziperrp) if (zs.is_none()) then errorstr = ABLibZIP.pziperrorstrerror(ziperrp) error end ABLibZIP.pzipfileadd(zip, filename, zs, U32(0)).usize() // FIXME //// Check here for -1 too for writing issues... fun close(): None => ABLibZIP.pzipclose(zip)","title":"ponyzip.pony"},{"location":"src/ponyzip/structs/","text":"use \"time\" struct Zipsourceargsseek var poffset: I64 = I64(0) var pwhence: I32 = I32(0) struct Ziperror var pziperr: I32 = I32(0) var psyserr: I32 = I32(0) var pstr: Pointer[U8] = Pointer[U8] struct Zipstat var pvalid: U64 = U64(0) var pname: Pointer[U8] = Pointer[U8] var pindex: U64 = U64(0) var psize: U64 = U64(0) var pcompsize: U64 = U64(0) var pmtime: I64 = I64(0) var pcrc: U32 = U32(0) var pcompmethod: U16 = U16(0) var pencryptionmethod: U16 = U16(0) var pflags: U32 = U32(0) fun ref name(): String iso^ => let s: String iso = String.from_cstring(pname).clone() consume s fun index(): USize => pindex.usize() fun size(): USize => psize.usize() fun compsize(): USize => pcompsize.usize() fun mtime(): PosixDate => PosixDate(pmtime, I64(0)) fun crc(): U32 => pcrc struct Zipbufferfragment var pdata: Pointer[U8] = Pointer[U8] var plength: U64 = U64(0) struct Zipfileattributes var pvalid: U64 = U64(0) var pversion: U8 = U8(0) var phostsystem: U8 = U8(0) var pascii: U8 = U8(0) var pversionneeded: U8 = U8(0) var pexternalfileattributes: U32 = U32(0) var pgeneralpurposebitflags: U16 = U16(0) var pgeneralpurposebitmask: U16 = U16(0) struct Zip struct Zipfile struct Zipsource","title":"structs.pony"},{"location":"src/random/dice/","text":"class Dice \"\"\" A simple dice roller. \"\"\" var r: Random new create(from: Random) => \"\"\" Initialise with a random number generator. \"\"\" r = from fun ref apply(count: U64, sides: U64): U64 => \"\"\" Return the sum of `count` rolls of a die with the given number of `sides`. The die is numbered from 1 to `sides`. For example, count = 2 and sides = 6 will return a value between 2 and 12. \"\"\" var sum = count var i: U64 = 0 while i < count do sum = sum + r.int(sides) i = i + 1 end sum","title":"dice.pony"},{"location":"src/random/mt/","text":"class MT is Random \"\"\" A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. \"\"\" embed _state: Array[U64] var _index: USize new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _state = Array[U64](_n()) _index = _n() var seed = x xor y _state.push(seed) var i: USize = 1 while i < _n() do seed = ((seed xor (seed >> 62)) * 6364136223846793005) + i.u64() _state.push(seed) i = i + 1 end fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" if _index >= _n() then _populate() end try var x = _state(_index)? _index = _index + 1 x = x xor ((x >> 29) and 0x5555555555555555) x = x xor ((x << 17) and 0x71d67fffeda60000) x = x xor ((x << 37) and 0xfff7eee000000000) x xor (x >> 43) else 0 end fun ref _populate() => \"\"\" Repopulates the state array. \"\"\" try _index = 0 var x = _state(0)? var i: USize = 0 while i < _m() do x = _lower(i, x)? i = i + 1 end x = _state(_m())? i = _m() while i < _n1() do x = _upper(i, x)? i = i + 1 end _wrap()? end fun tag _n(): USize => 312 fun tag _m(): USize => 156 fun tag _n1(): USize => _n() - 1 fun tag _mask(x: U64, y: U64): U64 => (x and 0xffffffff80000000) or (y and 0x000000007fffffff) fun tag _matrix(x: U64): U64 => (x and 1) * 0xb5026f5aa96619e9 fun tag _mix(x: U64, y: U64): U64 => let z = _mask(x, y) (z >> 1) xor _matrix(z) fun ref _lower(i: USize, x: U64): U64 ? => let y = _state(i + 1)? _state(i)? = _state(i + _m())? xor _mix(x, y) y fun ref _upper(i: USize, x: U64): U64 ? => let y = _state(i + 1)? _state(i)? = _state(i - _m())? xor _mix(x, y) y fun ref _wrap(): U64 ? => let x = _state(_n1())? let y = _state(0)? _state(_n1())? = _state(_m() - 1)? xor _mix(x, y) y","title":"mt.pony"},{"location":"src/random/random/","text":"\"\"\" # Random package The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with `Time.now`. ```pony let rand = Rand let n = rand.next() ``` \"\"\" type Rand is XorOshiro128Plus trait Random \"\"\" The `Random` trait should be implemented by all random number generators. The only method you need to implement is `fun ref next(): 64`. Once that method has been implemented, the `Random` trait provides default implementations of conversions to other number types. \"\"\" new create(x: U64 = 5489, y: U64 = 0) \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" fun tag has_next(): Bool => \"\"\" If used as an iterator, this always has another value. \"\"\" true fun ref next(): U64 \"\"\" A random integer in [0, 2^64) \"\"\" fun ref u8(): U8 => \"\"\" A random integer in [0, 2^8) \"\"\" (next() >> 56).u8() fun ref u16(): U16 => \"\"\" A random integer in [0, 2^16) \"\"\" (next() >> 48).u16() fun ref u32(): U32 => \"\"\" A random integer in [0, 2^32) \"\"\" (next() >> 32).u32() fun ref u64(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" next() fun ref u128(): U128 => \"\"\" A random integer in [0, 2^128) \"\"\" (next().u128() << 64) or next().u128() fun ref ulong(): ULong => \"\"\" A random integer in [0, ULong.max_value()] \"\"\" ifdef ilp32 or llp64 then (next() >> 32).ulong() else next().ulong() end fun ref usize(): USize => \"\"\" A random integer in [0, USize.max_value()] \"\"\" ifdef ilp32 then (next() >> 32).usize() else next().usize() end fun ref i8(): I8 => \"\"\" A random integer in [-2^7, 2^7) \"\"\" u8().i8() fun ref i16(): I16 => \"\"\" A random integer in [-2^15, 2^15) \"\"\" u16().i16() fun ref i32(): I32 => \"\"\" A random integer in [-2^31, 2^31) \"\"\" u32().i32() fun ref i64(): I64 => \"\"\" A random integer in [-2^63, 2^63) \"\"\" u64().i64() fun ref i128(): I128 => \"\"\" A random integer in [-2^127, 2^127) \"\"\" u128().i128() fun ref ilong(): ILong => \"\"\" A random integer in [ILong.min_value(), ILong.max_value()] \"\"\" ulong().ilong() fun ref isize(): ISize => \"\"\" A random integer in [ISize.min_value(), ISize.max_value()] \"\"\" usize().isize() fun ref int_fp_mult[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) \"\"\" N.from[F64](real() * n.f64()) fun ref int[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. \"\"\" ifdef native128 then // TODO: once we have specialized generic functions, chose smaller int // types for smaller N. N.from[U64](((next().u128() * n.u128()) >> 64).u64()) else int_fp_mult[N](n) end fun ref int_unbiased[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) Not biased with small values of `n` like `int`. \"\"\" N.from[U64](_u64_unbiased(U64.from[N](n))) fun ref _u64_unbiased(range: U64): U64 => \"\"\" Generates a U64 in the range `[0, n)` while avoiding bias. See: - https://arxiv.org/abs/1805.10941 - http://www.pcg-random.org/posts/bounded-rands.html \"\"\" var x: U64 = next() var m: U128 = x.u128() * range.u128() var l: U64 = m.u64() if l < range then var t: U64 = -range if t >= range then t = t - range if t >= range then t = t % range end end while (l < t) do x = u64() m = x.u128() * range.u128() l = m.u64() end end (m >> 64).u64() fun ref real(): F64 => \"\"\" A random number in [0, 1) \"\"\" (next() >> 11).f64() * (F64(1) / 9007199254740992) fun ref shuffle[A](array: Array[A]) => \"\"\" Shuffle the elements of the array into a random order, mutating the array. \"\"\" var i: USize = array.size() try while i > 1 do let ceil = i = i - 1 array.swap_elements(i, int[USize](ceil))? end end","title":"random.pony"},{"location":"src/random/splitmix64/","text":"class SplitMix64 is Random \"\"\" Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using [XorOshiro128StarStar](random-XorOshiro128StarStar.md) or [XorOshiro128Plus](random-XorOshiro128Plus.md) should be prefered unless using only 64 bit of state is a requirement. \"\"\" // state var _x: U64 new from_u64(x: U64 = 5489) => _x = x new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Only x is used, y is discarded. \"\"\" _x = x fun ref next(): U64 => _x = _x + U64(0x9e3779b97f4a7c15) var z: U64 = _x z = (z xor (z >> 30)) * U64(0xbf58476d1ce4e5b9) z = (z xor (z >> 27)) * U64(0x94d049bb133111eb) z xor (z >> 31)","title":"splitmix64.pony"},{"location":"src/random/xoroshiro/","text":"class XorOshiro128Plus is Random \"\"\" This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. \"\"\" // state var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _x = x _y = y next() fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" let x = _x var y = _y let r = x + y y = x xor y _x = x.rotl(24) xor y xor (y << 16) _y = y.rotl(37) r class XorOshiro128StarStar is Random \"\"\" This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than [XorOshiro128Plus](random-XorOshiro128Plus.md) but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). \"\"\" var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => _x = x _y = y next() fun ref next(): U64 => let x = _x var y = _y let r = (x * 5).rotl(7) * 9 y = x xor y _x = x.rotl(24) xor y xor (y << 16) _y = y.rotl(37) r","title":"xoroshiro.pony"},{"location":"src/random/xorshift/","text":"class XorShift128Plus is Random \"\"\" This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. \"\"\" var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _x = x _y = y next() fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" var y = _x let x = _y let r = x + y _x = x y = y xor (y << 23) _y = y xor x xor (y >> 18) xor (x >> 5) r","title":"xorshift.pony"},{"location":"src/time/nanos/","text":"primitive Nanos \"\"\" Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. \"\"\" fun from_seconds(t: U64): U64 => t * 1_000_000_000 fun from_millis(t: U64): U64 => t * 1_000_000 fun from_micros(t: U64): U64 => t * 1_000 fun from_seconds_f(t: F64): U64 => (t * 1_000_000_000).trunc().u64() fun from_millis_f(t: F64): U64 => (t * 1_000_000).trunc().u64() fun from_micros_f(t: F64): U64 => (t * 1_000).trunc().u64() fun from_wall_clock(wall: (I64, I64)): U64 => ((wall._1 * 1000000000) + wall._2).u64()","title":"nanos.pony"},{"location":"src/time/posix_date/","text":"use @ponyint_gmtime[None](date: PosixDate, sec: I64, nsec: I64) use @ponyint_timegm[I64](date: PosixDate tag) use @ponyint_formattime[Pointer[U8]](date: PosixDate tag, fmt: Pointer[U8] tag) ? class PosixDate \"\"\" Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. \"\"\" var nsec: I32 = 0 var sec: I32 = 0 var min: I32 = 0 var hour: I32 = 0 var day_of_month: I32 = 1 var month: I32 = 1 var year: I32 = 1970 var day_of_week: I32 = 4 var day_of_year: I32 = 1 new create(seconds: I64 = 0, nanoseconds: I64 = 0) => \"\"\" Create a date from a POSIX time. Negative arguments will be changed to zero. \"\"\" @ponyint_gmtime(this, _negative_to_zero(seconds), _negative_to_zero(nanoseconds)) fun time(): I64 => \"\"\" Return a POSIX time. Treats the date as UTC. \"\"\" @ponyint_timegm(this) fun ref normal() => \"\"\" Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. \"\"\" @ponyint_gmtime(this, time(), nsec.i64()) fun format(fmt: String): String ? => \"\"\" Format the time as for strftime. \"\"\" recover String.from_cstring(@ponyint_formattime(this, fmt.cstring())?) end fun _negative_to_zero(value: I64): I64 => if value > 0 then value else 0 end","title":"posix_date.pony"},{"location":"src/time/time/","text":"\"\"\" # Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. \"\"\" use \"lib:rt\" if linux use @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](eax: I32) use @\"internal.x86.rdtscp\"[U64](aux: Pointer[I32]) use @\"llvm.x86.rdtsc\"[U64]() use @\"llvm.readcyclecounter\"[U64]() use @time[I64](tloc: Pointer[None]) use @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)]) if lp64 and (linux or bsd) use @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)]) if ilp32 and (linux or bsd) use @mach_absolute_time[U64]() if osx use @gettimeofday[I32](tp: Pointer[(I64, I64)], tzp: Pointer[None]) if osx use @GetSystemTimeAsFileTime[None](times_as_file_time: Pointer[(U32, U32)]) if windows use @QueryPerformanceFrequency[I32](frequency: Pointer[(U32, U32)]) if windows use @QueryPerformanceCounter[I32](count: Pointer[(U32, U32)]) if windows type _Clock is (_ClockRealtime | _ClockMonotonic) primitive _ClockRealtime fun apply(): U32 => ifdef linux or bsd then 0 else compile_error \"no clock_gettime realtime clock\" end primitive _ClockMonotonic fun apply(): U32 => ifdef linux then 1 elseif bsd then 4 else compile_error \"no clock_gettime monotonic clock\" end primitive Time \"\"\" A collection of ways to fetch the current time. \"\"\" fun now(): (I64 /*sec*/, I64 /*nsec*/) => \"\"\" The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) \"\"\" ifdef osx then var ts: (I64, I64) = (0, 0) @gettimeofday(addressof ts, USize(0)) (ts._1, ts._2 * 1000) elseif linux or bsd then _clock_gettime(_ClockRealtime) elseif windows then var ft: (U32, U32) = (0, 0) @GetSystemTimeAsFileTime(addressof ft) var qft = ft._1.u64() or (ft._2.u64() << 32) var epoch = qft.i64() - 116444736000000000 var sec = epoch / 10000000 var nsec = (epoch - (sec * 10000000)) * 100 (sec, nsec) else compile_error \"unsupported platform\" end fun seconds(): I64 => \"\"\" The wall-clock adjusted system time. \"\"\" @time(USize(0)) fun millis(): U64 => \"\"\" Monotonic unadjusted milliseconds. \"\"\" ifdef osx then @mach_absolute_time() / 1000000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000) + (ts._2 / 1000000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000) / qpf else compile_error \"unsupported platform\" end fun micros(): U64 => \"\"\" Monotonic unadjusted microseconds. \"\"\" ifdef osx then @mach_absolute_time() / 1000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000) + (ts._2 / 1000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000) / qpf else compile_error \"unsupported platform\" end fun nanos(): U64 => \"\"\" Monotonic unadjusted nanoseconds. \"\"\" ifdef osx then @mach_absolute_time() elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000000) + ts._2).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000000) / qpf else compile_error \"unsupported platform\" end fun cycles(): U64 => \"\"\" Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. \"\"\" @\"llvm.readcyclecounter\"() fun perf_begin(): U64 => \"\"\" Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. \"\"\" ifdef x86 then @\"internal.x86.cpuid\"(I32(0)) @\"llvm.x86.rdtsc\"() else compile_error \"perf_begin only supported on x86\" end fun perf_end(): U64 => \"\"\" Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. \"\"\" ifdef x86 then var aux: I32 = 0 var ts = @\"internal.x86.rdtscp\"(addressof aux) @\"internal.x86.cpuid\"(I32(0)) ts else compile_error \"perf_end only supported on x86\" end fun _clock_gettime(clock: _Clock): (I64, I64) => \"\"\" Return a clock time on linux and bsd. \"\"\" ifdef lp64 and (linux or bsd) then var ts: (I64, I64) = (0, 0) @clock_gettime(clock(), addressof ts) ts elseif ilp32 and (linux or bsd) then var ts: (I32, I32) = (0, 0) @clock_gettime(clock(), addressof ts) (ts._1.i64(), ts._2.i64()) else compile_error \"no clock_gettime\" end fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) => \"\"\" Return QPC and QPF. \"\"\" ifdef windows then var pf: (U32, U32) = (0, 0) var pc: (U32, U32) = (0, 0) @QueryPerformanceFrequency(addressof pf) @QueryPerformanceCounter(addressof pc) let qpf = pf._1.u64() or (pf._2.u64() << 32) let qpc = pc._1.u64() or (pc._2.u64() << 32) (qpc, qpf) else compile_error \"no QueryPerformanceCounter\" end","title":"time.pony"},{"location":"src/time/timer/","text":"use \"collections\" class Timer \"\"\" The `Timer` class represents a timer that fires after an expiration time, and then fires at an interval. When a `Timer` fires, it calls the `apply` method of the `TimerNotify` object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the `TimerNotify` object prints how many times it has been called: ```pony use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true ``` \"\"\" var _expiration: U64 var _interval: U64 let _notify: TimerNotify embed _node: ListNode[Timer] new iso create( notify: TimerNotify iso, expiration: U64, interval: U64 = 0) => \"\"\" Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. \"\"\" _expiration = expiration + Time.nanos() _interval = interval _notify = consume notify _node = ListNode[Timer] try _node()? = this end new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) => \"\"\" Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. \"\"\" _expiration = _abs_expiration_time(expiration) _interval = interval _notify = notify _node = ListNode[Timer] try _node()? = this end fun ref _cancel() => \"\"\" Remove the timer from any list. \"\"\" _node.remove() _notify.cancel(this) fun ref _get_node(): ListNode[Timer] => \"\"\" Returns the list node pointing to the timer. Used to schedule the timer in a queue. \"\"\" _node fun ref _slop(bits: USize) => \"\"\" Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. \"\"\" _expiration = _expiration >> bits.u64() if _interval > 0 then _interval = (_interval >> bits.u64()).max(1) end fun ref _fire(current: U64): Bool => \"\"\" A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. \"\"\" let elapsed = current - _expiration if elapsed < (1 << 63) then let count = (elapsed / _interval) + 1 _expiration = _expiration + (count * _interval) if not _notify(this, count) then _notify.cancel(this) return false end end (_interval > 0) or ((_expiration - current) < (1 << 63)) fun _next(): U64 => \"\"\" Returns the next expiration time. \"\"\" _expiration fun tag _abs_expiration_time(wall: (I64, I64)): U64 => \"\"\" Converts a wall-clock adjusted system time to absolute expiration time \"\"\" let wall_now = Time.now() Time.nanos() + (((wall._1 * 1000000000) + wall._2) - ((wall_now._1 * 1000000000) + wall_now._2)).u64()","title":"timer.pony"},{"location":"src/time/timer_notify/","text":"interface TimerNotify \"\"\" Notifications for timer. \"\"\" fun ref apply(timer: Timer, count: U64): Bool => \"\"\" Called with the the number of times the timer has fired since this was last called. Usually, the value of `count` will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and `count` is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). \"\"\" true fun ref cancel(timer: Timer) => \"\"\" Called if the timer is cancelled. This is also called if the notifier returns false from its `apply` method. \"\"\" None","title":"timer_notify.pony"},{"location":"src/time/timers/","text":"use \"collections\" use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor Timers \"\"\" A hierarchical set of timing wheels. \"\"\" var _current: U64 = 0 let _slop: USize embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer] embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels()) embed _pending: List[Timer] = List[Timer] var _event: AsioEventID = AsioEvent.none() new create(slop: USize = 20) => \"\"\" Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. \"\"\" _slop = slop _set_time() for i in Range(0, _wheels()) do _wheel.push(_TimingWheel(i)) end be apply(timer: Timer iso) => \"\"\" Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. \"\"\" let timer': Timer ref = consume timer _map(timer') = timer' timer'._slop(_slop) _fire(timer') _advance() be cancel(timer: Timer tag) => \"\"\" Cancels a timer. \"\"\" try (_, let timer') = _map.remove(timer)? timer'._cancel() if (_map.size() == 0) and (not _event.is_null()) then // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end be dispose() => \"\"\" Dispose of this set of timing wheels. \"\"\" for wheel in _wheel.values() do wheel.clear() end _map.clear() if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When the event fires, advance the timing wheels. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then _advance() end fun ref _advance() => \"\"\" Update the current time, process all the timing wheels, and set the event for the next time we need to advance. \"\"\" let elapsed = _set_time() try for i in Range(0, _wheels()) do if not _wheel(i)?.advance(_pending, _current, elapsed) then break end end for timer in _pending.values() do _fire(timer) end end _pending.clear() var nsec = _next() if _event.is_null() then if nsec != -1 then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true) end else if nsec != -1 then // Update an existing event. @pony_asio_event_setnsec(_event, nsec) else // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end fun ref _fire(timer: Timer) => \"\"\" Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. \"\"\" if not timer._fire(_current) then try _map.remove(timer)? end return end try let rem = timer._next() - _current _get_wheel(rem)?.schedule(consume timer) end fun _next(): U64 => \"\"\" Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. \"\"\" var next: U64 = -1 try for i in Range(0, _wheels()) do next = next.min(_wheel(i)?.next(_current)) end end if next != -1 then next = next << _slop.u64() end next fun ref _set_time(): U64 => \"\"\" Set the current time with precision reduced by the slop bits. Return the elapsed time. \"\"\" let previous = _current = Time.nanos() >> _slop.u64() _current - previous fun ref _get_wheel(rem: U64): _TimingWheel ? => \"\"\" Get the hierarchical timing wheel for the given time until expiration. \"\"\" let t = rem.min(_expiration_max()) let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits() _wheel(i)? fun tag _expiration_max(): U64 => \"\"\" Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. \"\"\" ((1 << (_wheels() * _bits())) - 1).u64() fun tag _wheels(): USize => 4 fun tag _bits(): USize => 6","title":"timers.pony"}]}